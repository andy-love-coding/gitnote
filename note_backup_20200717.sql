-- MySQL dump 10.13  Distrib 5.7.22, for Linux (x86_64)
--
-- Host: localhost    Database: note
-- ------------------------------------------------------
-- Server version	5.7.22-0ubuntu18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `category_id` int(10) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `articles_title_index` (`title`),
  KEY `articles_category_id_index` (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (1,'php基础',1,'2019-02-19 05:25:52','2019-02-19 05:25:52'),(2,'laravel框架基础',2,'2019-02-19 07:30:05','2019-02-19 07:30:05'),(3,'Restful Api 说明',2,'2019-02-20 13:17:06','2019-02-20 13:17:06'),(4,'数据库备份',7,'2019-02-20 13:37:32','2019-02-20 13:37:32'),(5,'Laravel在线教育平台',2,'2019-02-20 14:36:05','2019-02-20 14:36:05'),(6,'服务器相关知识',7,'2019-02-21 06:54:16','2019-02-21 07:22:07'),(7,'待办',9,'2019-02-21 07:50:33','2019-02-21 07:50:33'),(8,'js_jq_ajax等基础知识',3,'2019-02-21 09:39:11','2019-02-21 09:39:11'),(9,'工具的使用',9,'2019-02-21 11:43:49','2019-02-21 11:43:49'),(10,'vue基础知识',4,'2019-02-24 14:29:20','2019-02-24 14:29:20'),(11,'vue电商网站后台(my-app)',4,'2019-02-26 08:35:32','2019-02-26 08:35:32'),(12,'公众号基础',6,'2019-02-26 09:23:54','2019-02-26 09:23:54'),(13,'小程序基础知识',5,'2019-02-27 00:50:09','2019-02-27 00:50:09'),(14,'小程序demo（小P学堂）',5,'2019-02-28 09:18:35','2019-02-28 09:19:00'),(15,'idea',9,'2019-03-01 02:25:50','2019-03-01 02:25:50'),(16,'安全',7,'2019-03-01 03:58:24','2019-03-01 03:58:24'),(17,'场景',9,'2019-03-02 09:32:51','2019-03-02 09:32:51'),(18,'产品检查框架',10,'2019-03-04 06:31:41','2019-03-04 06:31:41'),(19,'CRM积分等级',10,'2019-03-04 09:54:10','2019-03-04 09:54:10'),(20,'vagrant&homestead',7,'2019-03-08 16:49:20','2019-03-08 16:49:20'),(21,'composer | npm | yarn',7,'2019-03-10 09:21:41','2020-05-22 13:50:45'),(22,'自用笔记本项目',8,'2019-03-10 09:48:04','2019-03-13 07:35:43'),(23,'jdpz节点碰撞',8,'2019-03-10 13:12:48','2019-03-12 18:22:26'),(24,'h5+css3',11,'2019-03-11 06:43:37','2019-03-11 06:43:37'),(25,'案例代码',11,'2019-03-11 06:57:48','2019-03-11 06:57:48'),(26,'商用笔记本',8,'2019-03-13 07:35:03','2019-03-13 07:35:52'),(27,'css基础',11,'2019-03-17 01:22:21','2019-03-17 01:22:38'),(28,'经营管理',9,'2019-03-17 06:19:41','2019-03-17 06:19:41'),(29,'JD移动端布局',11,'2019-03-18 07:41:36','2019-03-18 07:42:15'),(30,'前端UI框架',11,'2019-03-18 10:10:07','2019-04-10 14:37:44'),(31,'letao项目demo',11,'2019-03-25 14:39:11','2019-03-25 14:39:11'),(32,'letao项目demo(vue-mint)',11,'2019-04-11 09:28:32','2019-04-11 09:28:32'),(33,'html项目',12,'2019-04-26 18:09:58','2019-04-26 18:09:58'),(34,'版本号（^ ~）',7,'2020-06-01 15:02:22','2020-06-01 15:02:22');
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '分类名称',
  `description` text COLLATE utf8mb4_unicode_ci COMMENT '描述',
  `article_count` int(11) NOT NULL DEFAULT '0' COMMENT '文章数',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `categories_name_index` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'PHP',NULL,0,NULL,NULL),(2,'Laravel',NULL,0,NULL,NULL),(3,'JS',NULL,0,NULL,NULL),(4,'Vue',NULL,0,NULL,NULL),(5,'小程序',NULL,0,NULL,NULL),(6,'公众号',NULL,0,NULL,NULL),(7,'服务器',NULL,0,NULL,NULL),(8,'项目',NULL,0,NULL,NULL),(9,'其他',NULL,0,NULL,NULL),(10,'产品','产品相关',0,'2019-03-04 06:31:10','2019-03-04 06:31:10'),(11,'前端布局','h5+css3',0,'2019-03-11 06:43:11','2019-03-11 06:43:11');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=96 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (90,'2014_10_12_000000_create_users_table',1),(91,'2014_10_12_100000_create_password_resets_table',1),(92,'2019_02_07_114646_create_articles_table',1),(93,'2019_02_07_115950_create_paragraphs_table',1),(94,'2019_02_07_121241_create_categories_table',1),(95,'2019_02_07_121811_seed_categories_data',1);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `paragraphs`
--

DROP TABLE IF EXISTS `paragraphs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `paragraphs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `article_id` int(11) NOT NULL,
  `order` int(10) unsigned NOT NULL DEFAULT '100',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=331 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `paragraphs`
--

LOCK TABLES `paragraphs` WRITE;
/*!40000 ALTER TABLE `paragraphs` DISABLE KEYS */;
INSERT INTO `paragraphs` VALUES (1,'## 特点\r\nphp支持多进程，不支持多线程',1,100,'2019-02-19 05:26:12','2019-02-19 05:46:58'),(2,'## 获取原生post数据\r\n`$GLOBALS[\"HTTP_RAW_POST_DATA\"] `php5.5之后官方不建议使用,若使用会报一个警告，php7.0之后则会直接报致命错误\r\n```php\r\n$postStr = $GLOBALS[\"HTTP_RAW_POST_DATA\"]; // 废弃\r\n```\r\n`file_get_contents` 可以接受原生post数据，还可以接受put、delete等数据。\r\n```php\r\n$postStr = file_get_contents(\'php://input\'); // 推荐使用\r\n```',1,100,'2019-02-19 05:28:59','2019-02-19 05:28:59'),(3,'## XML转换成对象\r\n```php\r\n// 第一个参数是xml数据\r\n// LIBXML_NOCDATA表示：Merge CDATA as text nodes，即不会把CDATA里面的标签解析成对象属性，会把他们看出一个整体\r\n$obj = simplexml_load_string($postStr,\'SimpleXMLElement\',LIBXML_NOCDATA);\r\n```',1,100,'2019-02-19 05:31:23','2019-02-19 05:31:23'),(4,'## 格式化输出\r\nsprintf() 格式化输出，相当于js中的字符串模板，占位符：%s字符串、%d数字\r\n```php\r\n$name = \"andy\";\r\n$age = 18;\r\n$tmpStr = \"我是%s，今年%d岁\";\r\n$resultStr = sprintf($tmpStr,$name,$age);\r\necho $resultStr;\r\n```\r\n```php\r\n// 上面的代码，换一种风格\r\n$arr[] = \"andy\";\r\n$age[] = 18;\r\n$tmpStr = \"我是%s，今年%d岁\";\r\n$resultStr = sprintf($tmpStr,...$arr); // ...表示展开\r\necho $resultStr;\r\n```',1,100,'2019-02-19 05:34:26','2019-02-19 05:34:26'),(5,'## 时间函数\r\n**时间戳 → 时间** date()\r\n```php\r\ndate(\'Y-m-d H:i:s\'); // 输出当前时间：2018-12-01 13:32:12\r\ndate(\'Y/m/d H:i\',$val -> begin_at)}; // 将时间戳 转化为 时间：2018/12/01 13:32\r\ndate(\'Y-m-d\',strtotime(\'+1 year\')); // 一年后的时间：2019-12-01\r\n```\r\n**时间 → 时间戳** strtotime()\r\n```php\r\nstrtotime(date(\'2018-11-10 10:00:00\')); // 将时间转化为时间戳：1540864800\r\nstrtotime(\'+1 year\'); // 一年后的时间戳(也可以是month/day等)\r\n```',1,100,'2019-02-19 05:37:51','2019-02-28 11:57:16'),(6,'## php设置（上传文件大小）\r\n在php.ini中：https://blog.csdn.net/u013239233/article/details/78040794\r\n```php\r\nupload_max_filesize = 8m; // 即允许上传文件大小的最大值。默认为2M\r\npost_max_size = 8m;  // 指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值。默认为8M\r\n```',1,100,'2019-02-19 05:41:14','2019-02-19 05:41:14'),(7,'## php跳转\r\n```php\r\nheader(\'location:\'.$url); \r\n```',1,100,'2019-02-19 05:43:47','2019-02-19 05:43:47'),(8,'## php扩展',1,100,'2019-02-19 05:46:09','2019-02-19 06:00:09'),(9,'### curl扩展\r\n作用：远程获取和采集内容，实现接口对接，数据传输等等。\r\n安装：curl扩展不是php默认安装的扩展，需单独安装。\r\n—— 在Linux中，源码安装时加上--with-curl[=DIR] 选项。\r\n—— 在windows中，直接在php.ini中打开对应扩展选项。\r\n`server-demo.php` 代码\r\n```php\r\n<?php\r\necho $_SERVER[\'REQUEST_METHOD\']; \r\necho \"<hr />\";\r\n\r\nprint_r($_POST);\r\necho \"<hr />\";\r\n\r\nprint_r($_FILES);\r\n```\r\ncurl.php 代码\r\n```php\r\n<?php\r\n$url = \'http://gzh.com/server-demo.php\';\r\n// $url = \'https://wx.1314000.cn/\';\r\n\r\n// 文件地址\r\n$file = __DIR__.\'/img/01.jpg\';\r\n// echo http_request($url); // get请求\r\n// echo http_request($url, [\'name\'=>\'张三\', \'age\'=>19 ]); // post请求\r\necho http_request($url, [], $file); // 上传图片\r\n\r\n// 封装以上curl请求：支持get、post、post上传文件\r\nfunction http_request(string $url, $params = [], string $filepath = \'\')   // $params: array|json\r\n{\r\n  // 有文件上传时，用CURLFile类来指向文件，并赋值给post参数数组$params。\r\n  if (!empty($filepath)) {\r\n    $params[\'media\'] = new CURLFile($filepath); // \'media\'这个索引名称随便起\r\n  }\r\n  // curl发送请求4步走：初始化、设置选项、执行、关闭\r\n  // 1.0 初始化\r\n  $ch = curl_init($url); \r\n  // 2.0 设置选项\r\n  curl_setopt($ch, CURLOPT_URL, $url); // 设置请求的url地址\r\n  curl_setopt($ch, CURLOPT_HEADER, 0); // 不在终端中显示header头信息，其实默认就不显示\r\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // 不直接将请求结果显示在终端中，而是赋值给指定变量【重要】\r\n  curl_setopt($ch, CURLOPT_USERAGENT, \'msie\'); // 设置请求的浏览器型号（具体设置再聊），对于爬虫伪造浏览器请求，从而避免被屏蔽有用\r\n  curl_setopt($ch, CURLOPT_TIMEOUT, 10); // 设置超时时间，单位秒\r\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); // 不进行https证书检查\r\n  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); // 不进行https证书检查\r\n\r\n  if ($params) {\r\n    curl_setopt($ch, CURLOPT_POST, 1); // 设置请求方法为post\r\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $params); // 设置post请求的参数\r\n  }  \r\n  // 3.0 执行\r\n  $data = curl_exec($ch); // 将成功请求的结果，赋值给指定的变量\r\n  $info = curl_getinfo($ch); // 执行后，得到请求结果相关信息\r\n  if ($info[\'http_code\'] !== 200) {\r\n    echo curl_error($ch); // 输出错误,若为https请求,且没有相关设置的话，则报错：SSL certificate problem: unable to get local issuer certificate\r\n    echo \'<br/>\' . \'请求失败，状态码：\' . $info[\'http_code\'];\r\n  }\r\n  // 4.0 关闭\r\n  curl_close($ch);\r\n  // 返回数据\r\n  return $data;\r\n} \r\n```\r\n调用curl封装函数，发送请求\r\n—— 发送get请求\r\n```php\r\nvar $ret = http_request($url);\r\n```\r\n—— 发送post请求\r\n```php\r\n$params[\'username\'] = \'张三\';\r\n$params[\'age\'] = 18;\r\nvar $ret = http_request($url, $params);\r\n```\r\n—— 发送post请求_只上传文件\r\n```php\r\nvar $ret = http_request($url,[],$filepath);\r\n```',1,100,'2019-02-19 05:47:09','2019-02-19 06:00:20'),(10,'## Laravel 官网\r\n### 社区文档\r\n官网：https://laravel-china.org/docs/laravel/5.7\r\n### 从github安装一个Laravel项目\r\n```\r\n$ cd ~/Code\r\n$ git clone git@github.com:<username>/larabbs.git\r\n$ cd larabbs\r\n$ composer install\r\n$ cp .env.example .env\r\n```\r\n### laravel项目初始化\r\n1.创建Laravel项目\r\n—— 方法1：先创建好项目文件，在文件夹里面执行如下命令\r\n```php\r\ncomposer  create-project  Laravel/Laravel=5.4.* --prefer-dist  ./\r\n```\r\n—— 方法2：不用先创建项目文件夹，直接在命令里面定义项目文件夹就好\r\n```php\r\ncomposer create-project laravel/laravel weibo --prefer-dist \"6.*\"\r\n```\r\n—— 查看Larave版本命令\r\n```php\r\nphp artisan --version\r\n```\r\n\r\n------------\r\n2.设置Laravel时区\r\n—— 在config/app.php中设置\r\n```php\r\ntimezone => \'PRC\',     或    timezone => \'Asian/shanghai\',\r\n```\r\n\r\n------------\r\n3.Laravel项目本地化（语言包）\r\n—— 下载语言包页面链接 https://learnku.com/courses/laravel-essential-training/6.x/registration-failed-error-message/5472\r\n```php\r\n$ composer require \"overtrue/laravel-lang:~3.0\"\r\n```\r\n安装成功后，在 `config/app.php` 文件中将以下这一行：\r\n```php\r\nIlluminate\\Translation\\TranslationServiceProvider::class,\r\n```\r\n替换成：\r\n```\r\nOvertrue\\LaravelLang\\TranslationServiceProvider::class,\r\n```\r\n—— 修改`config/app.php`中的本地化配置\r\n```php\r\n\'locale\' => \'zh-CN\',\r\n```\r\n\r\n------------\r\n4.配置Laravel数据库\r\n—— 配置数据库，修改.env文件\r\n```php\r\nDB_CONNECTION=mysql\r\nDB_HOST=localhost\r\nDB_PORT=3306\r\nDB_DATABASE=edu_bj06\r\nDB_USERNAME=root\r\nDB_PASSWORD=root\r\n```\r\n—— 禁用mysql的严格模式，修改config/database.php\r\n```php\r\n\'strict\' => false,\r\n```\r\n\r\n------------\r\n5.删除Laravel项目非必要文件(如果需要框架的用户认证功能，则可以不用删除)\r\n```php\r\n1：删除  app/user.php  文件\r\n2：删除  app/Http/Controllers/Auth  目录\r\n3：删除  database/migrations  目录下所有文件\r\n4：删除  database/seeds  目录下所有文件\r\n5：删除  public/js  目录\r\n6：删除  public/css  目录\r\n7：删除  resources/views  目录下所有文件\r\n```\r\n\r\n------------\r\n6.配置laravel虚拟主机\r\n—— 配置apache虚拟主机，修改vhost.ini\r\n```php\r\n<VirtualHost _default_:80>\r\n  ServerAdmin admin@yourdomain.com\r\n  DocumentRoot \"Y:\\win7\\lavavel_edu1\\public\"\r\n  ServerName www.laravel.com\r\n  ServerAlias laravel.com\r\n  <Directory \"192.169.8.100\\Users\\andy\\Public\\win7\\lavavel_edu1\\public\">\r\n   Options Indexes -FollowSymLinks +ExecCGI\r\n   AllowOverride All\r\n   Order allow,deny\r\n   Allow from all\r\n   Require all granted\r\n  </Directory>\r\n</VirtualHost>\r\n```\r\n```php\r\n<VirtualHost _default_:80>\r\n  ServerAdmin admin@yourdomain.com\r\n  DocumentRoot \"C:\\Users\\andy\\Desktop\\win7\\laravel_edu0\\public\"\r\n  ServerName www.laravel0.com\r\n  ServerAlias laravel0.com\r\n  <Directory />\r\n// +Indexes表示可查看目录；-Indexes表示不可查看目录\r\n      Options +Indexes +FollowSymLinks +ExecCGI\r\n      AllowOverride All\r\n      Order allow,deny\r\n      Allow from all\r\n      Require all granted\r\n  </Directory>\r\n</VirtualHost>\r\n```\r\n#### apache配置文件语法检查命令\r\n```\r\n在cmd中：apache安装目录/apache/bin/httpd.exe  -t\r\n```\r\n重启apache\r\n配置host文件，win（C:\\Windows\\System32\\drivers\\etc）\r\n```\r\n127.0.0.1   www.laravel.com  larave.com\r\n```\r\n\r\n### 辅助函数\r\n官网： https://laravel-china.org/docs/laravel/5.4/helpers/1252\r\n#### 辅助函数个例\r\n`config()`：读取配置文件内容\r\n```php\r\n// config(\'filesystems.disks.qiniu.access_key\') 会读取配置文件 /config/filesystems.php 中的内容，数组数据用 \".\" 来分割\r\n$auth = \\Qiniu\\Auth(config(\'filesystems.disks.qiniu.access_key\'),config(\'filesystems.disks.qiniu.secret_key\'));\r\n```',2,100,'2019-02-19 07:40:15','2020-01-01 11:42:49'),(11,'## 路由\r\n### 路由基本写法\r\n路由文件\r\n```\r\n// web访问路由文件\r\n/routes/web.php\r\n// api路由文件\r\n/routes/api.php\r\n```\r\n路由写法\r\n```php\r\nRoute::请求方式(\'url\',匿名函数);\r\nRoute::请求方式(\'url\',\'控制器名称@操作方法\');\r\n\r\n// name(\'\')是定义【路由别名】，在试图中可用route(\'路由别名\')引用该路由\r\nRoute::get(\'admin/public/login\' , \'Admin\\PublicController@login\') -> name(\'login\');\r\n\r\n// group表示【路由组】，prefix表示【路由前缀】，middleware表示【访问控制】\r\n// 注意控制器目录用反斜杠\"\\\"分割(\'Admin\\IndexController@index\')\r\nRoute::group([\'prefix\'=>\'admin\',\'middleware\' => \'auth:admin\'],function (){\r\n   Route::get(\'index/index\',\'Admin\\IndexController@index\') -> name(\'dashboard\');\r\n   Route::get(\'index/welcome\',\'Admin\\IndexController@welcome\') -> name(\'welcome\');\r\n   Route::get(\'index/logout\',\'Admin\\IndexController@logout\') -> name(\'logout\');\r\n});\r\n\r\n// 支持 get和post请求\r\nRoute::match([\'get\', \'post\'], \'update/{id?}\', $callback);\r\n// 支持所有类型的请求 （不建议用它）\r\nRoute::any(\'foo\',$callback);\r\n```\r\n### 路由参数\r\n提示: url中的问号参数不用再路由中定义，直接写在url后面就行。\r\n```php\r\n// 定义：路由参数\r\n// 必填\r\nRoute::get(\'URL/{参数名称}\',\'闭包函数或控制器响应方法标识\');\r\n// 可选\r\nRoute::get(\'URL/{参数名称?}\',\'闭包函数或控制器响应方法标识\');\r\n// 参数限制\r\nRoute::get(\'URL/{参数名称}\',\'闭包函数或控制器响应方法标识\')->where(\'参数名称\',\'正则表达式\');\r\nRoute::get(\'URL/{参1}/{参2}\',\'闭包函数或控制器响应方法标识\')->where([\'参1\'=>\'正则1\'，\'参2\'=>\'正则2\']);\r\n------------\r\n// 传递：路由参数\r\n// 在route()中传递路由参数\r\nRoute::get(\'URL/{一个必填参数}\',\'闭包函数或控制器响应方法标识\')->name(\'name1\');\r\nroute(\'name1\',1);   // 视图中生成地址：URL/1 ，route()中的第一个参数会传给路由中的必填参数\r\nroute(\'name1\',[\'idddd\'=>2]);   // 视图中生成地址：URL/2 ，route()中的第一个参数会传给路由中的必填参数\r\nroute(\'name1\',[\'idddd\'=>3,\'size\'=>140]);  // 生成地址：URL/3?size=140 ，route()中的第一个参数给路由参数，第二个参数给问号参数\r\n------------\r\n// route()方法会自动获取模型的主键，其等价于：redirect()->route(\'users.show\',[$user->id]);\r\nreturn redirect()->route(\'users.show\',[$user]); // $user 是User模型的实例\r\n```\r\n在视图中传递路由参数\r\n```php\r\n// 路由\r\nRoute::get(\'system-clear\',\'ClearController@clear\')->name(\'clear\');\r\n// 模板\r\n<a href=\"{ {route(\'clear\',array(\'type_id\'=>1))} }\">http://www.xiaoshu168.com</a>\r\n// 生成地址\r\n127.0.0.1/clear?type_id=1\r\n// 控制器接收参数\r\npublic function clear(Request $request)\r\n{\r\n   dd($request->input(\'type_id\'));\r\n}\r\n```\r\n```php\r\n// 路由\r\nRoute::get(\'signup/confirm/{token}\', \'UsersController@confirmEmail\')->name(\'confirm_email\');\r\n// 模板\r\n<a href=\"{ { route(\'confirm_email\', $user->activation_token) } }\">\r\n// 生成地址\r\nhttp://sample.test/signup/confirm/yFOP7pbHxi1L30nNlZ5Qf29IHjxsH0\r\n// 控制器接收参数\r\npublic function confirmEmail($token){\r\n  ...\r\n}\r\n```\r\n### 查看所有路由\r\n```php\r\nphp artisan route:list\r\n```\r\n### 资源路由 Route::resource\r\n```\r\nRoute::resource(\'users\', \'UsersController\');\r\n```\r\n等价于\r\n```\r\nRoute::get(\'/users\', \'UsersController@index\')->name(\'users.index\');\r\nRoute::get(\'/users/create\', \'UsersController@create\')->name(\'users.create\');\r\nRoute::get(\'/users/{user}\', \'UsersController@show\')->name(\'users.show\');\r\nRoute::post(\'/users\', \'UsersController@store\')->name(\'users.store\');\r\nRoute::get(\'/users/{user}/edit\', \'UsersController@edit\')->name(\'users.edit\');\r\nRoute::patch(\'/users/{user}\', \'UsersController@update\')->name(\'users.update\');\r\nRoute::delete(\'/users/{user}\', \'UsersController@destroy\')->name(\'users.destroy\');\r\n```',2,100,'2019-02-19 07:43:58','2019-05-11 12:12:05'),(12,'## CSRF攻击\r\n关闭某些路由的 `CSRF验证`\r\n—— Laravel默认是给我们的post提交进行了csrf验证，所以测试的时候，可以进行关闭。\r\n—— 并不是所有请求都需要避免CSRF攻击，比如去第三方API获取数据的请求。\r\n```php\r\n// 关闭某路由的csrf验证,在“app/Http/MiddleWare/VerifyCsrfToken.php中\r\nprotected $except = [\r\n  //不进行csrf验证的路由\r\n  \'index\',\r\n  \'hello\'\r\n];\r\n```\r\n在视图（模板）中生成 CSRF\r\n```php\r\n// csrf_field 使用\r\n<form method=\"POST\" action=\"/profile\">\r\n    { { csrf_field() } } // 等价于：<input type=\"hidden\" name=\"_token\" value=\"{ { csrf_token() } }\">\r\n    ...\r\n</form>\r\n```',2,100,'2019-02-19 08:00:18','2019-02-19 08:12:55'),(13,'## 请求\r\n### Input类 获取请求数据\r\n接收用户输入的类：Illuminate\\Support\\Facades\\Input\r\nInput 既既可以获取get中的信息，也可以获取post中的信息。\r\n```php\r\nInput::get(‘参数的名字’, ‘默认值’) \r\nInput::all(): 获取所有的输入\r\nInput::get(\'\'): 获取单个的输入\r\nInput::only([]): 获取指定几个的输入\r\nInput::except([]): 获取指定几个输入以外的所有的参数\r\n------------\r\nInput::has(\'名称\')：判断某个输入的参数是否存在\r\n```\r\nInput类前的使用：设置及引用\r\n```php\r\n// 设置：在/config/app.php中添加别名\r\n\'aliases\' => [\r\n  // 手动添加门面\r\n  \'Input\' => Illuminate\\Support\\Facades\\Input::class,\r\n]\r\n// 使用：在控制器中引入门面后，即可使用Input类了\r\nuse Input；\r\n```\r\n### Request 获取数据【掌握】\r\n类：Illuminate\\Http\\Request\r\n#### 依赖注入\r\n使用`依赖注入`在控制器方法中去使用。\r\n```php\r\n依赖注入是一种软件设计思想，在传统软件中，上层代码依赖于下层代码，当下层代码有所改动时，上层代码也要相应进行改动，因此维护成本较高。而依赖注入原则的思想是，上下层不应该互相依赖，而是靠【接口关联】，靠【注入关联】。意为上层代码定义接口，下层代码实现该接口，从而使得下层依赖于上层接口，下层类依赖上层类的注入，降低耦合度，提高系统弹性。\r\n```\r\n依赖注入举例\r\n```php\r\n<?php\r\n// 上层定义接口(接口层，或底层接口)\r\ninterface SendInterface {\r\n  public function sendFun();\r\n}\r\n// 继承接口，定义Mail类(上层类，或底层类)\r\nclass Mail implements SendInterface {\r\n  public function sendFun(){\r\n    return \'发送邮件\';\r\n  }\r\n}\r\n// 继承接口，定义Sms类(上层类，或底层类)\r\nclass Sms implements SendInterface {\r\n  public function sendFun(){\r\n    return \'发送短信\';\r\n  }\r\n}\r\n// 定义下层类，需要注入上层类对象(或接口对象）(下层类，或高层类，也就是最终的业务应用类)\r\nclass Register {\r\n  private $_sendObj;\r\n  public function __construct(SendInterface $obj) // 下层类函数定义时：注入接口对象\r\n  {\r\n    $this->_sendObj = $obj;\r\n  }\r\n  public function msg()\r\n  {\r\n    $this->_sendObj->sendFun(); // 发送信息(发生邮件，还短信，完全依赖于注入的对象)\r\n  }\r\n}\r\n// 实例化下层类(下层类构造时，依赖注入一个对象)\r\n$m = new Register(new Mail)；// 注入一个上层邮件类对象(或底层类对象)\r\necho $m->msg(); // 结果：发送邮件\r\n$s = new Register(new Sms)； // 注入一个上层短信类对象\r\necho $s->msg(); // 结果：发送短信\r\n```\r\n#### request 获取数据举例\r\n```php\r\n// 获取请求方式 GET POST等\r\nvar_dump($request->method());\r\n// 检测方法 是否是POST提交\r\nvar_dump($request->isMethod(\'post\'));\r\n// 获取完整URL\r\nvar_dump($request->url());\r\n// 获取客户端IP\r\nvar_dump($request->ip());\r\n// 获取端口\r\nvar_dump($request->getPort());\r\n// 获取参数\r\nvar_dump($request->get(\'name\'));\r\nvar_dump($request->get(\'name\',\'默认值\'));\r\n// 检测是否存在\r\nvar_dump($request->has(\'name\'));\r\n// 获取所有值\r\nvar_dump($request->all());\r\n// 获取部份值\r\nvar_dump($request->only([\'name\',\'age\']));\r\n// 获取排除以外的值\r\nvar_dump($request->except([\'_token\']));\r\n// 获取头信息\r\nvar_dump($request->header());\r\n// 获取host\r\nvar_dump($request->header(\'host\'));\r\n// 获取server\r\nvar_dump($request->server());\r\n// 获取服务器端口\r\nvar_dump($request->getport());\r\n```',2,100,'2019-02-19 09:01:52','2019-02-19 09:01:52'),(14,'## 响应 response\r\n可以使用提供的助手函数 `response()` 来进行操作;\r\n也可以使用类 `Illuminate\\Http\\Response` 来操作。\r\n------------\r\n返回字符串\r\n```php\r\nreturn “PHP是世界上最好的语言”;\r\n```\r\n返回json数据\r\njson()方法会自动将 Content-Type 响应头信息设置为 application/json，并使用 PHP 的 json_encode 函数将数组转换为 JSON 字符串。\r\n```php\r\nreturn response()->json([\r\n  \'name\' => \'zhangsan\',\r\n  \'age\' => 22\r\n],200); \r\n// json()的第二个参数为http状态码，进行【接口编写】时，将要进行设置。\r\n// 在非接口编写时，不用返回http状态码，如果访问方法或数据不存在，返回 404；成功返回 200\r\n```\r\n附加头信息\r\n```php\r\n/ 写入头信息一定要有主体信息\r\nreturn response(\'<p>一定要有主体信息</p>\')->header(\'name\',\'andy\')->header(\'email\':\'xxxx@qq.com\');\r\n```\r\n设置cookie\r\nlaravel框架为了安全，它的cookie是加密的,laravel的 cookie加密是可逆的\r\n```php\r\n// 设置cookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\r\n/**\r\n* 参数1：cookie键名\r\n* 参数2：cookie值\r\n* 参数3：有效期，单位分钟\r\n* 参数4：网站路径(目录)\r\n* 参数5：域名\r\n* 参数6：bool,secure为true会对cookie进行HTTPS加密传输,默认false\r\n* 参数7：bool,httponly为true时,只能通过请求发送cookie,使用js(document.cookie)无法读取cookie,安全性更高，默认false\r\n**/\r\nreturn response(\'\')->cookie(\'id\',111,10);\r\nreturn response(\'\')->cookie(\'id\',111,10,\'/\');\r\nreturn response(\'\')->cookie(\'id\',111,10,\'/\'，\'baidu.com\'，false,false);\r\n// 获取cookie\r\necho $request->cookie();\r\necho $request->cookie(\'id\');\r\n```\r\n### 重定向\r\n```php\r\nreturn redirect(\'路由\');\r\nreturn redirect()->route(\'路由别名\');\r\n\r\n// 页面跳转\r\nreturn redirect(\'index\');  // 推荐写法\r\nreturn redirect(route(\'testindex\'));           // 路由别名 testindex\r\nreturn redirect()->to(route(\'testindex\'));  // 路由别名 testindex\r\nreturn redirect()->route(\'testindex\');       //路由别名 testindex\r\n```\r\n下载文件\r\n```php\r\n// 强制让用户的浏览器下载指定路径文件的响应。\r\nreturn response()->download(\'./robots.txt\');\r\n```',2,100,'2019-02-19 09:21:38','2019-02-19 09:23:10'),(15,'## 视图（Blade模板）\r\n视图概述\r\n—— 我们在控制器中使用助手函数 view() 来加载模板\r\n—— 视图位置：resources/views\r\n—— 视图命名：文件名小写，文件名的后缀是 .blade.php，因为laravel里面有一套模板引擎就是使用blade。\r\n\r\n------------\r\n### 分配数据到模板（视图）\r\n```php\r\nview(模板文件名称,关联数组)\r\nview(模板文件名称,compact(\'变量名1\',\'变量名2\'))\r\nview(模板文件名称)->with(名称,值)->with(名称,值)\r\nview(模板文件名称)->with(关联数组)\r\n```\r\n```php\r\n// 在控制器中返回视图，并传递数据：resources/views/test.blade.php\r\npublic function index() {\r\n  $name = \'andy\';\r\n  $age = 19;\r\n  $data = [\'name\'=>$name,\'age\'=>$age];\r\n  // return view(\'test\')->with(\'name\',$name)->with(\'age\',$age);\r\n  // return view(\'test\')->with([\'name\'=>$name,\'age\'=>$age])\r\n  // return view(\'test\',$data); \r\n  return view(\'test\',compact(\'name\',\'age\'));\r\n}\r\n```\r\n### 模板中输出变量\r\n输出变量\r\n```php\r\n{ {$name} } // 等价于：<?php echo $name?>\r\n```\r\n三元运算符输出\r\n```php\r\n{ { $name or \'Default\' } } // 等价于：<?php echo isset( $name)?$name:\'default\'?>\r\n```\r\n### 转义输出 or 原生输出 or 原生态输出\r\n参考《Blade 模板引擎转义》：https://laravelacademy.org/post/4699.html\r\n\r\n------------\r\n\r\n#### 转义输出 { {} }\r\n把输出渲染成网页，或API响应时，一定要转义输出，这也是一种防护措施，能避免渲染恶意代码，造成XSS攻击，还能防止应用的用户无意中执行恶意代码。如果变量信息里边有 ”<” ”>” 等html标签信息，即html标签被转化为符号实体了。\r\n```php\r\n<?php\r\n$output = \'<p><script>alert(\"欢迎来到Laravel学院！\")</script></p>\';\r\necho htmlentities($output, ENT_QUOTES, \'UTF-8\');\r\n```\r\nLaravel使用的模板引擎是Blade，关于Blade的使用可以参考其官方文档，这里我们简单探讨下Laravel底层如何对输出进行转义处理。\r\n```php\r\n$html = \"<a href=\'http://www.baidu.com\'>百度</a>\";\r\n```\r\n```php\r\n{ { $html } } // 通过”{ {} }“转义输出：<a href=\'http://www.baidu.com\'>百度</a>\r\n```\r\n#### 原生输出 {!! !!}\r\nBlade视图中以{!! !!}包裹的变量会原生输出HTML，如果要显示图片、链接，推荐这种方式，常用于富文本编辑器的内容。\r\n如果变量信息里边有 ”<” ”>” 等html标签信息，而不希望html标签被转化为符号实体，就需要设置两个感叹号。\r\n```php\r\n$html = \"<a href=\'http://www.baidu.com\'>百度</a>\";\r\n```\r\n```php\r\n{!! $html !!} // 通过\"{!! !!}\"原生输出：百度\r\n```\r\n#### 原始态输出 @{ { } }\r\n由于很多 JavaScript 框架都使用花括号来表明所提供的表达式，所以你可以使用 @ 符号来告知 Blade 渲染引擎你需要保留这个表达式原始形态。\r\n```html\r\n// vue.blade.php\r\n<html>\r\n<head><script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\" /></head>\r\n<body>\r\n  <div class=\"box\">\r\n  	<!-- \"@\"解决定界符冲突的问题：由于vue框架也是用\"{ {} }\"来输出变量的 -->\r\n  	@{ {name} }\r\n	<p><input type=\"text\" v-model=\"name\"></p>\r\n  </div>\r\n</body>\r\n<script>\r\n  var app = new Vue({\r\n    el: \'#box\',\r\n    data: {\r\n      name: \'andy\'\r\n    }\r\n  });\r\n</script>\r\n</html>\r\n```\r\n### 模板注释\r\nBlade 也能在视图中定义注释。但是，和 HTML 的注释不同的是，Blade 注释不会被包含在应用程序返回的 HTML 内\r\n```php\r\n{ {--\r\n这里的内容不会显示在 HTML 网页内\r\n--} }\r\n```\r\n### 模板中使用函数\r\n可以在blade模板中直接使用php函数\r\n```php\r\n{ {php函数名()} }\r\n```\r\n### 模板中的 if 语句\r\n```php\r\n@if (count($records) === 1)\r\n    <p>我有一条记录！</p>\r\n@elseif (count($records) > 1)\r\n    <p>我有多条记录！</p>\r\n@else\r\n    <p>我没有任何记录！</p>\r\n@endif\r\n```\r\n### 模板中的循环\r\n官网：https://laravel-china.org/docs/laravel/5.7/blade/2265#69bdc6\r\n```php\r\n@for ($i = 0; $i < 10; $i++)\r\n    The current value is { { $i } }\r\n@endfor\r\n\r\n@foreach ($users as $user)\r\n    <p>This is user { { $user->id } }</p>\r\n  	# 如果传过来的是数组，那么就用\r\n	<p>{ { $user[\'id\'] } }</p>	\r\n@endforeach\r\n------------\r\n@forelse ($users as $user)\r\n    <li>{ { $user->name } }</li>\r\n 	# 如果传过来的是数组，那么就用\r\n	<p>{ { $user[\'name\'] } }</p>\r\n@empty\r\n    <p>No users</p>\r\n@endforelse\r\n\r\n------------\r\n\r\n\r\n@while (true)\r\n    <p>I\'m looping forever.</p>\r\n@endwhile\r\n```\r\n循环变量$loop：https://laravel-china.org/docs/laravel/5.7/blade/2265#f6e074\r\n\r\n\r\n| 属性                 | 描述                   |\r\n| :------------------ | :-------------------- |\r\n| `$loop->index`     | 当前循环迭代的索引（从0开始）。     |\r\n| `$loop->iteration` | 当前循环迭代 （从1开始）。       |\r\n| `$loop->remaining` | 循环中剩余迭代数量。           |\r\n| `$loop->count`     | 迭代中的数组元素总数。          |\r\n| `$loop->first`     | 当前迭代是否为循环中的首次迭代。     |\r\n| `$loop->last`      | 当前迭代是否为循环中的末次迭代。     |\r\n| `$loop->depth`     | 当前循环的嵌套深度级别。         |\r\n| `$loop->parent`    | 在嵌套循环中，父循环的 loop 变量。 |\r\n```php\r\n@foreach ($users as $user)\r\n    @if ($loop->first)\r\n        This is the first iteration.\r\n    @endif\r\n\r\n    @if ($loop->last)\r\n        This is the last iteration.\r\n    @endif\r\n\r\n    <p>This is user { { $user->id } }</p>\r\n@endforeach\r\n```\r\n### 模板继承\r\n官网：https://laravel-china.org/docs/laravel/5.7/blade/2265#b933a9\r\n定义布局\r\n```php\r\n<!-- 保存在 resources/views/layouts/app.blade.php 文件中 -->\r\n<html>\r\n    <head>\r\n        <title>App Name - @yield(\'title\')</title> // @yield占位符\r\n    </head>\r\n    <body>\r\n        @section(\'sidebar\') \r\n            This is the master sidebar.\r\n        @show // 定义区块并立即生成该区块\r\n\r\n        <div class=\"body\">\r\n            @yield(\'content\')\r\n        </div>\r\n    </body>\r\n</html>\r\n```\r\n`@endsection` 指令只定义一个区块，而 `@show` 则是定义并立即生成该区块。\r\n继承布局\r\n```php\r\n<!-- 文件保存于 resources/views/child.blade.php -->\r\n\r\n@extends(\'layouts.app\') // 继承\r\n\r\n@section(\'title\', \'Page Title\') // 单标签写法，用子视图的section，替换父级的yield\r\n\r\n@section(\'sidebar\')\r\n    @parent  // @parent 会被替换为父级 @section(\'sidebar\')中的内容\r\n    <p>这将追加到主布局的侧边栏。</p>\r\n@endsection\r\n\r\n@section(\'content\') // 用子视图的section，替换父级的yield\r\n    <p>这是主体内容。</p>\r\n@endsection\r\n```\r\n### 引入子视图\r\n官网：https://laravel-china.org/docs/laravel/5.7/blade/2265#2fd06d\r\n```php\r\n@include(\'view.name\') // 引入视图\r\n@include(\'view.name\', [\'some\' => \'data\']) // 引入视图，并传数据\r\n@includeIf(\'view.name\', [\'some\' => \'data\'])\r\n@includeWhen($boolean, \'view.name\', [\'some\' => \'data\'])\r\n@includeFirst([\'custom.admin\', \'admin\'], [\'some\' => \'data\'])\r\n```\r\n### 视图引入静态文件\r\n在写页面肯定会引入相关的外部文件（js、css、image），则会涉及到路径的问题（网站的根目录是public，根目录下有js目录、css目录等）\r\n```php\r\n<head>\r\n  <link rel=\"stylesheet\" href=\"{ { asset(\'css/test.css\') } }\">\r\n  <script src=\"{ { asset(\'css/test.js\') } }\" />\r\n</head>\r\n```',2,100,'2019-02-19 10:41:45','2019-02-19 11:23:48'),(16,'## DB类\r\n### DB 类前置工作\r\n—— 支持的数据库：MySQL、Postgresql、SQLite、SQL Server\r\n—— 开启apache的PDO扩展，开启完毕后，重启apache\r\n```php\r\nextension=php_pdo_mysql.ddl\r\n```\r\n—— 配置数据库连接\r\n```php\r\n// 在 .env.php 文件中配置环境变量\r\nDB_CONNECTION=mysql\r\nDB_HOST=127.0.0.1\r\nDB_PORT=3306\r\nDB_DATABASE=xiaop_study // 数据库名\r\nDB_USERNAME=root // 数据库用户名\r\nDB_PASSWORD=root // 数据库密码\r\nDB_PREFIX=wx_ // 表前缀\r\n```\r\n```php\r\n// 配置的环境变量，最终还是在 config/database.php 文件中使用\r\n\'mysql\' => [\r\n  \'prefix\' => env(\'DB_PREFIX\',\'\'),\r\n]\r\n```\r\n如果是 `php artisan serve` 方式启动的，修改了配置文件，则需要重新启动，才能读取修改后的配置文件。\r\n检查 mysql 是否启动\r\n```\r\n// windows环境\r\nnetstat -ano | findstr 3306\r\n```\r\n### DB类操作数据库\r\n按照MVC 的架构，对数据的操作应该放在 Model 中完成，但如果不使用Model，我们也可以用 laravel框架提供的 DB 类操作数据库。而且，对于某些极其复杂的sql，用Model 已经很难完成，需要开发者自己手写sql语句，使用 DB 类去执行原生sql。\r\nlaravel中的DB类为我们提供了两个形式来操作数据库：\r\n—— 原生sql语句操作数据库\r\n—— 构建器操作数据库\r\n#### 原生sql语句操作数据库\r\n```php\r\n// DbtestController.php\r\n<?php\r\nnamespace App\\Http\\Controllers\\Test;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\n\r\n// 引入DB类(config/app.php中aliases数组有DB类的别名)\r\nuse DB;\r\nclass DbtestController extends Controller\r\n{	\r\n  	private $tablename = \'user\';\r\n  	// 插入数据\r\n    public function add() {\r\n        $tablename = \'user\';\r\n        $sql = \"insert into {$tablename} (username,email) values (:username,:email)\";\r\n        $ret = DB::insert($sql,[\':username\'=>\'andy\',\':email\'=>\'xxx@qq.com\']); // 返回ture或false\r\n        if($ret) {\r\n            return \'添加成功\';\r\n        } else {\r\n            return \'添加失败\';\r\n        }\r\n    }  \r\n  	// 修改数据\r\n    public function update() {\r\n        $sql = \"update {$this->table} set username=:username where id=:id\";\r\n        $ret = DB::update($sql,[\':username\'=>\'jack\',\':id\'=>1]); // 返回ture或false\r\n    }\r\n  	// 删除数据\r\n    public function delete() {\r\n        $sql = \"delete from {$this->table} where id=:id\";\r\n        $ret = DB::delete($delete,[\':id\'=>1]); // 返回ture或false\r\n    }\r\n  	// 查询数据\r\n    public function select() {\r\n        // $sql = \"select * from {$this->table}\"; // 查询所有\r\n        $sql = \"select from {$this->table} where id=:id\";\r\n        $data = DB::select($sql);\r\n        // 把数据传给视图\r\n        return view(\'test\',compact(\'data\'));\r\n    }\r\n}\r\n```\r\n```php\r\n<!-- test.blade.php -->\r\n<table>\r\n  <tr>\r\n    <th>ID</th>\r\n    <th>姓名</th>\r\n    <th>邮箱</th>\r\n  </tr>\r\n  <!-- 从数据库中得到的数据对象$data -->\r\n  @forelse($data as $key=>$item)\r\n    <tr>\r\n      <td>{ { $item->id } }</td>\r\n      <td>{ { $item->username } }</td>\r\n      <td>{ { $item->email } }</td>\r\n    </tr>\r\n  @empty\r\n    <tr>\r\n      <td colspan=\"3\">没有数据</td>\r\n    </tr>\r\n  @endforesle\r\n</table>\r\n```\r\n#### DB构建器操作数据库\r\n官网: https://laravel-china.org/docs/laravel/5.7/queries/2289\r\nLaravel 的**数据库查询构造器**提供了一个方便、流畅的接口，用来创建及运行数据库查询语句。它能用来执行应用程序中的大部分数据库操作，且能在所有被支持的数据库系统中使用。Laravel 的查询构造器使用 PDO 参数绑定，来保护你的应用程序免受** SQL 注入**的攻击。\r\n##### 查询数据 get()\r\n```php\r\n$data = DB::table(\'user\')->get(); // 查询所有字段,所有记录\r\n$data = DB::table(\'user\')->select(\'username\',\'email as user_email\')->get(); // 查询指定字段\r\n$data = DB::table(\'user\')->first(); // 查询所有字段,一条记录\r\n$username = DB::table(\'user\')->where(\'id\',5)->value(\'username\'); // 获取某一个具体值\r\n$data = DB::table(\'user\')->get([\'username\']); // 获取指定列数据\r\n$data = DB::table(\'user\')->pluck(\'username\',\'id\'); // 获取一列数据(参数1：数组值；参数2：数组键)\r\n$data = DB::table(\'user\')->orderBy(\'id\',\'desc\')->get(); // 排序\r\n$data = DB::table(\'user\')->count(); // 条数\r\n```\r\n###### DB类分页\r\n```php\r\n$data = DB::table(\'user\')->orderBy(\'id\',\'desc\')->offset(0)->limit(20)->get(); // 服务器分页\r\n```\r\n```php\r\n<?php\r\nnamespace App\\Http\\Controllers\\Test;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\n// 引入DB类(config/app.php中aliases数组有DB类的别名)\r\nuse DB;\r\n\r\nclass DbtestController extends Controller\r\n{\r\n    // 查询构建器\r\n    public function select() {\r\n        // table不需要加表前缀（如果有的话）\r\n        $data = DB::table(\'user\')->get(); // 查询所有字段，所有记录\r\n        // 查询指定字段\r\n        $data = DB::table(\'user\')->get([\'username\',\'email\']);\r\n        // 查询id等于5的记录\r\n        $data = DB::table(\'user\')->where(\'id\',\'=\',5)->get();\r\n      	$data = DB::table(\'user\')->where(\'id\',5)->get(); // 省略等号\r\n        // 查询id大于等于5的记录\r\n        $data = DB::table(\'user\')->where(\'id\',\'>=\',5)->get(); \r\n        // id大于2 且 email为aa\r\n        $data = DB::table(\'user\')->where(\'id\',\'>\',2)->where(\'email\',\'aa\')->get();\r\n        // id大于2 且 email为aa(内嵌)\r\n        $data = DB::table(\'user\')->where(function($query) { // 内嵌\r\n            $query->where(\'id\',\'>\',2)->where(\'email\',\'aa\'); // 且\r\n        })->get();\r\n        // id大于2 或 email为bb\r\n        $data = DB::table(\'user\')->where(\'id\',\'>\',2)->orwhere(\'email\',\'bb\')->get();\r\n        // id大于2 且 email为aa 或 email为bb\r\n        $data = DB::table(\'user\')->where(function($query) { // 内嵌一个且\r\n            $query->where(\'id\',\'>\',2)->where(\'email\',\'aa\'); \r\n        })->orwhere(\'email\',\'bb\')->get(); // 连上一个或\r\n        // 把数据传给视图\r\n        return view(\'test\',compact(\'data\'));\r\n    }\r\n}\r\n```\r\n##### 插入数据 insert($arr)\r\n```php\r\ninsert()        可以同时添加一条或多条，返回值是布尔类型。\r\ninsertGetId()   只能添加一条数据，返回自增的id。\r\n```\r\n```php\r\n// 添加一条记录\r\n$bool = DB::table(\'member\')->insert([\'name\' => \'张三丰\',\'age\' => 50,\'email\' => \'ee@ee.com\']);\r\n// 添加多条记录\r\n$id = DB::table(\'member\')->insert([\r\n[\'name\'=>\'AAAA\',\'age\'=>20,\'email\'=>\'111@111.com\'],\r\n[\'name\'=>\'BBBB\',\'age\'=>30,\'email\'=>\'222@222.com\']\r\n]);\r\n// 添加数据并得到插入时的ID值\r\n$ret = DB::table(\'member\')->insertGetId([\'name\' => \'小华\',\'age\' => 60,\'email\' => \'ff@ff.com\']);\r\n```\r\n##### 修改数据 update($arr)\r\n```php\r\n$bool = DB::table(\'member\')->where(\'id\', 2)->update([\'name\' => \'修改一下\',\'age\'  => 50]);\r\n```\r\n##### 删除数据 delete()\r\n```php\r\n$bool = DB::table(\'member\')->where(\'id\',2)->delete();\r\n```',2,100,'2019-02-19 10:42:06','2019-02-19 12:25:18'),(17,'## 模型 Model（操作数据库）',2,100,'2019-02-19 12:47:12','2019-02-19 12:47:12'),(18,'### 创建模型\r\n```php\r\nphp artisan make:model 模型文件名\r\n// 分目录的\r\nphp artisan make:model Models/Video\r\n```\r\n### 模型基本设置\r\n#### 指定表名\r\n模型文件名（Video.php）与模型类名（class Video）是一致的\r\n模型所对应的【默认表名】是在模型类名（Video）后面加“s”，即默认表名是 videos  (注意：大写变成了小写)\r\n如果数据库中的表名没有加“s“，那么操作的时候就会报错（表名不存在）。\r\n解决方法：指定表名（注意不用写表前缀，如果有的话）\r\n```php\r\n// /app/Models/Video.php\r\n<?php\r\nnamespace App\\Models;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Video extends Model\r\n{\r\n  	protected $table = \'video\'; // 指定表名(注意不用写表前缀，如果有的话)\r\n    protected $guarded = [];\r\n    public $timestamps = false;\r\n\r\n    public function comments() {\r\n        return $this->hasMany(Comment::class,\'vid\');\r\n    }\r\n}\r\n```\r\n```php\r\n// App\\Http\\Controllers\\Api\\VideoController.php\r\n<?php\r\nnamespace App\\Http\\Controllers\\Api;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\n// 引入Video模型类\r\nuse App\\Models\\Video;\r\n\r\nclass VideoController extends Controller\r\n{\r\n  public function list() {\r\n    // 获取数据表video的全部数据\r\n    $data = Video::all();\r\n  }\r\n}\r\n```\r\n#### 指定主键名\r\nlaravel中默认的主键ID名为id，如果你创建的表字段中主键ID的名称不为id，则需要通过 $primaryKey 来指定一下。\r\n```php\r\n// 指定主键的名称\r\nprotected $primaryKey = \'mid\';\r\n```\r\n#### 禁用 时间戳 自动维护\r\n默认情况下，模型操作会认为你的数据库表有 created_at  和 updated_at 字段。如果你不希望让模型来自动维护这两个字段，可在模型内将 $timestamps 属性设置为 false。\r\n```php\r\n// 时间戳   这里一定要注意它是用的 public\r\npublic $timestamps = false;\r\n```\r\n#### 批量赋值 $fillable $guarded\r\n官网：https://laravel-china.org/docs/laravel/5.4/eloquent/1264#c7d398\r\n当通过**create**方法来保存数据的时候，你需要先在你的模型上定义$fillable或 $guarded属性。有$fillable不要有$guarded， 两者只能存在一个。\r\n为了安全，最好设置 $guarded 黑名单数组，阻止不必要字段的赋值。\r\n```php\r\n// 批量赋值\r\n//【白名单】，可以被（批量）赋值的属性(或字段)\r\nprotected $fillable = [‘first_name‘, ‘last_name‘, ‘email‘];\r\n//【黑名单】，不可被（批量）赋值的属性（或字段）。\r\nprotected $guarded = [‘id‘, ‘password‘];\r\n// 让所有属性(字段)都可以被（批量）赋值\r\nprotected $guarded = [];\r\n```',2,100,'2019-02-19 12:56:24','2019-02-19 12:56:58'),(19,'### 模型CRUD\r\n#### 添加数据 insert() save() create()\r\n`insert()` 插入数据时，不会自动填充ceated_at字段的数据，但是create()添加数据时，会自动填充 ceated_at 字段的数据。\r\n`insert()` 不必设置$fillable 或 $guarded\r\n```php\r\nModel::insert($arr);\r\n```\r\n`save()` 通过模型**对象属性**的方式，添加数据。（一个模型对象，相当于一个条记录）\r\n```php\r\npulic funtion add() {\r\n  // 创建模型对象\r\n  $userModelObj = new User();\r\n  // 给对象属性赋值(属性=字段)\r\n  $userModelObj->userName = \'andy\';\r\n  $userModelObj->email = \'aaa@qq.com\';\r\n  $userModelObj->age = 19;\r\n  // 添加数据到数据表\r\n  $bool = $userModelObj->save(); // 返回 true 或 false\r\n  // 得到添加用户记录的uid\r\n  dump($userModelObj->uid);\r\n}\r\n```\r\n通过模型的静态方法 `create()` 来添加数据（批量赋值），create()的参数是数组；且create()方法必须设置$fillable 或 $guarded，否则会报错。\r\n`insert()` 插入数据时，不会自动填充ceated_at字段的数据，但是 create() 添加数据时，会自动填充ceated_at字段的数据。\r\n```php\r\n// 模型\r\nprotected $guarded = []; // 不拒绝任何字段(create()方法时生效)\r\n```\r\n```php\r\n// 控制器\r\npulic funtion add() {\r\n  $arr = [\r\n    \'username\' => \'andy\',\r\n    \'email\' => \'aaa@qq.com\',\r\n    \'age\' => 19\r\n  ];\r\n  // 向数据库批量添加数据\r\n  $bool = User::create($arr); \r\n}\r\n```\r\n#### 修改数据 save() update()\r\n通过 `save()` 方法，对模型对象属性进行修改保存。\r\n```php\r\npulic funtion edit() {\r\n  // 创建主键为1的模型对象(注意：必须有条件)\r\n  $userModelObj = User::find(1);\r\n  // 给对象属性赋值(属性=字段)\r\n  $userModelObj->userName = \'改下名字\';\r\n  $userModelObj->email = \'aaa@qq.com\';\r\n  $userModelObj->age = 19;\r\n  // 保存\r\n  $bool = $userModelObj->save(); // 返回 true 或 false\r\n}\r\n```\r\n通过 `update()` 传递数组的形式更新数据\r\n```php\r\npulic funtion edit() {\r\n  // 创建主键为1的模型对象(注意：必须有条件) \r\n  $userModelObj = User::find(1);\r\n  $arr = [\r\n    \'username\' => \'andy\',\r\n    \'email\' => \'aaa@qq.com\',\r\n    \'age\' => 19\r\n  ];\r\n  // 更新\r\n  $bool = $userModelObj->update($arr);\r\n}\r\n```\r\n#### 查询数据 first() all() get()\r\n```php\r\n// 查询一条数据\r\n$data = User::where(\'uid\',1)->first();\r\n// 查询多条数据\r\n$data = User::all(); // all()前面不能加条件\r\n$data = User::where(\'uid\',\'>=\',100)->get(); // 推荐\r\n$data = Auth::where(\'id\',\'!=\',\'0\')->whereIn(\'id\',[\'1\'，\'2\'，\'3\'])->get(); // 查询一组指定id的记录\r\n// 查询指定列\r\n$data = User::select(\'id\',\'username\') -> get();\r\n// 查询一个值(即指定行列的值)\r\n$username = User::where(\'uid\',7)->value(\'userName\'); \r\n// 查询列\r\n$usernameArr = User::pluck(\'userName\');\r\n// 排序\r\n$dataArr = User::orderBy(\'uid\',\'desc\')->get()->toArray();\r\n```\r\n#### 删除数据  delete()\r\n注意：在laravel里面如果要删除数据，必须先根据条件查询出对应的记录，返回一个对象，然后调用对象的delete方法即可。\r\n```php\r\n// 一定是有条件的删除\r\n$modelObj = User::find(1);\r\n$bool = $modelObj->delete();\r\n```',2,100,'2019-02-19 13:08:17','2019-02-19 13:10:48'),(20,'### 模型关联\r\n官网：https://laravel-china.org/docs/laravel/5.7/eloquent-relationships/2295\r\n#### 一对一关联\r\n一对一【关联】语法：**hasOne**\r\n```\r\n$this->hasOne(关联model，[关联model的联系键]，[本model的联系键]);\r\n```\r\n在主表模型User中：定义**关联模型**\r\n```php\r\n// 主表模型：需定义一个关联方法，返回一个关联模型\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    // 获取与用户关联的电话号码记录：1用户→1电话\r\n    public function phone(){\r\n      // Eloquent会基于模型名决定外键名称，此次假设Phone模型有一个user_id外键，并关联父级User表的id\r\n      return $this->hasOne(\'App\\Phone\'); \r\n      // 也可以指定外键，颠覆默认的模型名外键\r\n      return $this->hasOne(\'App\\Phone\', \'foreign_key\');\r\n      // 除了自定关联表的外键，还可以指定本表的关联键(颠覆默认的id) \r\n      return $this->hasOne(\'App\\Phone\', \'foreign_key\', \'local_key\');\r\n    }\r\n}\r\n```\r\n```php\r\n// 控制器或模板中使用关联模型\r\n$phone = User::find(1)->phone->phoneNum; //  User::find(1)->phone 动态属性返回的是 Eloquent：集合\r\n$phoneinfo = User::find(1)->phone()->first()->phoneNum; // User::find(1)->phone() 返回的是数据库请求构建器\r\n```\r\n#### 一对一【反向关联】 belongsTo\r\n```php\r\n// 1电话→1用户 (foreign_key默认为Phone模型的外键user_id; other_key默认为User模型的id)\r\nreturn $this->belongsTo(\'App\\User\', \'foreign_key\', \'other_key\');\r\n\r\n// 简略写法：Eloquent 会尝试匹配 Phone 模型上的 user_id 至 User 模型上的 id \r\nreturn $this->belongsTo(\'App\\User\');\r\n```\r\n在从表模型Phone中：定义**反向关联模**\r\n```php\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Phone extends Model\r\n{\r\n    // 获得拥有此电话的用户     \r\n    public function user()\r\n    {\r\n        return $this->belongsTo(\'App\\User\');\r\n    }\r\n}\r\n```\r\n```php\r\n// 控制器或模板中使用关联模型\r\n$username = Phone::find(1)->user->username; // Phone::find(1)->user 动态属性返回的是 Eloquent：集合\r\n$userinfo = Phone::find(1)->user()->first()->username; // Phone::find(1)->user() 返回的是数据库请求构建器\r\n```\r\n#### 一对多关联 hasMany\r\n一对多【关联】语法：**hasMany**\r\n```php\r\n$this->hasMany(关联model，[关联model的联系键 foreign_key]，[本model的联系键 local_key]);\r\n```\r\n在主表模型Post(博客)中：定义**关联模型**\r\n```php\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Post extends Model\r\n{\r\n	// 获取博客文章的评论：1篇博客→多个评论\r\n    public function comments(){\r\n      return $this->hasMany(\'App\\Comment\'); // 默认外键为：post_id；本地键为：id\r\n      return $this->hasMany(\'App\\Comment\', \'foreign_key\', \'local_key\');\r\n    }\r\n}\r\n```\r\n```php\r\n// 在控制器或模板中使用关联模型\r\n$comments = App\\Post::find(1)->comments;  // 动态属性返回的是 Eloquent：集合\r\nforeach ($comments as $comment) {//...}\r\n  \r\n$comment = App\\Post::find(1)->comments()->where(\'title\', \'foo\')->first(); // 返回的是数据库请求构建器\r\n```\r\n#### 一对多【反向关联】 belongsTo\r\n```php\r\nreturn $this->belongsTo(\'App\\Post\');\r\nreturn $this->belongsTo(\'App\\Post\', \'foreign_key\', \'other_key\');\r\n```\r\n在评论表Comment中定义：**反向关联模型**\r\n```php\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Comment extends Model\r\n{\r\n	// 获取此评论所属文章\r\n    public function post(){\r\n      // 尝试用 Comment 模型的 post_id 与 Post 模型的 id 进行匹配\r\n      return $this->belongsTo(\'App\\Post\');\r\n      // 也可自己制定\r\n      return $this->belongsTo(\'App\\Post\', \'foreign_key\', \'other_key\');\r\n    }\r\n}\r\n```\r\n```php\r\n// 在控制器中使用反向关联模型\r\n$comment = App\\Comment::find(1);\r\necho $comment->post->title;\r\necho $comment->post()->first()->title;\r\n```\r\n#### 辩证混用关系 多对一\r\n多对一时：可以用 hasOne() 也可以用 belongsTo()\r\n```php\r\n// 专业表模型\r\nclass Profession extends Model {\r\n    protected $table = \'profession\';\r\n    // 关联专业分类表\r\n    public function rel_protype() {\r\n      	// 用【一对一】关系进行关联：一个专业有一个分类\r\n        // return $this -> hasOne(\'App\\Models\\Protype\',\'id\',\'protype_id\');\r\n        // 或者用【反向一对多】关系进行关系：多个专业属于一个分类(一个分类有多个专业)\r\n        return $this -> belongsTo(\'App\\Models\\Protype\',\'protype_id\',\'id\');\r\n    }\r\n}\r\n```\r\n```php\r\necho $profession -> rel_protype -> protype_name;\r\n```\r\n#### 多对多关联 belongsToMany\r\n多对多关联语法\r\n```php\r\n$this-> belongsToMany(关联表model，中间表表名，中间表中本model的关联ID，中间表中关联model的关联ID);\r\n```\r\n在User表模型中：【关联】Role表模型\r\n```php\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n	// 用户的角色\r\n    public function roles(){\r\n      // 默认中间表：roel_user(按字母顺序)；中间表中默认关联字段：user_id、role_id\r\n      return $this->belongsToMany(\'App\\Role\'); \r\n      // 也可以指定：中间表、关联字段等\r\n      return $this->belongsToMany(\'App\\Role\', \'zhiding_role_user\', \'user_id\', \'role_id\');\r\n    }\r\n}\r\n```\r\n```php\r\n// 在控制器中使用关联模型\r\n$user = App\\User::find(1);\r\nforeach ($user->roles as $role) {} // 通过属性获得\r\n$roles = App\\User::find(1)->roles()->orderBy(\'name\')->get(); // 通过方法获得\r\n```\r\n#### 多对多关联【反向关联】\r\n在Role表模型中：【反向关联】User表模型\r\n```php\r\n<?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Role extends Model\r\n{\r\n	// 拥有此角色的用户\r\n    public function users(){\r\n        return $this->belongsToMany(\'App\\User\');\r\n    }\r\n}\r\n```',2,100,'2019-02-19 13:31:10','2019-11-01 08:58:07'),(21,'### 模型分页\r\n在laravel里面要完成分页是很简单的，laravel是直接调用模型的分页方法，返回对应的数据和分页信息的字符串。\r\n```php\r\n// 控制器中\r\n//【标准分页】 分页的页码数\r\n$data = Model::paginate(每页页数); // 返回数据和分页信息\r\n//【简单分页】 只有上一页和下一页\r\nModel::simplePaginate(每页页数); // 返回数据和分页信息\r\n// 模板\r\n{ { $data->links() } } // 分页信息\r\n```\r\n```php\r\n// 控制器中\r\n$data = User::paginate(env(\'PAGESIZE\'));  // 标准分页\r\n$data = User::simplePaginate(evn(\'PAGESIZE\')); // 简单分页\r\nreturn view(\'viewpage\',compact(\'data\'));\r\n```\r\n```php\r\n<!-- viewpage.blade.php中 -->\r\n<table>\r\n  <tr>\r\n    <th>ID</th>\r\n    <th>姓名</th>\r\n    <th>邮箱</th>\r\n  </tr>\r\n  <!-- 从数据库中得到的数据对象$data -->\r\n  @forelse($data as $item)\r\n    <tr>\r\n      <td>{ { $item->id } }</td>\r\n      <td>{ { $item->username } }</td>\r\n      <td>{ { $item->email } }</td>\r\n    </tr>\r\n  @empty\r\n    <tr>\r\n      <td cospan=\"3\">没有数据</td>\r\n    </tr>\r\n  @endforesle\r\n</table>\r\n<div>\r\n  <!-- 分页信息 -->\r\n  { { $data->links() } }\r\n  <!-- {!! $data->render() !!} -->\r\n</div>\r\n```',2,100,'2019-02-19 13:40:05','2019-02-19 13:40:49'),(22,'## 数据有效性验证（服务端）\r\n在线文档：http://laravelacademy.org/post/6768.html#toc_4\r\n后端在控制器中用 `$this->validate` 验证数据有效性\r\n—— 后端$this->validate()数据验证时，若有错误（验证不通过)，后端会重定向到上一个位置(通常是前台网页)，并且，所有验证错误信息会自动一次性存放到 Session中\r\n```php\r\npublic function check(Request $request)\r\n{\r\n    //开始自动验证\r\n    $this -> validate($request,[\r\n      //验证规则\r\n      \'username\' => \'required|min:3|max:20|\',\r\n      \'password\' => \'required|min:6|confirmed\',\r\n      \'password_confirmation\' => \'require d\',\r\n      \'captcha\' => \'required|size:5|captcha\'\r\n    ],[\r\n      //针对没有翻译的自定义错误,手动翻译成中文\r\n      \'captcha.captcha\' => \'验证码错误！\',\r\n      // 自定义错误提示信息\r\n      \'password.required\' => \'密码不能为空\',\r\n      \'password.confirmed\' => \'两次密码不一致\',\r\n      \'password_confirmation.required\' => \'确认密码不能为空\' \r\n    ]);\r\n}\r\n```\r\n—— 前端显示错误信息（后端验证不通过时，错误消息通过$errors传递到前端）\r\n```php\r\n// 在js中处理错误信息\r\n<script type=\"text/javascript\">\r\n    @if(count($errors)>0)\r\n    	var err = \'\';\r\n        @foreach($errors->all() as $error) // all() 获取所有错误\r\n            err += \'{ {$error} }<br/>\';\r\n        @endforeach\r\n        layer.alert(err,{title:\'错误提示\'});\r\n    @endif\r\n</script>\r\n```\r\n```php\r\n<!-- 在模板中处理错误信息 -->\r\n<!-- 错误信息列表 -->\r\n<div>\r\n  @if(count($errors)>0)\r\n    <ul>\r\n      @foreach($errors->all() as $error)\r\n      	<li>{ { $error } }</li>\r\n      @endforeach\r\n  	</ul>	\r\n  @endif\r\n</div>\r\n<form>\r\n  <lable>账号：</lable>\r\n  <input type=\"text\" name=\"username\">\r\n  <!-- 显示指定字段的错误 -->\r\n  @if($errors->has(\'username\'))\r\n  	<span>{ { $errors->first(\'username\') } }</span>\r\n  @endif\r\n</form>\r\n```\r\n验证字段的翻译\r\n—— 如果验证的字段在默认的语言包中不存在，则自己手动修改去添加。不过一般在 `validate()` 的第二个参数就直接翻译了，而不去修改翻译文件。\r\n```php\r\n/ 在resources/lang/cn/validaton.php中设置验证字段\r\n\'attibutes\' => [\r\n  \'password\' => \'密码\'，\r\n  \'password_confirmation\' => \'确认密码\'，\r\n  // 自定义添加的字段\r\n  \'pwd\' => \'密码\',\r\n  \'pwd_confirmation\' => \'确认密码\'\r\n]\r\n```',2,100,'2019-02-20 02:50:26','2019-02-20 02:50:26'),(23,'## 数据迁移与填充\r\n### 迁移文件（建表）\r\n创建迁移文件（创建表），迁移文件对数据表进行创建和修改。\r\n```php\r\n// 创建数据表，表名称为：magager\r\nphp artisan make:migration create_manager_table\r\n```\r\n在迁移文件中 设计表\r\n—— notnull()是默认值，可以不写\r\n—— 数据类型参考：http://laravelacademy.org/post/6964.html\r\n```php\r\nclass CreateManagerTable extends Migration\r\n{\r\n  	// 生成表\r\n    public function up()\r\n    {\r\n        Schema::create(\'manager\',function (Blueprint $table){\r\n            $table -> engine = \'InnoDB\';\r\n            $table -> increments(\'id\');\r\n            $table -> string(\'username\',20) -> notnull() -> comment(\'用户名\');\r\n            $table -> string(\'password\',255) -> notnull() -> comment(\'密码\');\r\n            $table -> enum(\'gender\',[\'男\',\'女\',\'保密\']) -> notnull() ->default(\'男\') -> comment(\'性别\');\r\n            $table -> char(\'mobile\',11) -> nullable() -> comment(\'手机号\');\r\n            $table -> string(\'email\',40) -> nullable() -> comment(\'邮箱地址\');\r\n            $table -> tinyInteger(\'role_id\') -> nullable() ->comment(\'角色id\');\r\n            $table -> timestamps(); // Laravel会自动创建2个日期字段：created_at、updated_at\r\n            $table -> rememberToken();\r\n            $table -> enum(\'status\',[\'1\',\'2\']) -> notnull() ->default(\'2\') -> comment(\'状态：1=禁用，2=启用\');\r\n        });\r\n    }\r\n  	// 删除表\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists(\'manager\');\r\n    }\r\n}\r\n```\r\n执行迁移文件\r\n第1次执行时，先执行如下命令，用以生存 `migrations` 表，此表是用来记录迁移文件执行日志的表，回滚时用到。\r\n```php\r\nphp  artisan  migrate:install\r\n```\r\n执行迁移命令（执行 up() 方法）\r\n```php\r\nphp  artisan  migrate\r\n```\r\n迁移回滚（删除表）\r\n—— 回滚最后一次的迁移操作, 执行 down() 方法，方法中可以删除【数据表】，也可以修改表字段，但迁移日志 migrations 表依旧存在，方便后期继续迁移（创建数据表）。\r\n```php\r\n// 直接执行了迁移文件中的 down方法\r\nphp artisan migrate:rollback\r\n```\r\n删除表后再建表（重置表）\r\n// 先执行所有的迁移文件的down方法（删除表），再执行所有的迁移文件的up方法(创建表)\r\nphp artisan  migrate:refresh\r\n\r\n#### 添加表字段\r\n1.创建迁移文件\r\n```\r\nphp artisan make:migration add_is_amdin_to_users --table=users\r\n```\r\n2.编辑迁移文件\r\n```\r\nclass AddIsAmdinToUsers extends Migration\r\n{\r\n\r\n    public function up()\r\n    {\r\n        Schema::table(\'users\', function (Blueprint $table) {\r\n            $table->boolean(\'is_admin\')->default(false);\r\n        });\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        Schema::table(\'users\', function (Blueprint $table) {\r\n            $table->dropColumn(\'is_admin\');\r\n        });\r\n    }\r\n}\r\n```\r\n3.执行迁移\r\n```\r\nphp artisan migrate\r\n```\r\n\r\n### 填充文件\r\n创建填充文件\r\n—— 填充文件是一个类文件，在/database/seeds目录下，一般约定为数据表名后加上TableSeeder ，需要注意的是，文件名与类名相同，否则无法自动加载类。\r\n```php\r\n/ 填充文件命名规则：[tablename][TableSeeder]\r\nphp  artisan  make:seeder  ManagerTableSeeder \r\n// 生成：会生成/database/seeds/ManagerTableSeeder.php\r\n```\r\n编写填充文件\r\n需先安装与使用faker插件 https://packagist.org/packages/fzaninotto/faker\r\n不过Laravel已经自带了faker插件了\r\n若没有使用faker本地化，会导致faker生成的数据，如电话号码默认为美国的电话，本地化在create()方法中加\"zn_CN\"参数就可以了\r\n```php\r\nclass ManagerTableSeeder extends Seeder\r\n{\r\n    public function run()\r\n    {\r\n        $faker = \\Faker\\Factory::create(\'zh_CN\');\r\n        $data = [];\r\n        for($i=0;$i<100;$i++){\r\n            $data[] = [\r\n                \'username\' => $faker -> username,\r\n                \'password\' => bcrypt(\'123456\'),\r\n                \'gender\'   => rand(1,3),\r\n                \'email\'    => $faker -> email,\r\n                \'role_id\'  => rand(1,6),\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'status\'   => rand(1,2),\r\n                \'mobile\'   => $faker -> phoneNumber\r\n            ];\r\n        }\r\n        DB::table(\'manager\') -> insert($data);\r\n    }\r\n}\r\n```\r\n#### 执行填充文件（生成数据）\r\n```php\r\nphp  artisan  db:seed  --class=ManagerTableSeeder\r\n```\r\n#### 重置数据与填充数据\r\n```\r\nphp artisan migrate:refresh // 重置数据库\r\nphp artisan db:seed // 执行数据填充\r\n\r\nphp artisan db:seed --class=UsersTableSeeder // 单独指定填充文件，进行数据填充\r\nphp artisan migrate:refresh --seed // 重置与填充一起来\r\n```',2,100,'2019-02-20 03:17:38','2020-01-02 12:21:45'),(24,'## Session处理\r\n### session介绍\r\n由于 HTTP 是无状态的，Session 提供了一种在多个请求之间存储有关用户信息的方法。\r\nlaravel给我们提供了操作session的相关类来方便我们的使用。\r\nlaravel中的session默认存到session文件的目录：\\storage\\framework\\sessions\r\n### session的操作\r\n操作session的方法在laravel中有好几种方案，有类来操作也有利用辅助函数来操作。\r\n#### 写入session\r\n```php\r\n// 引入Session类\r\nUse Session;\r\nclass SessionContoller extends Controller {\r\n  public function set() {\r\n    // 设置session，类操作\r\n    Session::put(\'name\',\'andy\');\r\n  	// 设置session，辅助函数操作，【推荐】\r\n    session([\'name\'=>\'andy\']);\r\n  }\r\n}\r\n// 写入session后，在服务器端\\storage\\framework\\sessions目录下，会生成session文件\r\n```\r\n#### 闪存session(flash)\r\n使用这个方法保存 session，只能将数据保留到下个 HTTP 请求，然后就会被自动删除。\r\n```php\r\n// 方法一\r\nSession::flash(\'msg\',\'你好世界\');\r\nvar_dump(session(\'msg\')); // 下一次http请求时会有；再下一次就没有\r\n// 方法二\r\nsession()->flash(\'msg\',\'你好世界\');\r\nvar_dump(session(\'msg\')); // 下一次http请求时会有；再下一次就没有\r\n```\r\n#### 读取session（get）\r\n```php\r\n// 读取session\r\n// 方法一 Session类操作\r\ndump(Session::get(\'session名称\',[默认值]));\r\n// 方法二 辅助函数操作\r\ndump(session(\'session名称\'));\r\ndump(session()->get(\'session名称\'));\r\n\r\n// 读取全部的session\r\nvar_dump(Session::all());\r\nvar_dump(session()->all());\r\n```\r\n#### 检查/删除session\r\n判断某个 Session 值是否存在\r\n```php\r\n/ 方法一\r\nvar_dump(Session::has(\'session名称\'));\r\n// 方法二\r\nvar_dump(session()->has(\'session名称\'));\r\n```\r\n删除session\r\n```php\r\n// 删除某个Session\r\n// 方法一\r\nSession::forget(\'session名称\');\r\nif (!Session::has(\'session名称\')){\r\necho \'name1：已被删除掉<hr>\';\r\n}\r\n// 方法二\r\nsession()->forget(\'session名称\');\r\nif (!session()->has(\'session名称\')){\r\n   echo \'name2：已被删除掉<hr>\';\r\n}\r\n\r\n-------------------------------------------------\r\n\r\n// 删除全部的session数据\r\n// 方法一\r\nSession::flush();\r\n// 方法二\r\nsession()->flush();\r\n```',2,100,'2019-02-20 03:21:20','2019-02-20 04:10:10'),(25,'## 中间件\r\n中间件作为请求和响应之间的中间人。它是一种过滤机制类型。例如，Laravel包括一个中间件用来验证应用程序的用户认证与否。如果用户通过验证，它将被重定向到主页，否则将被重定向到登录页面。\r\n中间件可以通过执行以下命令来创建，所有的中间件都位于 app/Http/Middleware 目录。\r\n中间件流程：`用户请求` →  `路由` → `中间件` → `控制器方法`\r\n```\r\nphp artisan make:middleware 大驼峰名称\r\n```\r\n### 创建中间件\r\n```php\r\n// 这个命令会在app/Http/Middleware目录下创建一个新的中间件类CheckLogin类\r\nphp artisan make:middleware CheckLogin\r\n```\r\nCheckLogin.php 中间件的编写\r\n```php\r\npublic function handle($request, Closure $next)\r\n{\r\n  if (!session()->has(\'admin.user\')) { // 如果用户没有登录\r\n    session()->flash(\'error\',\'请重新登录\');\r\n  	return redirect(route(\'login\')); \r\n  }\r\n  return $next($request); // 如果用户登录了，则放行\r\n}\r\n```\r\n### 注册中间件\r\n在Laravel有两种类型的中间件。即：【全局中间件】和【路由中间件】\r\n—— 【全局中间件】将在应用程序的每个HTTP请求运行。\r\n—— 【路由中间件】将被分配到一个特定的路由。\r\n中间件在 `app/Http/Kernel.php` 中注册\r\nKernel.php 文件包含三个属性：$middleware 、 $routeMiddleware 、$middlewareGroups。\r\n——  $middleware 属性用于注册【全局中间件】。\r\n——  $routeMiddleware 属性用于注册【路由中间件】，可在【单个路由】或【路由组】上。\r\n——  $middlewareGroups 属性用于注册【路由中间件】，用于【路由组】上。\r\n```php\r\nprotected $routeMiddleware = [\r\n  \'auth\' => \\App\\Http\\Middleware\\Authenticate::class,\r\n  \'auth.basic\' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\r\n  \'bindings\' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\r\n  \'cache.headers\' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\r\n  \'can\' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\r\n  \'guest\' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\r\n  \'signed\' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\r\n  \'throttle\' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\r\n  \'verified\' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\r\n  // 注册路由中间件\r\n  \'checklogin\' => \\App\\Http\\Middleware\\CheckOut::class,\r\n];\r\n```\r\n### 使用中间件\r\n```php\r\n// 用在【路由组】上\r\nRoute::group([\'prefix\'=>\'admin\',\'middleware\' => \'checklogin\'],function (){   \r\n  Route::get(\'index/welcome\',\'Admin\\IndexController@welcome\') -> name(\'welcome\');\r\n});\r\n// 用在【单个路由】上\r\nRoute::get(\'index/welcome\',\'Admin\\IndexController@welcome\') -> name(\'welcome\')->middleware(\'checklogin\');\r\n```',2,100,'2019-02-20 04:18:30','2019-02-20 04:18:30'),(26,'## 缓存操作\r\n### 缓存配置\r\nLaravel 为不同的缓存系统提供了统一的 API。\r\n【缓存配置】位于 \\config\\cache.php 。在该文件中你可以指定在应用中默认使用哪个**缓存驱动**。\r\n——  Laravel 目前支持主流的缓存后端如： Memcached 和 Redis 等，默认是使用**文件缓存**。\r\n```php\r\n// config\\cache.php中\r\n\'default\' => env(\'CACHE_DRIVER\', \'file\'), // CACHE_DRIVER没有的话，默认使用文件缓存\r\n```\r\n```php\r\n// .env.php中\r\nCACHE_DRIVER=file // 缓存驱动默认为：文件缓存\r\n```\r\n【缓存文件】文件存放于 `\\storage\\framework\\cache\\data`\r\n### 使用redis缓存\r\n启动redies服务器\r\n```php\r\n启动redies服务器\r\n```\r\n修改 .env 文件\r\n```php\r\n// .env.php中\r\nCACHE_DRIVER=redis // 缓存驱设置认为：redis\r\n```\r\n安装laravel支持的redis扩展\r\n```php\r\ncomposer require predis/predis\r\n```\r\n配置使用redis库\r\n```php\r\n\'redis\' => [\r\n  \'client\' => \'predis\',\r\n\r\n  \'default\' => [\r\n    \'host\' => env(\'REDIS_HOST\', \'127.0.0.1\'),\r\n    \'password\' => env(\'REDIS_PASSWORD\', null),\r\n    \'port\' => env(\'REDIS_PORT\', 6379),\r\n    \'database\' => env(\'REDIS_DB\', 0),\r\n  ],\r\n\r\n  \'cache\' => [\r\n    \'host\' => env(\'REDIS_HOST\', \'127.0.0.1\'),\r\n    \'password\' => env(\'REDIS_PASSWORD\', null),\r\n    \'port\' => env(\'REDIS_PORT\', 6379),\r\n    \'database\' => env(\'REDIS_CACHE_DB\', 1),\r\n  ],\r\n],\r\n```\r\n### 添加缓存\r\n```php\r\n// 记得引入Cache类\r\nuse Cache;\r\n\r\n//【添加缓存】 add()方法\r\nCache::add(\'key\', \'value\', $minutes); // 如果key不存在，添加成功；如果key存在，返回false\r\n//【设置缓存】 put()方法\r\nCache::put(\'key\', \'value\', $minutes); // 不管key值是否存，都可以设置成功\r\n// 设置永久缓存 forever()方法\r\nCache::forever(\'key\', \'value\');\r\n```\r\n### 获取/检查/删除缓存\r\n```php\r\n// 获取缓存\r\n$value = Cache::get(\'key\');\r\n$value = Cache::get(\'key\', \'key不存在时的默认值\');\r\n$value = Cache::get(\'key\', function(){}); // key【不存在】时的回调函数\r\n\r\n// 检查缓存的key是否存在：存在返回true，否则返回false\r\nCache::has(\'key\');\r\n\r\n// 删除缓存\r\n$value = Cache::pull(\'key\'); // 先获取再删除\r\nCache::forget(\'key\'); // 删除单个缓存\r\nCache::flush(); // 清除所有的缓存\r\n```\r\n```php\r\n// 获取缓存举例\r\n$nickname = Cache::get(\'nickname\', \'whoAreYou\');\r\n$nickname = Cache::get(\'nickname\', function(){\r\n  Cache::put(\'nickname\',\'设置了个默认昵称\');\r\n  return Cache::get(\'nickname\');\r\n});\r\n```\r\n### 获取缓存否则存储\r\n```php\r\n// 获取缓存，如果缓存不存在，则存储缓存\r\n$userinfo = Cache::remember(\'userinfo\',10,function(){\r\n  return \'我是小明\';  // 函数的返回值，会存储到缓存key(userinfo)中\r\n});\r\n```',2,100,'2019-02-20 04:28:42','2019-02-20 04:29:01'),(27,'## 文件上传\r\n官网：https://laravel-china.org/docs/laravel/5.4/requests/1230#364b12\r\n在laravel里面实现文件的上传是很简单的，不用引入第三方的类库，直接通过Request对象就可以获取到上传文件资源后进行保存。\r\n```php\r\n// 获取上传的文件\r\n$file = $request->file(\'文件表单名称\');\r\n// 验证文件是否存在\r\n$request->hasFile(\'文件表单名称\');\r\n// 验证文件是否上传成功\r\n$request->file(\'文件表单名称\')->isValid()\r\n// 返回上传文件的扩展名称\r\n$ext = $file->getClientOriginalExtension()\r\n// 返回上传文件的真实名称\r\n$file->getClientOriginalName()\r\n// 返回上传文件的大小\r\n$file->getClientSize()\r\n// 将文件移动到服务器指定的位置\r\n$file->move(路径,文件名)\r\n```\r\n```php\r\n// 举例：在控制器中\r\npublic function(Request $request) {\r\n  if($request->has(\'avator\')){\r\n    $file = $request->file(\'avator\'); // 获取文件\r\n    $ext = $file->getClientOriginalExtension(); // 扩展名\r\n    $filename = time().\'.\'.$ext;\r\n    // public_path 函数返回 public 目录的完整路径\r\n    // 你也可以使用 public_path 函数生成针对指定文件相对于 public 目录的完整路径：\r\n    $filepath = public_path(\'uploads\'); \r\n    // 文件上传：方法一\r\n    $ret = $file->move($filepath,$filename);\r\n    echo \"<img src=\'\\uploads\\{$filename}\'>\";\r\n    \r\n    // 文件上传：方法二 推荐\r\n    $path = $request->file(\'avatar\')->store(\'avatars\'); // 返回上传好的文件路径\r\n    return $path;\r\n  }\r\n}\r\n```\r\n`store` 方法只需指定一个目录名，而不是文件名。默认情况下，store 方法将生成唯一ID来作为文件名。此文件路径将被 store 方法返回，因此你可以在数据库中存储路径及文件名。\r\n`store` 方法允许存储文件到相对于文件系统根目录配置的路径。这个路径不能包含文件名，名称将使用 MD5 散列文件内容自动生成。\r\n## 文件存储\r\n### 文件存储简介\r\n官网：https://laravel-china.org/docs/laravel/5.7/filesystem/2281\r\nLaravel 提供了一个强大的文件系统抽象，这得益于 Frank de Jonge 强大的 Flysystem 扩展包。Laravel 文件系统集成为使用本地文件系统、Amazon S3 和 Rackspace 云存储提供了简单易用的驱动程序。更棒的是，由于每个系统的 API 保持不变，所以在这些存储选项之间切换是非常简单的。\r\n配置文件： config/filesystems.php \r\n**公共磁盘**：storage/app/public\r\n—— 公共磁盘的文件，允许浏览器访问，但是不能直接访问，而是通过【软链接】的形式访问\r\n```php\r\nphp artisan storage:link  // 创建目录软链接\r\n// The [public/storage] directory has been linked\r\n// 执行后会在网站根目录下添加一个文件夹storage目录，这个目录指向的是公共磁盘/storage/app/public\r\n```\r\n**本地磁盘**：storage/app\r\n—— 本地磁盘的文件，不能被浏览器访问到\r\n**第三方磁盘**：如Amazon S3\r\n### 文件保存方法\r\n```php\r\nStorage::disk(磁盘名) -> put(文件名，文件内容);\r\n```',2,100,'2019-02-20 04:44:41','2019-02-20 04:44:41'),(28,'## 知识块',2,100,'2019-02-20 05:03:56','2019-02-20 05:03:56'),(29,'### 用户登录认证管理\r\n#### 用户认证\r\nguard设置（config/auth.php)\r\n—— guard定规定了认证时，需要比对的数据表及该表的模型。\r\n—— 定义一个名称为”admin“的guard，这个guard的数据由manager表提供，指定manager表的模型为 “App\\Models\\Manager::class,”\r\n```php\r\n// config/auth.php\r\n\'guards\' => [     \r\n        \'admin\' => [\r\n            \'driver\' => \'session\',\r\n            \'provider\' => \'manager\',\r\n        ],        \r\n    ], \r\n\r\n\'providers\' => [       \r\n        \'manager\' => [\r\n            \'driver\' => \'eloquent\',\r\n            \'model\' => App\\Models\\Manager::class,\r\n        ],        \r\n    ],\r\n```\r\n控制器中用户认证的代码\r\n—— attemp第1个参数：关联数组，通常包含：用户名、密码、其他字段（如：有效的用户）\r\n—— attempt第2个参数：bool值，true表示记住登录状态，false不记住\r\n```php\r\nuse Auth; \r\n//获取前台表单用户名与密码，可添加其他字段，共同组成需要验证的字段的数组\r\n$data = $request -> only([\'username\',\'password\']);\r\n$data[\'status\'] = \'2\';  //2表示用户为启用的状态\r\n//Auth认证\r\nif(Auth::guard(\'admin\') -> attempt($data,$request->get(\'online\'))){\r\n	//验证成功\r\n	return redirect(route(\'dashboard\'));\r\n	}else{\r\n	//验证失败\r\n	return redirect(route(\'login\')) -> withErrors([\'error\' => \'用户名或密码错误！\']);\r\n}\r\n```\r\nguard对应表的模型Model文件中的代码\r\n```php\r\n<?php\r\nnamespace App\\Models;\r\nuse Illuminate\\Auth\\Authenticatable;//引入trait空间\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\n//实现Authenticatable\r\nclass Manager extends Model implements \\Illuminate\\Contracts\\Auth\\Authenticatable\r\n{\r\n    protected $table = \'manager\';\r\n    use Authenticatable;//使用trait\r\n}\r\n```\r\n#### 用户退出\r\n```php\r\n//清除session\r\nAuth::guard(\'admin\') -> logout();\r\n//跳转\r\nreturn redirect(route(\'login\'));\r\n```\r\n#### 路由保护\r\n就是每个路由都需要用户认证后才可访问，用中间件实现，如下：\r\n```php\r\nRoute::get(\'index/index\',\'Admin\\IndexController@index\') -> name(\'dashboard\') -> middleware(\'auth:admin\');\r\n\r\nRoute::group([\'prefix\'=>\'admin\',\'middleware\' => \'auth:admin\'],function (){\r\n   Route::get(\'index/index\',\'Admin\\IndexController@index\') -> name(\'dashboard\');\r\n   Route::get(\'index/welcome\',\'Admin\\IndexController@welcome\') -> name(\'welcome\');\r\n   Route::get(\'index/logout\',\'Admin\\IndexController@logout\') -> name(\'logout\');\r\n});\r\n```',2,100,'2019-02-20 05:11:37','2019-02-20 05:11:37'),(30,'### Datatables  无刷新分页\r\nDatatables插件是一款基于jQuery框架进行开发的无刷新分页插件，其除了分页还有排序、搜索等功能。\r\nDatatables官网：https://www.datatables.net/\r\nDatatables有2种分页方式：客户端分页、服务端分页。\r\nlaravel已经有datatables插件，使用【客户端分页方式】实现分页，步骤如下：\r\n1.在视图中，先在确保引入jQuery之后，再去引入datatables的JavaScript文件\r\n```javascript\r\n<script type=\"text/javascript\" src=\"/admin/lib/datatables/1.10.0/jquery.dataTables.min.js\"></script>\r\n```\r\n2.初始化datatables插件\r\n```javascript\r\n//jQuery页面载入事件\r\n$(document).ready( function () {\r\n	$(\'#myTable\').DataTable();   //datatables初始化，初始化后表格就有排序了\r\n});\r\n\r\n或者\r\n\r\n//jQuery页面载入事件\r\n$(function () {\r\n	$(\'#myTable\').DataTable();  //datatables初始化，初始化后表格就有排序了\r\n});\r\n```\r\n3.【可选】databtables支持一些扩展的配置\r\n```javascript\r\n//jQuery页面载入事件\r\n$(function () {    \r\n    $(\'table\').DataTable({\r\n        // \"order\":false, //禁止排序\r\n        \"columnDefs\":[{\"orderable\":false,\"targets\":0}],//禁止第1列排序\r\n        \"order\":[[1,\"desc\"]] //指定第2列排序，默认为降序排列\r\n    });\r\n});\r\n```\r\n#### 客户端分页和服务端分页比较\r\n客户端分页优缺点\r\n—— 优点：是当数据量少的时候，其速度是比较快的，其所有的操作都在客户端完成\r\n—— 缺点：是如果数据量大的话，则加载的时候会很慢。\r\n服务端分页优缺点（通过limit）\r\n—— 优点：是当数据量大的时候，由于每次都是通过limit限制输出记录，所以其速度基本不受影响\r\n—— 缺点：是如果数据量少的时候，频繁请求服务器，则服务器的压力相对较大\r\n**总结**\r\n—— 因此，在要求比较高时，可以客户端分页和服务端分页结合起来使用，客户端1次请求，服务端第1次只返回少量数据，保证了速度，但随后客户端第2次请求，服务端再才返回大量数据。这样，用户访问速度快，在用户看第一页数据时，趁这个时间又请求了大量数据，保证了前台以后分页不用请求服务了。',2,100,'2019-02-20 05:17:38','2019-02-20 05:17:38'),(31,'## 插件或模板的使用',2,100,'2019-02-20 05:20:25','2019-02-20 05:20:25'),(32,'### H-ui后台模板\r\n下载地址：http://www.h-ui.net/H-ui.admin.shtml\r\nH-ui.Admin_v3.x：默认版本，采用iframe布局，多选项卡效果\r\nH-ui.Admin.page_v3.x：是单页面，没有用到iframe，左侧菜单点击刷新页面，每次只能打开一个页面。相比iframe更简单，更方便操作。\r\n目录结构\r\n```\r\nLib目录：使用的第三方扩展库\r\nStatic目录：框架需要使用一些静态文件，如js、css、images等\r\n.html文件：视图文件\r\n```\r\n使用方法\r\n——复制“Lib目录”、“Static目录”等静态资源到Laravel项目中的public目录（或public中的admin目录，进行分录管理）\r\n——有了静态资源后，根据需要复制html视图页面就好，注意修改html页面的引用js、css的路径。',2,100,'2019-02-20 05:20:31','2019-02-20 05:20:31'),(33,'### debug插件\r\n1.下载页面 https://packagist.org/packages/barryvdh/laravel-debugbar\r\n2.在packgist下载页面中找到安装说明，安装要求\r\n```\r\n要求1：PHP>7.0\r\n要求2：For Laravel < 5.5, please use the 2.4 branch!对于laravel版本小于5.5的来说，需要跳转github安装\r\n```\r\n3.在github安装页面，查看安装命令\r\n```php\r\ncomposer require barryvdh/laravel-debugbar:~2.4\r\n```\r\n4.安装好后，配置config/app.php\r\n```\r\n1.在provider数组中添加：Barryvdh\\Debugbar\\ServiceProvider::class,\r\n2.在aliases数组中添加：\'Debugbar\' => Barryvdh\\Debugbar\\Facade::class,\r\n```\r\n5.关闭debug调试\r\n```\r\n将 providers 和 aliases 中的配置清除即可\r\n或者\r\n设置.env中的 APP_DEBUG=false\r\n```',2,100,'2019-02-20 05:24:25','2019-02-20 05:24:25'),(34,'### captcha验证码插件\r\n1.下载地址：https://packagist.org/packages/mews/captcha\r\n2.安装命令\r\n```php\r\ncomposer require mews/captcha\r\n```\r\n3.扩展要求\r\n—— 需要开启 `gd2`  `mbstring`  `fileinfo`  等php扩展。\r\n4.安装好后，修改config/app.php\r\n```\r\n1.在provider数组中添加：Mews\\Captcha\\CaptchaServiceProvider::class,\r\n2.在aliases数组中添加(注册门面)：\'Captcha\' => \'Mews\\Captcha\\Facades\\Captcha\',\r\n```\r\n5.（可选）生成验证码单独的配置文件，生成好之后，验证码的配置文件位于config/captcha.php\r\n```php\r\nphp artisan vendor:publish\r\n```\r\n6.使用：在页面中展示验证码\r\n```html\r\n<img src = \"{ { captcha_src() } }\">\r\n```\r\n7.（补充）点击“看不清”更换验证码\r\n```javascript\r\n//jQuery页面载入事件\r\n$(function(){\r\n  	var _src = $(\'img\').attr(\'src\');  //获取验证码img的src属性\r\n  	$(\'#kanbuq\').click(function(){\r\n    	$(\'img\').attr(\'src\',_src+\'&_=\'+Math.random());\r\n  	});\r\n});\r\n```\r\n8.服务端验证\r\n```php\r\npublic function check(Request $request)\r\n{\r\n    //开始自动验证\r\n    $this -> validate($request,[\r\n      //验证规则\r\n      \'username\' => \'required|min:3|max:20|\',\r\n      \'password\' => \'required|min:6|confirmed\',\r\n      \'password_confirmation\' => \'required\',\r\n      \'code\' => \'required|captcha\'\r\n    ],[\r\n      //针对没有翻译的自定义错误,手动翻译成中文\r\n      \'code.required\' => \'验证码补能为空!\',\r\n      \'code.captcha\' => \'验证码错误！\',\r\n      // 自定义错误提示信息\r\n      \'password.required\' => \'密码不能为空\',\r\n      \'password.confirmed\' => \'两次密码不一致\',\r\n      \'password_confirmation.required\' => \'确认密码不能为空\' \r\n    ]);\r\n}\r\n```',2,100,'2019-02-20 05:29:01','2019-02-20 05:29:01'),(35,'## Restful Api概念\r\n参考网址：https://www.runoob.com/w3cnote/restful-architecture.html\r\n—— 核心：面向资源\r\n—— 一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。\r\n### 1.0 资源与URI\r\n一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)\r\nURI设计原则\r\n—— 使用 `_` 或 `-` 来分割单词，让URI 可读性 更好\r\n```php\r\nhttp://www.oschina.net/news/38119/oschina-translate-reward-plan\r\n```\r\n使用 `/` 来表示资源的 层级关系\r\n```php\r\n<!-- 层级关系：某用户/某项目/某次版本提交 -->\r\nhttps://github.com/andy-love-coding/my-app/commit/4becc6807dd0a283fd05f557bd6d70ee960740bf\r\n<!-- 层级关系：2018年10月订单 -->\r\n/orders/2018/10\r\n```\r\n—— 使用` ?` 用来 过滤资源\r\n```php\r\n<!-- 表示：项目的【所有】的推入请求 -->\r\n/user/project/pulls\r\n<!-- 表示：项目中【已经关闭】的推入请求 -->\r\n/user/project/pulls?state=closed\r\n```\r\n—— 用 `,` 或 `;` 或 `…` 可以用来表示 同级关系\r\n```php\r\n<!-- 表示：两次提交记录之间的差异对比 -->\r\n/user/project/block-sha1/sha1.h/compare/e3af72cdafab5993d18fae056f87e1d675913d08;bd63e61bdf38e872d5215c07b264dcc16e4febca\r\n<!-- 或者 -->\r\n/user/project/compare/master…next\r\n```\r\n### 统一资源接口\r\nRESTful 架构应该遵循【统一接口原则】，统一接口包含了一组受限的预定义的操作（GET/POST等），不论什么样的资源，都是通过【使用相同的接口进行资源的访问】。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。\r\n如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和【幂等性】的特性，例如GET和HEAD请求都是安全的， 无论请求多少次，都不会改变服务器状态。\r\n幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。\r\nhttp状态码 参考网址：http://www.runoob.com/http/http-status-codes.html\r\n#### GET 状态码\r\n```\r\n// 安全且幂等\r\n// 获取表示\r\n// 变更时获取表示（缓存）\r\n200（OK） - 表示已在响应中发出\r\n204（No Content） - 请求收到，但返回信息为空\r\n301（Moved Permanently） - 资源的URI已被更新\r\n303（See Other） - 其他（如，负载均衡）\r\n304（not modified）- 资源未更改（缓存）\r\n400 （bad request）- 指代坏请求（如，参数错误）\r\n404 （not found）- 资源不存在\r\n406 （not acceptable）- 服务端不支持所需表示\r\n500 （internal server error）- 通用错误响应\r\n503 （Service Unavailable）- 服务端当前无法处理请求\r\n```\r\n#### POST 状态码\r\n```php\r\n// 不安全且不幂等\r\n// 使用服务端管理的（自动产生）的实例号创建资源\r\n// 创建子资源\r\n// 部分更新资源\r\n// 如果没有被修改，则不过更新资源（乐观锁）\r\n200（OK）- 如果现有资源已被更改\r\n201（created）- 如果新资源被创建\r\n202（accepted）- 已接受处理请求但尚未完成（异步处理）\r\n301（Moved Permanently）- 资源的URI被更新\r\n303（See Other）- 其他（如，负载均衡）\r\n400（bad request）- 指代坏请求\r\n404 （not found）- 资源不存在\r\n406 （not acceptable）- 服务端不支持所需表示\r\n409 （conflict）- 通用冲突\r\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\r\n415 （unsupported media type）- 接受到的表示不受支持\r\n500 （internal server error）- 通用错误响应\r\n503 （Service Unavailable）- 服务当前无法处理请求\r\n```\r\n#### PUT 状态码\r\n```php\r\n// 不安全但幂等\r\n// 用客户端管理的实例号创建一个资源\r\n// 通过替换的方式更新资源\r\n// 如果未被修改，则更新资源（乐观锁）\r\n200 （OK）- 如果已存在资源被更改\r\n201 （created）- 如果新资源被创建\r\n301（Moved Permanently）- 资源的URI已更改\r\n303 （See Other）- 其他（如，负载均衡）\r\n400 （bad request）- 指代坏请求\r\n404 （not found）- 资源不存在\r\n406 （not acceptable）- 服务端不支持所需表示\r\n409 （conflict）- 通用冲突\r\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\r\n415 （unsupported media type）- 接受到的表示不受支持\r\n500 （internal server error）- 通用错误响应\r\n503 （Service Unavailable）- 服务当前无法处理请求\r\n```\r\n#### DELETE 状态码\r\n```php\r\n// 不安全但幂等\r\n// 删除资源\r\n200 （OK）- 资源已被删除\r\n301 （Moved Permanently）- 资源的URI已更改\r\n303 （See Other）- 其他，如负载均衡\r\n400 （bad request）- 指代坏请求\r\n404 （not found）- 资源不存在\r\n409 （conflict）- 通用冲突\r\n500 （internal server error）- 通用错误响应\r\n503 （Service Unavailable）- 服务端当前无法处理请求\r\n```\r\n### 3.0 资源的表述\r\n资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式，在客户端和服务端之间传送的也是资源的表述，而不是资源本身。 例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。\r\n\r\n资源的表述包括数据和描述数据的元数据，例如，HTTP头\"Content-Type\" 就是这样一个元数据属性。\r\n\r\n客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。\r\n\r\n------------\r\n\r\n\r\n举例：请求某组织资源的json格式的表述形式\r\n```php\r\n// Request\r\nGET https://api.github.com/orgs/github HTTP/1.1\r\nAccept: application/json\r\n\r\n// Response\r\nHTTP/1.1 200 OK\r\nConten-type: application/json; charset=utf-8\r\n```\r\n\r\n------------\r\n\r\n举例：请求某组织资源的xml格式的表述形式\r\n```php\r\n// Request\r\nGET https://api.github.com/orgs/github HTTP/1.1\r\nAccept: text/xml\r\n\r\n// Response\r\nHTTP/1.1 200 OK\r\nConten-type: text/xml; charset=utf-8\r\n```\r\n一些实践上常见的设计\r\n—— 在URI里边带上版本号\r\n```\r\nhttp://api.example.com/1.0/foo\r\nhttp://api.example.com/1.2/foo\r\nhttp://api.example.com/2.0/foo\r\n```\r\n—— 如何处理不支持的表述格式：服务器不支持xml的请求所需的格式，可以进行如下处理\r\n```\r\n// Request\r\nGET https://api.github.com/orgs/github HTTP/1.1\r\nAccept: text/xml\r\n\r\n// Response\r\nHTTP/1.1 406 Not Acceptable\r\nConten-type: application/json; charset=utf-8\r\n```',3,100,'2019-02-20 13:31:44','2019-02-20 13:32:21'),(36,'## Restful Api 实例demo\r\n数据库结构\r\n```php\r\nCREATE TABLE `articles` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `user_uid` int(10) unsigned NOT NULL DEFAULT \'0\',\r\n  `body` text COMMENT \'内容\',\r\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NOT NULL DEFAULT \'0000-00-00 00:00:00\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;\r\n```\r\n路由 routes\\api.php\r\n```php\r\n<?php\r\nuse Illuminate\\Http\\Request;\r\n\r\nRoute::middleware(\'auth:api\')->get(\'/user\', function (Request $request) {\r\n    return $request->user();\r\n});\r\n\r\n// 添加文章\r\nRoute::post(\'v1/articles\', \'Api\\ArticleController@add\');\r\n\r\n// 查询所有\r\nRoute::get(\'v1/articles\', \'Api\\ArticleController@index\');\r\n\r\n// 查询指定ID的文章\r\nRoute::get(\'v1/articles/{article}\', \'Api\\ArticleController@show\')->where([\'article\' => \'\\d+\']);\r\n\r\n// 修改文章\r\nRoute::put(\'v1/articles/{article}\', \'Api\\ArticleController@edit\')->where([\'article\' => \'\\d+\']);\r\n\r\n// 删除文章\r\nRoute::delete(\'v1/articles/{article}\', \'Api\\ArticleController@del\')->where([\'article\' => \'\\d+\']);\r\n```\r\n控制器 App\\Http\\Controllers\\Api\\ArticleController.php\r\n```php\r\n<?php\r\nnamespace App\\Http\\Controllers\\Api;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse App\\Article;\r\n\r\nclass ArticleController extends Controller\r\n{\r\n    // 查询所有文章\r\n    public function index(Request $request)\r\n    {\r\n        $offset = $request->get(\'offset\', 0);\r\n        $limit = $request->get(\'limit\', 5);\r\n\r\n        $list = Article::offset($offset)->limit($limit)->get();\r\n        return response()->json([\'code\' => 0, \'data\' => [\'offset\' => $offset, \'limit\' => $limit, \'data\' => $list]], 200);\r\n    }\r\n    // 查询指定ID的文章\r\n    public function show(Request $request, Article $article)\r\n    {\r\n        return response()->json([\'code\' => 0, \'data\' => $article], 200);\r\n    }    \r\n    // 添加文章\r\n    public function add(Request $request)\r\n    {\r\n        $data = $request->all();\r\n        $model = Article::create($data);\r\n        return response()->json([\'code\' => 0, \'message\' => \'添加成功\'], 201);\r\n    }\r\n    // 修改文章\r\n    public function edit(Request $request, Article $article)\r\n    {\r\n        $article->update($request->all());\r\n        return response()->json([\'code\' => 0, \'message\' => \'修改成功\'], 200);\r\n    }      \r\n    // 删除文章\r\n    public function del(Request $request, Article $article)\r\n    {\r\n        $article->delete();\r\n        return response()->json([\'code\' => 0, \'message\' => \'删除成功\']);\r\n    }\r\n}\r\n```\r\n模型 app\\Article.php\r\n```php\r\n<?php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Article extends Model\r\n{ \r\n    protected $guarded = [];\r\n}\r\n```\r\n异常处理 app\\Exceptions\\Handler.php\r\n```php\r\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\r\npublic function render($request, Exception $exception)\r\n{\r\n  // dump($exception); // 看下是什么异常\r\n  // 如是没找到数据模型的异常，则返回对应提示（记得要引入ModelNotFoundException）\r\n  if ($exception instanceof ModelNotFoundException) {\r\n    return response()->json([\'code\' => \'1000\', \'message\' => \'没有此记录\'], 200);\r\n  }\r\n  return parent::render($request, $exception);\r\n}\r\n```\r\n调用api （假设域名为：api.com）\r\n```php\r\n<!-- 获取所有 -->\r\nGET  http://api.com/api/v1/articles   \r\n<!-- 获取指定ID的一条 -->\r\nGET  http://api.com/api/v1/articles/10\r\n<!-- 新增一条 -->\r\nPOST  http://api.com/api/v1/articles   <!-- 带上body参数 -->\r\n<!-- 修改指定ID的一条 -->\r\nPUT  http://api.com/api/v1/articles/10   <!-- 带上body参数 -->\r\n<!-- 删除指定ID的一条 -->\r\nDELETE  http://api.com/api/v1/articles/10\r\n```',3,100,'2019-02-20 13:32:36','2019-02-20 13:32:36'),(37,'## mysql 数据库备份与还原\r\n### homestead 数控库的账号与密码\r\n账号：homestead\r\n密码：secret\r\n### ubuntu系统中备份mysql\r\n[table1 table2]省略则备份所有表\r\n备份输出也可以指定路径\r\n```php\r\n$ mysqldump -uusername -p dbname [table1 table2] > BackupName.sql\r\n```\r\n### ubuntu系统中还原mysql\r\n记得要退出 mysql 登录，在操作系统中执行以下命令，可不要在mysql登录状态（即 mysql>）执行还原命令。\r\n```php\r\n$ mysql -uhomestead -p note_backup < Code/note.backup.sql;\r\n```',4,100,'2019-02-20 14:19:53','2019-03-25 15:47:43'),(38,'## 参考文档\r\n官网:https://laravel-china.org/docs/laravel/5.7\r\n项目github网址：https://github.com/andy-love-coding/laravel-edu-platform-demo\r\n### 引用的插件\r\n [webuploader](http://note.test/articles/5#%E5%BC%82%E6%AD%A5%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%20webuploader \"webloader\")\r\n[ 七牛云插件](http://note.test/articles/5#%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91 \" 七牛云插件\")\r\n[Laravel-Excel](http://note.test/articles/5#%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%A0%BC%EF%BC%88Laravel-Excel%EF%BC%89 \"Laravel-Excel\")\r\n[guzzleHttp](http://note.test/articles/5#%E7%94%A8guzzleHttp%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82 \"guzzleHttp\")\r\n[ckplayer 网页播放器插件](http://note.test/articles/5#ckplayer%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E5%99%A8%E6%8F%92%E4%BB%B6 \"ckplayer 网页播放器插件\")\r\n## 功能列表\r\n登录验证\r\n验证码\r\nDatatables 无刷新分页（客户端分页）\r\n路由保护\r\nRBAC权限管理\r\n自定义中间件\r\n区域四级联动（全球区域数据已上传至 github 项目中）https://github.com/andy-love-coding/laravel-edu-platform-demo/tree/master/db\r\n上传插件 webuploader\r\n七牛云的使用\r\nExcel表格导入导出\r\n直播管理\r\n用 guzzleHttp发送请求\r\n网页播放器 ckplayer\r\n接入支付宝',5,100,'2019-02-20 14:37:01','2019-02-21 04:42:41'),(39,'## 项目初始化\r\n1.创建laravel项目\r\n```php\r\ncomposer create-project Laravel/Laravel=5.4.* --prefer-dist ./\r\n```\r\n2.修改时区\r\n```php\r\n// config/app.php\r\n\'timezone\' => \'PRC\', // 或者：Asia/shanghai、Asia/chongqing\r\n```\r\n3.语言本地化\r\n—— 下载语言包：laravel-lang  下载地址：https://packagist.org/packages/caouecs/laravel-lang\r\n—— 安装语言包命令如下：\r\n```php\r\ncomposer require caouecs/laravel-lang:~3.0\r\n```\r\n——将语言包文件从 vendor/caouecs/laravel-lang/src/zh-CN 中复制到 resources/lang/zh-CN 目录下\r\n——修改 config/app.php 中的关于本地化的配置项：locale\r\n```php\r\nlocal => \'zh-CN\',\r\n```\r\n4.配置数据库\r\n——在 .env.php 文件中配置\r\n—— 推荐禁用mysql的严格模式，需要修改文件 config/database.php\r\n```php\r\nstrict => fasel; // 禁用mysql严格模式\r\n```\r\n5.删除系统自动非必要性文件\r\n```php\r\napp/user.php   // 删除用户模型【文件】\r\napp/Http/Controllers/Auth  // 删除Auth【目录】\r\ndatabase/migrations  // 删除migrations目录下的【全部文件】\r\ndatabase/seeds  // 删除目录下的【全部文件】\r\npublic/js  // 删除js【目录】\r\npublic/css // 删除css【目录】\r\nresources/views  // 删除views下的【全部文件】\r\n```\r\n6.（可选）安装debugbar工具条，要求php版本大于等于7.0\r\n—— 地址：https://github.com/barryvdh/laravel-debugbar/tree/2.4\r\n```php\r\ncomposer require barryvdh/laravel-debugbar:~2.4\r\n```\r\n—— 安装好之后添加config/app.php 中的 providers 和 aliases 数组的配置\r\n```php\r\n\'providers\' => [ Barryvdh\\Debugbar\\ServiceProvider::class, ],\r\n\'aliases\' => [ \'Debugbar\' => Barryvdh\\Debugbar\\Facade::class, ],\r\n```\r\n—— 关闭debugar工具条\r\n```php\r\n将 providers 和 aliases 中的配置清除即可\r\n或者\r\n设置.env中的 APP_DEBUG=false\r\n```\r\n7.配置虚拟主机访问项目（注意：网站根目录是public）',5,100,'2019-02-20 14:45:22','2019-02-20 14:45:22'),(40,'## 后台基础功能开发',5,100,'2019-02-20 14:46:38','2019-02-20 14:57:34'),(41,'### 创建管理员数据表\r\n创建迁移文件\r\n```php\r\nphp artisan make:migration create_manager_table\r\n```\r\n编写迁移文件 database/migrations/\r\n```php\r\npublic function up(){\r\n  // 创建数据表\r\n  Schema::create(\'manager\',function(Blueprint $table){\r\n    $table -> increments(\'id\'); // 自增主键\r\n    $table -> string(\'username\',20) -> notnull() -> comment(\'用户名\');\r\n    $table -> string(\'password\',255) -> notnull() -> comment(\'密码\');\r\n    $table -> enum(\'gender\',[\'男\',\'女\',\'保密\']) -> notnull() -> default(\'男\') -> comment(\'性别\');\r\n    $table -> char(\'mobile\',11) -> nullable() -> comment(\'手机号\');\r\n    $table -> string(\'email\',40) -> nullable() -> comment(\'邮箱地址\');\r\n    $table -> tinyInteger(\'role_id\') -> nullable() -> comment(\'角色id\');\r\n    $table -> timestamps(); // 会自动添加 created_at 和 updated_at 字段\r\n    $table -> rememberToken(); // 会自动添加 remmenber_token 列：VARCHAR(100) NULL\r\n    $table -> enum(\'status\',[\'1\',\'2\']) -> notnull() -> default(\'2\') -> comment(\'状态：1=禁用，2=启用\');\r\n  });\r\n}\r\n\r\npublic function down(){\r\n  // 删除数据表\r\n  Schema::dropIfExists(\'manager\');\r\n}\r\n```\r\n```sql\r\n// 对应的sql语句\r\nCREATE TABLE `manager` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'用户名\',\r\n  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'密码\',\r\n  `gender` enum(\'男\',\'女\',\'保密\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'男\' COMMENT \'性别\',\r\n  `mobile` char(11) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'手机号\',\r\n  `email` varchar(40) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'邮箱地址\',\r\n  `role_id` tinyint(4) DEFAULT NULL COMMENT \'角色id\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'状态：1=禁用，2=启用\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n执行迁移文件\r\n```php\r\nphp artisan migrate:install			//首次使用迁移先生成迁移记录表\r\nphp artisan migrate\r\n```\r\n### 模拟管理员表的数据\r\n创建填充器文件\r\n```php\r\nphp artisan make:seeder ManagerTableSeeder\r\n```\r\n编写填充器文件\r\n—— 提示：在laravel中系统提供了一个用户密码加密的函数：bcrypt，语法：bcrypt(密码文明)\r\n```php\r\npublic function run(){\r\n  // 执行数据表的填充\r\n  $faker = \\Faker\\Factory::create(\'zh_CN\'); // 生成一个faker实例(注意语言本地化)\r\n  $data = []; // 生成100条数据\r\n  for ($i = 0; $i < 100; $i++) {\r\n    $data[] = [\r\n      \'username\' => $faker -> userName,\r\n      \'password\' => bcrypt(\'123456\'),\r\n      \'gender\'    => rand(1,3),\r\n      \'mobile\'    => $faker -> phoneNumber,\r\n      \'email\'     => $faker -> email,\r\n      \'role_id\'   => rand(1,6),\r\n      \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n      \'status\'    => rand(1,2)\r\n    ];\r\n  }\r\n  // 把数据写入数据表\r\n  DB::table(\'manager\') -> insert($data);\r\n}\r\n```\r\n执行填充器文件\r\nphp artisan db:seed --class=ManagerTableSeeder',5,100,'2019-02-20 14:48:47','2019-02-20 14:57:46'),(42,'### 后台【登录】页面的展示\r\n确定路由：/admin/public/login  【平台/控制器/方法】\r\n```php\r\nRoute::get(\'admin/public/login\',\'Admin\\PublicController@login\') -> name(\'login\');\r\n```\r\n创建控制器\r\n```php\r\nphp artisan make:controller Admin/PublicController\r\n```\r\n```php\r\n// 展示登录页面\r\npublic function login() {\r\n	return view(\'admin.public.login\');\r\n}\r\n```\r\n创建视图文件\r\n—— 复制 login.html 到 resources/view/admin/public 目录下，并改名为：login.blade.php\r\n—— 第一次复制视图时，注意复制js、css等静态资源，有了静态资源后，注意修改视图文件应用css、js的路径问题。',5,100,'2019-02-20 14:59:57','2019-02-20 15:00:10'),(43,'### captcha验证码的实现\r\n1.下载地址：https://packagist.org/packages/mews/captcha\r\n2.安装命令\r\n```php\r\ncomposer require mews/captcha\r\n```\r\n3.扩展要求\r\n—— 需要开启 `gd2`  `mbstring`  `fileinfo`  等php扩展。\r\n4.安装好后，修改config/app.php\r\n```\r\n1.在provider数组中添加：Mews\\Captcha\\CaptchaServiceProvider::class,\r\n2.在aliases数组中添加(注册门面)：\'Captcha\' => \'Mews\\Captcha\\Facades\\Captcha\',\r\n```\r\n5.（可选）生成验证码单独的配置文件，生成好之后，验证码的配置文件位于config/captcha.php\r\n```php\r\nphp artisan vendor:publish\r\n```\r\n6.使用：在页面中展示验证码\r\n```html\r\n<img src = \"{ { captcha_src() } }\">\r\n```\r\n7.（补充）点击“看不清”更换验证码\r\n```javascript\r\n//jQuery页面载入事件\r\n$(function(){\r\n  	var _src = $(\'img\').attr(\'src\');  //获取验证码img的src属性\r\n  	$(\'#kanbuq\').click(function(){\r\n    	$(\'img\').attr(\'src\',_src+\'&_=\'+Math.random());\r\n  	});\r\n});\r\n```\r\n8.服务端验证：PublicController 控制器\r\n```php\r\npublic function check(Request $request)\r\n{\r\n    //开始自动验证\r\n    $this -> validate($request,[\r\n      //验证规则\r\n      \'username\' => \'required|min:3|max:20|\',\r\n      \'password\' => \'required|min:6|confirmed\',\r\n      \'password_confirmation\' => \'required\',\r\n      \'code\' => \'required|captcha\'\r\n    ],[\r\n      //针对没有翻译的自定义错误,手动翻译成中文\r\n      \'code.required\' => \'验证码补能为空!\',\r\n      \'code.captcha\' => \'验证码错误！\',\r\n      // 自定义错误提示信息\r\n      \'password.required\' => \'密码不能为空\',\r\n      \'password.confirmed\' => \'两次密码不一致\',\r\n      \'password_confirmation.required\' => \'确认密码不能为空\' \r\n    ]);\r\n}\r\n```',5,100,'2019-02-20 15:02:39','2019-02-20 15:02:39'),(44,'### 管理员【登录】的自动验证\r\n#### 登录路由与视图\r\n路由：登录表单提交的路由\r\n```php\r\n// 登录表单提交\r\nRoute::post(\'admin/public/check\',\'Admin\\PublicController@check\') -> name(\'admin_check_login\');\r\n```\r\nlogin视图：修改表单action跳转值\r\n```php\r\n<form class=\"form form-horizontal\" action=\"{ { route(\'admin_check_login\') } }\" method=\"post\">\r\n```\r\nLogin视图：修改input的name值，让数据可以被提交。（保持online复选框默认值为“1”）\r\n```php\r\n<input id=\"username\" name=\"username\" type=\"text\" placeholder=\"账户\">\r\n<input id=\"password\" name=\"password\" type=\"password\" placeholder=\"密码\">\r\n<input name=\'captcha\' type=\"text\" placeholder=\"验证码\">\r\n<input type=\"checkbox\" name=\"online\" id=\"online\" value=\"1\">\r\n```\r\nLogin视图：添加csrf验证\r\n```php\r\n{ { csrf_field() } }\r\n```\r\nlogin视图：显示验证不通过时的 错误信息\r\n##### 引入layer.js\r\n```php\r\n<!-- 引入layer.js -->\r\n<script type=\"text/javascript\" src=\"/admin/lib/layer/2.4/layer.js\"></script>\r\n<script>\r\n@if(count($errors)>0)\r\n  var err = \'\';\r\n    @foreach($errors->all() as $error) // all() 获取所有错误\r\n        err += \'{ {$error} }<br/>\';\r\n    @endforeach\r\n    layer.alert(err,{title:\'错误提示\'});\r\n@endif\r\n</script>\r\n```\r\n#### 登录验证过程\r\nlaravel登录验证的过程：https://laravel-china.org/docs/laravel/5.7/authentication/2269#08b509\r\n—— 指定guard实例：guard用来指定从哪张表来比对用户密码\r\n—— attempt参数：\r\n———— attempt第一个参数接收一个数组，数组中的值将被用于在数据表中查找用户，找到后，将传递过来的密码哈希值与数据库中的哈希密码进行比较。\r\n———— attempt第二个参数接收一个bool值，这将永久保持用户的认证状态，或者直到他们手动注销登录。当然，你的 users 表必须包含名为 remember_token 的字符串字段，它将被用于保存「记住我」的令牌。\r\n```php\r\nAuth::guard(指定guard实例) -> attempt(需要验证的用户信息关联数组,[记住我 bool值]);\r\n```\r\nguard的配置：/config/auth.php中\r\n```php\r\n\'guards\' => [\r\n  // 自定义一个guard\r\n  \'admin\' => [ 	// guard名称为“admin”\r\n    \'driver\' => \'session\', // 认证后以session方式存储\r\n    \'provider\' => \'manager\', // guard提供者名称\r\n  ],\r\n],\r\n\'providers\' => [\r\n  // 定义详细的guard提供者信息\r\n  \'manager\' => [\r\n    \'driver\' => \'eloquent\', // 以eloquent模型来驱动\r\n    \'model\' => App\\Models\\Manager::class, // 指定guard具体的模型（即guard要查询哪张表）\r\n  ],\r\n],\r\n```\r\n创建用于登录认证的【Manager模型】\r\n```php\r\n<?php\r\nnamespace App\\Models;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n// 引入trait代码片段空间：Authenticatable\r\nuse Illuminate\\Auth\\Authenticatable;\r\n\r\n// 认证model要求一：继承接口\r\n// 即：对于需要登录认证的model，需要继承\\Illuminate\\Contracts\\Auth\\Authenticatable接口，这个接口有6个抽象方法需要实现\r\nclass Manager extends Model implements \\Illuminate\\Contracts\\Auth\\Authenticatable\r\n{\r\n    protected $table = \'manager\'; // 指定模型的数据表\r\n    // 认证model要求二：使用trait片段，来实现抽象方法\r\n    // 这个trait代码片段实现了Authenticatable接口中的6个抽象方法\r\n    use Authenticatable;\r\n  	// 关联角色表（一个用户有一个角色）\r\n    public function rel_role() {\r\n        return $this->hasOne(\'App\\Models\\Role\',\'id\',\'role_id\');\r\n    }\r\n}\r\n```\r\nPublicController 控制器：check() 方法\r\n```php\r\n// 引入Auth门面(有了别名直接引入即可)\r\nuse Auth;\r\n// 登录验证方法\r\npublic function check(Request $request)\r\n{\r\n  $this->validate($request, [\r\n    // 表单提交验证规则\r\n    \'username\' => \'required|min:3|max:20\',\r\n    \'password\' => \'required|min:6\',\r\n    \'captcha\' => \'required|size:5|captcha\'\r\n  ], [\r\n    //针对没有翻译的自定义错误,手动翻译成中文\r\n    \'captcha.required\' => \'验证码不能为空\',\r\n    \'captcha.size\' => \'验证码长度必须是5位\',\r\n    \'captcha.captcha\' => \'验证码错误！\'\r\n  ]);\r\n  // 身份合法性验证\r\n  $data = $request -> only([\'username\',\'password\']);\r\n  $data[\'status\'] = \'2\'; // 1=禁用，2=启用\r\n  if (Auth::guard(\'admin\')->attempt($data,$request -> get(\'online\'))) {\r\n    // 验证通过\r\n    return redirect(route(\'dashboard\'));\r\n  } else {\r\n    // 验证失败\r\n    return redirect(route(\'login\')) -> withErrors([\'error\' => \'用户名或密码错误！\']);\r\n  }\r\n}\r\n```',5,100,'2019-02-20 15:11:09','2019-02-20 15:11:57'),(45,'### 后台首页的展示\r\n后台首页路由\r\n```php\r\n// 后台路由群组\r\n// auth:admin 系统自带路由保护中间件，判断用户是否登录，登录了则放行，否则去登录页\r\nRoute::group([\'prefix\' => \'admin\', \'middleware\' => \'auth:admin\'], function () {\r\n  // 后台首页路由\r\n  Route::get(\'index/index\', \'Admin\\IndexController@index\')->name(\'dashboard\');\r\n  Route::get(\'index/welcome\', \'Admin\\IndexController@welcome\')->name(\'welcome\');\r\n  // 退出登录路由\r\n  Route::get(\'index/logout\', \'Admin\\IndexController@logout\')->name(\'logout\');\r\n});\r\n```\r\n视图：复制视图\r\n——复制index.html和welcome.html 到 resources/views/admin/index目录下，并改文件名、修改页面内资源路径。\r\n\r\n------------\r\nindex/index视图：修改index中引用welcome页面的路径\r\n```php\r\n<span title=\"我的桌面\" data-href=\"{ {route(\'welcome\')} }\">我的桌面</span>\r\n<iframe scrolling=\"yes\" frameborder=\"0\" src=\"{ {route(\'welcome\')} }\"></iframe>\r\n```\r\nindex/index视图：获取认证用户（即登录用户）的信息\r\n```php\r\n获取认证用户信息语法：Auth::guard(guard名称) -> user();\r\n```\r\n```php\r\n<!-- 页面右上角显示登录的用户的角色名称 -->\r\n<li>{ { Auth::guard(\'admin\') -> user() -> rel_role -> role_name } }</li>\r\n<!-- 页面右上角显示登录的用户名 -->\r\n<a href=\"#\" class=\"dropDown_A\">\r\n  { { Auth::guard(\'admin\') -> user() -> username } }\r\n  <i class=\"Hui-iconfont\">&#xe6d5;</i>\r\n</a>\r\n```\r\nindex/index视图：退出\r\n```php\r\n<li><a href=\"{ {route(\'logout\')} }\">退出</a></li>\r\n```\r\nManager模型\r\n```php\r\n// 关联角色表（一个用户有一个角色）\r\npublic function rel_role() {\r\n  return $this->hasOne(\'App\\Models\\Role\',\'id\',\'role_id\');\r\n}\r\n```\r\n控制器\r\n```php\r\nuse Auth;\r\nclass IndexController extends Controller {\r\n    // 首页方法-index\r\n    public function index() {\r\n        return view(\'admin.index.index\');\r\n    }\r\n    // 首页方法-welcome\r\n    public function welcome() {\r\n        return view(\'admin.index.welcome\');\r\n    }\r\n  	// 退出登录\r\n    public function logout() {\r\n        Auth::guard(\'admin\') -> logout(); // 用Auth门面来退出（清除session）\r\n        return redirect(route(\'login\')); // 跳转\r\n    }\r\n}\r\n```',5,100,'2019-02-20 15:15:47','2019-02-20 15:15:47'),(46,'### 路由保护\r\n路由保护【中间件】若判断用户没有登录时，会默认跳转至【login】路由。\r\n```php\r\n语法：middleware(\'auth:指定guard\')\r\n```\r\n```php\r\n// 后台路由群组\r\nRoute::group([\'prefix\' => \'admin\', \'middleware\' => \'auth:admin\'], function () {\r\n  // 后台首页路由\r\n  Route::get(\'index/dashboard\', \'Admin\\IndexController@index\')->name(\'dashboard\');\r\n  Route::get(\'index/welcome\', \'Admin\\IndexController@welcome\')->name(\'welcome\');\r\n// 退出登录路由\r\n  Route::get(\'index/logout\', \'Admin\\IndexController@logout\')->name(\'logout\');\r\n});\r\n```',5,100,'2019-02-21 00:53:25','2019-02-21 00:54:02'),(47,'## H-ui后台模板\r\n下载地址：http://www.h-ui.net/H-ui.admin.shtml\r\nH-ui.Admin_v3.x：默认版本，采用iframe布局，多选项卡效果\r\nH-ui.Admin.page_v3.x：是单页面，没有用到iframe，左侧菜单点击刷新页面，每次只能打开一个页面。相比iframe更简单，更方便操作。\r\n目录结构\r\n```\r\nLib目录：使用的第三方扩展库\r\nStatic目录：框架需要使用一些静态文件，如js、css、images等\r\n.html文件：视图文件\r\n```\r\n使用方法\r\n——复制“Lib目录”、“Static目录”等静态资源到Laravel项目中的public目录（或public中的admin目录，进行分录管理）\r\n——有了静态资源后，根据需要复制html视图页面就好，注意修改html页面的引用js、css的路径。',5,100,'2019-02-21 00:53:43','2019-02-21 00:54:21'),(48,'## 管理员管理\r\n### 实现管理员列表展示\r\n路由\r\n```php\r\nRoute::group([\'prefix\' => \'admin\', \'middleware\' => \'auth:admin\'], function () {\r\n    // 管理员模块\r\n    Route::get(\'manager/index\',\'Admin\\ManagerController@index\') -> name(\'manager_index\');\r\n});\r\n```\r\nindex/index视图：菜单修改\r\n```php\r\n<a data-href=\"{ {route(\'manager_index\')} }\" data-title=\"管理员列表\" href=\"javascript:void(0)\">管理员列表</a>\r\n```\r\n复制admin-list.html 到 views/manager/index.blade.php\r\nmanager/index视图：显示数据\r\n```php\r\n@forelse($data as $val)\r\n	@if($val->status == 2)\r\n		<!-- $val代表一个用户对象，通过关联方法，返回一个关联数据集 -->\r\n		{ { $val -> rel_role() -> first() -> role_name } }\r\n		<!-- 通过关联属性，直接访问关联的数据 -->\r\n		{ { $val -> rel_role -> role_name } }\r\n	@elseif($val->status == 1)\r\n	@endif\r\n@empty\r\n	<tr><td colspan=\"9\">没有数据哦！</td></tr>\r\n@endforelse\r\n```\r\n控制器：ManagerController\r\n```php\r\n// 引入模型\r\nuse App\\Models\\Manager;\r\nclass ManagerController extends Controller {\r\n    // 管理员列表\r\n    public function index() {\r\n        $data = Manager::all();\r\n        return view(\'admin.manager.index\',compact(\'data\'));\r\n    }\r\n}\r\n```\r\n### Datatables  无刷新分页\r\nDatatables插件是一款基于jQuery框架进行开发的无刷新分页插件，其除了分页还有排序、搜索等功能。\r\nDatatables官网：https://www.datatables.net/\r\nDatatables有2种分页方式：客户端分页、服务端分页。\r\nlaravel已经有datatables插件，使用【客户端分页方式】实现分页，步骤如下：\r\n1.在视图中，先在确保引入jQuery之后，再去引入datatables的JavaScript文件\r\n```javascript\r\n<script type=\"text/javascript\" src=\"/admin/lib/datatables/1.10.0/jquery.dataTables.min.js\"></script>\r\n```\r\n2.初始化datatables插件\r\n```javascript\r\n//jQuery页面载入事件\r\n$(document).ready( function () {\r\n	$(\'#myTable\').DataTable();   //datatables初始化，初始化后表格就有排序了\r\n});\r\n\r\n或者\r\n\r\n//jQuery页面载入事件\r\n$(function () {\r\n	$(\'#myTable\').DataTable();  //datatables初始化，初始化后表格就有排序了\r\n});\r\n```\r\n3.【可选】databtables支持一些扩展的配置\r\n```javascript\r\n//jQuery页面载入事件\r\n// 使用DataTbles时不要直接用标签选择器，如$(\'table\')\r\n$(function () {    \r\n    $(\'.table-sort\').DataTable({\r\n        // \"order\":false, //禁止排序\r\n        \"columnDefs\":[{\"orderable\":false,\"targets\":[0,8,9]}],//禁止第几列排序\r\n        \"order\":[[1,\"desc\"]] //指定第2列排序，默认为降序排列\r\n      	\"aLengthMenu\" : [20, 40, 60], //更改显示记录数选项  \r\n        \"iDisplayLength\" : 40, //默认显示的记录数\r\n      	// \"aaSorting\": [[ 1, \"desc\" ]],//默认第几个排序\r\n      	// \"bStateSave\": true,//状态保存\r\n        // \"aoColumnDefs\": [\r\n        // 	//{\"bVisible\": false, \"aTargets\": [ 3 ]} //控制列的隐藏显示\r\n        // 	{\"orderable\":false,\"aTargets\":[0,6,7]}// 制定列不参与排序\r\n        // ]\r\n    });\r\n});\r\n```\r\n#### 客户端分页和服务端分页比较\r\n客户端分页优缺点\r\n—— 优点：是当数据量少的时候，其速度是比较快的，其所有的操作都在客户端完成\r\n—— 缺点：是如果数据量大的话，则加载的时候会很慢。\r\n服务端分页优缺点（通过limit）\r\n—— 优点：是当数据量大的时候，由于每次都是通过limit限制输出记录，所以其速度基本不受影响\r\n—— 缺点：是如果数据量少的时候，频繁请求服务器，则服务器的压力相对较大\r\n**总结**\r\n—— 因此，在要求比较高时，可以客户端分页和服务端分页结合起来使用，客户端1次请求，服务端第1次只返回少量数据，保证了速度，但随后客户端第2次请求，服务端再才返回大量数据。这样，用户访问速度快，在用户看第一页数据时，趁这个时间又请求了大量数据，保证了前台以后分页不用请求服务了。',5,100,'2019-02-21 00:59:52','2019-02-21 01:01:05'),(49,'## RBAC权限管理\r\nRBAC，基于角色的权限访问控制（Role-Based Access Control）。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。\r\nRBAC三表设计（三表设计缺陷：不好通过权限反查角色）\r\n```php\r\n用户表(id,user_name,role_id)：角色与用户：【一对多关系】(一个角色对多个用户，一个用户对一个角色)\r\n角色表(id,role_name,auth_ids)：角色与权限：【多对多关系】(一个角色对多个权限，一个权限对多个角色)\r\n权限表(id,auth_name)：权限表\r\n```\r\nRBAC五表设计（正查、反查都很方便）\r\n```php\r\n用户表(id，user_name)\r\n用户-角色表(role_id,user_id)：角色与用户：【多对多关系】(一个用户对多个角色，一个角色对多个用户)\r\n角色表(id，role_name)\r\n角色-权限表(auth_id,role_id)：角色与权限：【多对多关系】(一个角色对多个权限，一个权限对多个角色)\r\n权限表(id，auth_name)\r\n```',5,100,'2019-02-21 01:02:53','2019-02-21 01:02:53'),(50,'### 创建迁移文件（数据表）\r\n```php\r\nphp artisan make:migration create_role_table\r\nphp artisan make:migration create_auth_table\r\n```\r\n```php\r\n public function up() {\r\n   // 创建数据表role\r\n   Schema::create(\'role\', function (Blueprint $table) {\r\n     $table->increments(\'id\'); // 自增id\r\n     $table->string(\'role_name\', 20)->notnull()->comment(\'角色名称\');\r\n     $table->text(\'auth_ids\')->nullable()->comment(\'角色对应的权限id集合\');\r\n     $table->text(\'auth_ac\')->nullable()->comment(\'控制器与方法集合\');\r\n   });\r\n }\r\npublic function down() {\r\n  // 删除数据表\r\n  Schema::dropIfExists(\'role\');\r\n}\r\n```\r\n```php\r\npublic function up() {\r\n  // 创建数据表auth\r\n  Schema::create(\'auth\',function(Blueprint $table){\r\n    $table->increments(\'id\');\r\n    $table->string(\'auth_name\',20)->notnull()->comment(\'权限名称\');\r\n    $table->string(\'controller\',40)->nullable()->comment(\'控制器名称\');\r\n    $table->string(\'action\',30)->nullable()->comment(\'方法名称\');\r\n    $table->tinyInteger(\'pid\')->notnull()->default(0)->comment(\'父级id\');\r\n    $table->enum(\'is_nav\',[\'1\',\'2\'])->notnull()->default(\'1\')->comment(\'是否作为菜单：1=是，2=否\');\r\n  });\r\n}\r\npublic function down() {\r\n  // 删除数据表\r\n  Schema::dropIfExists(\'auth\');\r\n}\r\n```\r\n```php\r\nphp artisan migrate // 执行迁移文件，创建表\r\n```\r\n### 权限操作\r\n路由\r\n```php\r\nRoute::group([\'prefix\' => \'admin\', \'middleware\' => \'auth:admin\'], function () {\r\n	// 权限管理\r\n    Route::any(\'auth/add\',\'Admin\\AuthController@add\') -> name(\'auth_add\');\r\n    Route::get(\'auth/index\',\'Admin\\AuthController@index\') -> name(\'auth_index\');\r\n}\r\n```\r\nindex/index视图：修改菜单路径\r\n```php\r\n  <li><a data-href=\"{ {route(\'auth_index\')} }\" data-title=\"权限管理\" href=\"javascript:void(0)\">权限管理</a></li>\r\n```\r\n视图: 复制视图\r\n—— 复制 admin-permission.html 到 views/admin/auth/index.blade.php，作“权限列表”视图\r\n—— 改造 admin-add.html，然后复制 views/admin/auth/add.blade.php，作“添加权限”视图\r\nadd.blade.php \"添加权限\"视图原框架中ajax请求有坑（后续ajax请求同样有坑），改造如下\r\n```javascript\r\nsubmitHandler:function(form){\r\n  $(form).ajaxSubmit({\r\n    type: \'post\',\r\n    url: \"{ {route(\'auth_add\')} }\" ,\r\n    success: function(data){\r\n      layer.msg(\'添加成功!\',{icon:1,time:1000},function(){						\r\n        var index = parent.layer.getFrameIndex(window.name); // 获取当前弹窗的索引\r\n        parent.location.href = parent.location.href; // 刷新父级页面(即权限列表页面)\r\n        parent.layer.close(index); // 关闭弹窗\r\n      });\r\n    },\r\n    error: function(XmlHttpRequest, textStatus, errorThrown){\r\n      var err = \'\';\r\n      var errors = JSON.parse(XmlHttpRequest.responseText);\r\n      for(var key in errors) {\r\n        for(var i in errors[key]){\r\n          err += errors[key][i] + \"<br/>\";\r\n        }\r\n      }					\r\n      layer.alert(err,{title:\'错误提示\'});\r\n    }\r\n  });			\r\n}\r\n```\r\n控制器AuthController\r\n```php\r\nclass AuthController extends Controller\r\n{\r\n    // 权限列表\r\n    public function index(Request $reqeust){\r\n        // SELECT t1.*,t2.auth_name as parent_name FROM auth as t1 LEFT JOIN auth as t2 on t1.pid=t2.id\r\n        $data = DB::table(\'auth as t1\') -> select(\'t1.*\',\'t2.auth_name as parent_name\') -> leftJoin(\'auth as t2\',\'t1.pid\',\'=\',\'t2.id\') -> get();\r\n        return view(\'admin.auth.index\',compact(\'data\'));\r\n    }\r\n    // 添加权限\r\n    public function add(Request $request){\r\n        if ($request->method() === \'GET\') {\r\n            // get请求\r\n            return view(\'admin.auth.add\');\r\n        } elseif ($request->method() === \'POST\') {\r\n            // post请求\r\n            // 服务端表单验证(其实前端也有验证)\r\n            $this->validate($request,[\r\n                \'auth_name\' => \'required|min:4|max:20\',\r\n                // 【可选字段】设置nullable：如果字段没有值，则不验证后续规则；有值则继续验证\r\n                \'controller\' => \'nullable|min:4|max:40\',\r\n                \'action\' => \'nullable|min:3|max:30\',\r\n                \'pid\' => \'required\',\r\n                \'is_nav\' => \'required\'\r\n            ],[\r\n                \'controller.min\' => \'控制器名 至少4个字符\',\r\n                \'controller.max\' => \'控制器名 至多40个字符\',\r\n                \'action.min\' => \'方法名 至少3个字符\',\r\n                \'action.max\' => \'方法名 至多30个字符\',\r\n            ]);\r\n            // 如果以上服务器表单验证不通过，会直接返回：http信息（422 (Unprocessable Entity)）和验证错误信息的json字符串，并且不会进入一下入库的步骤\r\n            // 写入数据\r\n            if (Auth::create($request->all())) { // 如下写入数据表成功\r\n                $resposne = [\'code\' => \'0\',\'msg\' => \'添加权限成功！\'];\r\n            } else {\r\n                $resposne = [\'code\' => \'1\',\'msg\' => \'添加权限失败！\'];\r\n            }\r\n            return response()-> json($resposne);\r\n        }\r\n    }\r\n}\r\n```\r\n### 权限列表\r\n#### 权限数据表自联合查询\r\nauth数据表字段：id、auth_name、controller、action、pid、is_nav\r\nauth数据表联合自己查询的sql语句\r\n```php\r\nSELECT t1.*,t2.auth_name as parent_name FROM auth as t1 LEFT JOIN auth as t2 on t1.pid=t2.id\r\n```\r\n```php\r\n查询出的字段：id、auth_name、controller、action、pid、is_nav、parent_name\r\n```\r\nAuthController控制器\r\n```php\r\n// 权限列表\r\npublic function index(Request $reqeust){\r\n  // SELECT t1.*,t2.auth_name as parent_name FROM auth as t1 LEFT JOIN auth as t2 on t1.pid=t2.id\r\n  $data = DB::table(\'auth as t1\') -> select(\'t1.*\',\'t2.auth_name as parent_name\') -> leftJoin(\'auth as t2\',\'t1.pid\',\'=\',\'t2.id\') -> get();\r\n  return view(\'admin.auth.index\',compact(\'data\'));\r\n```\r\n### 角色管理\r\n#### 路由视图控制器\r\n角色表中角色的个数，一定要大于用户表（manager）中的role_id的个数\r\n路由\r\n```php\r\n// 角色管理\r\nRoute::any(\'role/assign\',\'Admin\\RoleController@assign\') -> name(\'role_assign\');\r\nRoute::get(\'role/index\',\'Admin\\RoleController@index\') -> name(\'role_index\');\r\n```\r\nrole/index 视图(角色列表)\r\n```php\r\n<a title=\"分派权限\" href=\"javascript:;\" onclick=\"admin_assign(\'分派权限\',\'{ {route(\'role_assign\')} }\',\'{ {$val->id} }\',\'\',\'400\')\" style=\"text-decoration:none\">\r\n  <i class=\"Hui-iconfont\">&#xe63c;</i>\r\n</a>\r\n```\r\n—— 图标：http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml\r\n```php\r\n/* 管理员-角色-分派权限 */\r\nfunction admin_assign(title,url,id,w,h) {\r\n	layer_show(title,url+\'?id=\'+id,w,h);\r\n}\r\n```\r\nRoleController控制器\r\n```php\r\nclass RoleController extends Controller {\r\n    // 展示角色列表\r\n    public function index() {\r\n        $data = Role::all();\r\n        return view(\'admin.role.index\',compact(\'data\'));\r\n    }\r\n    // 为角色分派权限\r\n    public function assign() {\r\n        if(Input::method() == \'POST\') {\r\n            // POST请求\r\n            // 1.0 获取基本信息\r\n            $role_id = Input::get(\'id\');// url传过来的\r\n            $auth_ids = Input::get(\'auth_ids\'); // post表单提交的\r\n            // 2.0 让Role模型做权限分派数据的处理\r\n            $model = new Role;            \r\n            if($model->assignAuth($role_id,$auth_ids)){\r\n                // 成功\r\n                $response = [\'code\'=>\'0\',\'msg\'=>\'权限分派成功！\'];\r\n            } else {\r\n                // 失败\r\n                $response = [\'code\'=>\'1\',\'msg\'=>\'权限分派失败！\'];\r\n            }\r\n            // 响应\r\n            return response()->json($response);\r\n        } else {\r\n            // GET请求\r\n            // 查询权限\r\n            $parent = Auth::where(\'pid\',\'0\') -> get();\r\n            $second = Auth::where(\'pid\',\'!=\',\'0\') -> get();\r\n            // 查询当前角色名称\r\n            // $role_name = Role::where(\'id\',Input::get(\'id\'))->first()->role_name;\r\n            $current_role = Role::find(Input::get(\'id\'));\r\n            return view(\'admin.role.assign\',compact(\'parent\',\'second\',\'current_role\'));\r\n        }\r\n    }\r\n}\r\n```\r\nRole模型\r\n```php\r\nclass Role extends Model{\r\n    protected $table = \'role\'; // 指定表\r\n    public $timestamps = false; // 禁止更新时间\r\n\r\n    // 给指定角色，分派权限\r\n    public function assignAuth($role_id,$auth_ids) {\r\n        // 生成auth_ids字段数据\r\n        $data[\'auth_ids\'] = implode(\',\',$auth_ids);\r\n        // 根据$auth_ids查找auth_ac字段所需数据(需排除顶级权限)\r\n        $auths = Auth::where(\'pid\',\'!=\',\'0\')->whereIn(\'id\',$auth_ids)->get();\r\n        $ac = \'\';\r\n        foreach($auths as $key=>$value) {\r\n            $ac .= $value->controller . \'@\' . $value->action . \',\';            \r\n        }\r\n        $data[\'auth_ac\'] = rtrim($ac,\',\');\r\n        // 写入数据集，并返回true或false\r\n        return $this->where(\'id\',$role_id)->update($data);\r\n    }\r\n}\r\n```\r\n### 自定义rbac中间件\r\n创建中间件\r\n```php\r\nphp artisan make:middleware CheckRbac\r\n```\r\n注册中间件\r\n```php\r\n// 在\\App\\Http\\Kernel.php中\r\nprotected $routeMiddleware = [\r\n  // 自定义路由中间件\r\n  \'rbac\' => \\App\\Http\\Middleware\\CheckRbac::class,\r\n]\r\n```\r\n使用中间件\r\n```php\r\n// 后台路由群组\r\n// auth:admin 系统自带路由保护中间件，判断用户是否登录，登录了则放行；否则去登录页\r\n// rbac 自定义中间件，判断当前访问路由对应的权限，在不在用户角色的权限范围内，在则放行；不在则禁止访问\r\nRoute::group([\'prefix\' => \'admin\', \'middleware\' => [\'auth:admin\',\'rbac\']], function () {\r\n	// 路由\r\n});\r\n```\r\nCheckRbac 中间件编写\r\n```phh\r\n<?php\r\nnamespace App\\Http\\Middleware;\r\nuse Closure;\r\nuse Route;\r\nuse Auth;\r\nclass CheckRbac {\r\n  public function handle($request, Closure $next)\r\n  {\r\n    // phpinfo(); // 测试下中间件有效没有\r\n    // 验证当前用户是否有权限访问某路由\r\n    $current_user = Auth::guard(\'admin\')->user();        \r\n    if ($current_user->rel_role->role_id != \'1\') { // 超级管理员有所有权限，不用验证权限\r\n      $route = explode(\'\\\\\', Route::currentRouteAction()); // 当前访问路由的数组形式\r\n      $current_ac = end($route); // 当前访问的控制器和方法\r\n      $role_ac = $current_user->rel_role->auth_ac; // 当前登录用户的角色的auth_ac字段（即权限范围）\r\n      // stripos忽略大小写，没找到返回false，找到返回位置(可能是0)，必须用===\r\n      if (stripos($role_ac, $current_ac) === false) {\r\n        // 如果访问路由的ac，不在登录用户的ac范围内，则禁止访问\r\n        exit(\'对不起，您没有权限访问本页面\');\r\n      }\r\n    }\r\n    return $next($request);\r\n  }\r\n```',5,100,'2019-02-21 01:18:35','2019-02-21 01:18:35'),(51,'## 会员管理\r\n### 会员数据表准备\r\nmember数据表的迁移文件\r\n```php\r\nmember数据表的迁移文件\r\n```\r\n```php\r\npublic function up() {\r\n  // 建表\r\n  Schema::create(\'member\', function(Blueprint $table){\r\n    $table -> increments(\'id\');\r\n    $table -> string(\'username\',20) -> notnull() -> comment(\'用户名\');\r\n    $table -> string(\'password\') -> notnull() -> comment(\'密码\'); // string默认长度 varchar(255)\r\n    $table -> enum(\'gender\',[1,2,3]) -> notnull() -> default(\'1\') -> comment(\'性别：1=男，2=女，3=保密\');\r\n    $table -> string(\'mobile\',11) -> nullable() ->comment(\'手机号\');\r\n    $table -> string(\'email\',40) -> nullable() -> comment(\'邮箱\');\r\n    $table -> string(\'avatar\') -> nullable() -> comment(\'头像图片地址\');\r\n    $table -> timestamps(); // 生成created_at和updated_at两个字段\r\n    $table -> rememberToken(); // 会自动添加 remmenber_token 列：VARCHAR(100) NULL\r\n    $table -> enum(\'type\',[1,2]) -> notnull() -> default(\'1\') -> comment(\'账号类型：1=用户，2=运营\');\r\n    $table -> enum(\'status\',[1,2]) -> notnull() -> default(\'2\') -> comment(\'状态：1=禁用，2=启用\');\r\n  });\r\n}\r\n```\r\n—— 对应的sql语句为\r\n```php\r\nCREATE TABLE `member` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'用户名\',\r\n  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'密码\',\r\n  `gender` enum(\'1\',\'2\',\'3\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'1\' COMMENT \'性别：1=男，2=女，3=保密\',\r\n  `mobile` varchar(11) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'手机号\',\r\n  `email` varchar(40) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'邮箱\',\r\n  `avatar` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'头像图片地址\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `type` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'1\' COMMENT \'账号类型：1=用户，2=运营\',\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'状态：1=禁用，2=启用\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n创建假数据\r\n```php\r\nphp artisan make:seed MemberTableSeeder\r\n```\r\n```php\r\npublic function run() {\r\n  // 执行数据表填充\r\n  $faker = \\Faker\\Factory::create(\'zh_CN\');\r\n  $data = [];\r\n  for ($i=0; $i<100; $i++) {\r\n    $data[] = [\r\n      \'username\'      => $faker -> userName,\r\n      \'password\'      => bcrypt(\'123456\'),\r\n      \'gender\'        => rand(1,3),\r\n      \'avatar\'        => \'/static/avatar.jpg\',\r\n      \'mobile\'        => $faker -> phoneNumber,\r\n      \'email\'         => $faker -> email,\r\n      \'created_at\'    => date(\'Y-m-d H:i:s\'),\r\n      \'type\'          => rand(1,2),\r\n      \'status\'        => rand(1,2)\r\n    ];\r\n  }\r\n  // 写入数据表\r\n  DB::table(\'member\')->insert($data);\r\n}\r\n```\r\n```php\r\nphp artisan db:seed --class=MemberTableSeeder\r\n```\r\n### 路由/视图/模型/控制器\r\n路由\r\n```php\r\n// 会员管理\r\nRoute::get(\'member/index\',\'Admin\\MemberController@index\') -> name(\'member_index\');\r\nRoute::match([\'get\',\'post\'],\'member/add\',\'Admin\\MemberController@add\') -> name(\'member_add\');\r\nRoute::get(\'member/getAreaById\',\'Admin\\MemberController@getAreaById\') -> name(\'member_getAreaById\');\r\n// 异步上传图像(公共)\r\nRoute::post(\'uploader/webuploader\',\'Admin\\UploaderController@webuploader\') -> name(\'webuploader\');\r\n```\r\n模型\r\n```php\r\nphp artisan make:model Models/Member\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Admin/MemberController\r\nphp artisan make:controller Admin/UploaderController\r\n```\r\n```php\r\nclass MemberController extends Controller {\r\n    // 会员列表\r\n    public function index(Request $request) {\r\n        // 获取会员数据\r\n        $data = Member::all();\r\n        return view(\'admin.member.index\',compact(\'data\'));\r\n    }\r\n    // 添加用户\r\n    public function add(Request $request) {\r\n        if($request -> method() == \'POST\') {\r\n            // post提交数据\r\n            $data = $request -> all();\r\n            $data[\'password\'] = bcrypt($data[\'password\']);\r\n            if(Member::create($data)) {\r\n                $response = [\'code\' => \'0\', \'msg\' => \'会员创建成功！\'];\r\n            } else {\r\n                $response = [\'code\' => \'1\', \'msg\' => \'会员创建失败！\'];                \r\n            }\r\n            return response() -> json($response);\r\n        } else {\r\n            // 展示添加面板\r\n            $countrys = DB::table(\'area\') -> where(\'pid\',\'0\') -> get();\r\n            return view(\'admin.member.add\',compact(\'countrys\'));\r\n        }\r\n    }\r\n    // 根据地区id获取其下属的行政区划\r\n    public function getAreaById(Request $request) {\r\n        $id = (int)$request -> get(\'id\'); // 强制int转换，更安全\r\n        $data = DB::table(\'area\') -> where(\'pid\',$id) -> get();\r\n        return response() -> json($data);\r\n    }\r\n}\r\n```',5,100,'2019-02-21 01:40:33','2019-02-21 01:40:33'),(52,'### 区域四级联动\r\n视图: member/add.blade.php 添加用户视图中【区域四级联动】\r\n思路：默认加载好第一级，然后根据第一级的change，后面的跟着联动。\r\n```javascript\r\n<div class=\"formControls col-xs-8 col-sm-9\"> \r\n  <span class=\"select-box\" style=\"width: 150px;\">                        \r\n    <select class=\"select\" size=\"1\" name=\"country_id\">\r\n      <option value=\"\" selected>--国家--</option>\r\n      @foreach($countrys as $country)\r\n      <option value=\"{ {$country->id} }\">{ {$country -> area} }</option>\r\n      @endforeach							\r\n    </select>                        \r\n  </span>\r\n  <span class=\"select-box\" style=\"width: 150px;\">\r\n    <select class=\"select\" size=\"1\" name=\"province_id\">\r\n      <option value=\"\" selected>--省份--</option>\r\n      <!-- 数据追加的位置 -->\r\n    </select>\r\n  </span> \r\n  <span class=\"select-box\" style=\"width: 150px;\">\r\n    <select class=\"select\" size=\"1\" name=\"city_id\">\r\n      <option value=\"\" selected>--城市--</option>\r\n	  <!-- 数据追加的位置 -->\r\n    </select>\r\n  </span>  \r\n  <span class=\"select-box\" style=\"width: 150px;\">\r\n    <select class=\"select\" size=\"1\" name=\"county_id\">\r\n      <option value=\"\" selected>--区县--</option>	\r\n      <!-- 数据追加的位置 -->\r\n    </select>\r\n  </span> \r\n</div>\r\n<script>\r\n$(function() {\r\n  // 一二级别联动\r\n  $(\'select[name=country_id]\').change(function(){\r\n    var _id = $(this).val();\r\n    $.get(\"{ {route(\'member_getAreaById\')} }\",{id: _id},function(data){\r\n      // 循环遍历得到的数据，并拼接字符串\r\n      var _options = \'\';\r\n      $.each(data,function(index,el){\r\n        _options += \"<option value=\'\"+ el.id +\"\'>\"+ el.area +\"</option>\";\r\n      });\r\n      // 添加到select中\r\n      $(\'select[name=province_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=city_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=county_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=province_id]\').append(_options);\r\n    },\'json\');\r\n  });\r\n  // 二三级别联动\r\n  $(\'select[name=province_id]\').change(function(){\r\n    var _id = $(this).val();\r\n    $.get(\"{ {route(\'member_getAreaById\')} }\",{id: _id},function(data){\r\n      // 循环遍历得到的数据，并拼接字符串\r\n      var _options = \'\';\r\n      $.each(data,function(index,el){\r\n        _options += \"<option value=\'\"+ el.id +\"\'>\"+ el.area +\"</option>\";\r\n      });\r\n      // 添加到select中\r\n      $(\'select[name=city_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=county_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=city_id]\').append(_options);\r\n    },\'json\');\r\n  });\r\n});\r\n  // 三四级别联动\r\n  $(\'select[name=city_id]\').change(function(){\r\n    var _id = $(this).val();\r\n    $.get(\"{ {route(\'member_getAreaById\')} }\",{id: _id},function(data){\r\n      // 循环遍历得到的数据，并拼接字符串\r\n      var _options = \'\';\r\n      $.each(data,function(index,el){\r\n        _options += \"<option value=\'\"+ el.id +\"\'>\"+ el.area +\"</option>\";\r\n      });\r\n      // 添加到select中\r\n      $(\'select[name=county_id]\').find(\'option:gt(0)\').remove();// 找到索引大于0的option清掉\r\n      $(\'select[name=county_id]\').append(_options);\r\n    },\'json\');\r\n  });\r\n</script>\r\n```',5,100,'2019-02-21 01:52:30','2019-02-21 01:53:03'),(53,'### 异步头像上传到本服务器 webuploader\r\n使用 webuploader 上传插件，基于jquery开发的。 \r\n官网：http://fex.baidu.com/webuploader/getting-started.html\r\n图片上传功能：http://fex.baidu.com/webuploader/getting-started.html#%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0\r\n图片上传js示例代码：http://fex.baidu.com/webuploader/js/getting-started.js\r\n\r\n------------\r\n路由\r\n```php\r\nRoute::post(\'uploader/webuploader\',\'Admin\\UploaderController@webuploader\') -> name(\'webuploader\');\r\n```\r\n控制器 UploaderController.php\r\n```php\r\nclass UploaderController extends Controller {\r\n  // 文件上传到本项目服务器\r\n  public function webuploader(Request $request)\r\n  {   // 先判断文件是否存在、及上传的文件是否有效\r\n    if ($request->hasFile(\'file\') && $request->file(\'file\')->isValid()) {\r\n      // 上传成功处理\r\n      $filename = sha1(time() . rand(100000, 999999)) . \'.\' . $request->file(\'file\')->getClientOriginalExtension();\r\n      $result = Storage::disk(\'public\') -> put($filename,file_get_contents($request -> file ->path()));\r\n      if($result) {\r\n        $response = [\'code\' => \'0\', \'msg\' => \'上传成功！\',\'filepath\' => \'/storage/\'.$filename];\r\n      } else {\r\n        // 上传失败\r\n        $response = [\'code\' => \'1\', \'msg\' => $request -> file -> getErrorMessage()];\r\n      }\r\n    } else {\r\n      // 非法上传\r\n      $response = [\'code\' => \'2\', \'msg\' > \'非法上传文件！\'];\r\n    }\r\n    return response()->json($response);\r\n  }\r\n}\r\n```\r\nHTML部分\r\n```php\r\n<div id=\"uploader-demo\">\r\n    <!--用来存放item-->\r\n    <div id=\"fileList\" class=\"uploader-list\"></div>\r\n    <div id=\"filePicker\">选择图片</div>\r\n</div>\r\n```\r\nJS部分\r\n```php\r\n$(function() {\r\n    // 图示上传\r\n    var $ = jQuery,\r\n    $list = $(\'#fileList\'),\r\n    // 优化retina, 在retina下这个值是2\r\n    ratio = window.devicePixelRatio || 1,\r\n    // 缩略图大小\r\n    thumbnailWidth = 100 * ratio,\r\n    thumbnailHeight = 100 * ratio,\r\n    // Web Uploader实例\r\n    uploader;\r\n    // 初始化Web Uploader\r\n    uploader = WebUploader.create({\r\n        // 自定义参数\r\n        formData: {_token: \"{ {csrf_token()} }\"},\r\n        // 自动上传。\r\n        auto: true,\r\n        // swf文件路径\r\n        swf: \'/admin/webuploader-0.1.5/Uploader.swf\',\r\n        // 文件接收服务端。\r\n        server: \"{ {route(\'webuploader\')} }\",\r\n        // 选择文件的按钮。可选。\r\n        // 内部根据当前运行是创建，可能是input元素，也可能是flash.\r\n        pick: \'#filePicker\',\r\n        // 只允许选择文件，可选。\r\n        accept: {\r\n            title: \'Images\',\r\n            extensions: \'gif,jpg,jpeg,bmp,png\',\r\n            mimeTypes: \'image/*\'\r\n        }\r\n    });\r\n    // 当有文件添加进来的时候\r\n    uploader.on( \'fileQueued\', function( file ) {\r\n        var $li = $(\r\n                \'<div id=\"\' + file.id + \'\" class=\"file-item thumbnail\">\' +\r\n                    \'<img>\' +\r\n                    \'<div class=\"info\">\' + file.name + \'</div>\' +\r\n                \'</div>\'\r\n                ),\r\n            $img = $li.find(\'img\');        \r\n        $(\'.thumbnail\').remove(); // 删除之前上传的图片预览\r\n        $list.append( $li );\r\n        // 创建缩略图\r\n        uploader.makeThumb( file, function( error, src ) {\r\n            if ( error ) {\r\n                $img.replaceWith(\'<span>不能预览</span>\');\r\n                return;\r\n            }\r\n            $img.attr( \'src\', src );\r\n        }, thumbnailWidth, thumbnailHeight );\r\n    });\r\n    // 文件上传过程中创建进度条实时显示。\r\n    uploader.on( \'uploadProgress\', function( file, percentage ) {\r\n        var $li = $( \'#\'+file.id ),\r\n            $percent = $li.find(\'.progress span\');\r\n        // 避免重复创建\r\n        if ( !$percent.length ) {\r\n            $percent = $(\'<p class=\"progress\"><span></span></p>\')\r\n                    .appendTo( $li )\r\n                    .find(\'span\');\r\n        }\r\n        $percent.css( \'width\', percentage * 100 + \'%\' );\r\n    });\r\n    // 文件上传成功，给item添加成功class, 用样式标记上传成功。第二个参数才是ajax返回值\r\n    uploader.on( \'uploadSuccess\', function( file, res ) {\r\n        $( \'#\'+file.id ).addClass(\'upload-state-done\');\r\n        // 把上传成功后的图片地址，存入隐藏域中\r\n        if(res.code == \'0\') {\r\n            layer.msg(res.msg, {icon:1,time:1500});\r\n            $(\'#avatar\').val(res.filepath);\r\n        } else {\r\n            layer.msg(res.msg, {icon:2,time:2500});\r\n        }\r\n    });\r\n    // 文件上传失败，现实上传出错。\r\n    uploader.on( \'uploadError\', function( file ) {\r\n        var $li = $( \'#\'+file.id ),\r\n            $error = $li.find(\'div.error\');\r\n        // 避免重复创建\r\n        if ( !$error.length ) {\r\n            $error = $(\'<div class=\"error\"></div>\').appendTo( $li );\r\n        }\r\n        $error.text(\'上传失败\');\r\n    });\r\n    // 完成上传完了，成功或者失败，先删除进度条。\r\n    uploader.on( \'uploadComplete\', function( file ) {\r\n        $( \'#\'+file.id ).find(\'.progress\').remove();\r\n    });\r\n});\r\n```',5,100,'2019-02-21 01:58:08','2019-02-21 01:58:08'),(54,'### 异步上传头像到七牛云\r\n官网：https://www.qiniu.com\r\n【安装及使用】七牛插件：https://github.com/zgldh/qiniu-laravel-storage\r\n```php\r\ncomposer require zgldh/qiniu-laravel-storage\r\n```\r\n```php\r\nconfig/app.php 里面的 providers 数组， 加上一行\r\nzgldh\\QiniuStorage\\QiniuFilesystemServiceProvider::class\r\n```\r\n```php\r\n// 七牛的相关方法\r\n$disk = \\Storage::disk(\'qiniu\');\r\n$disk->exists(\'file.jpg\');                      //文件是否存在\r\n$disk->get(\'file.jpg\');                         //获取文件内容\r\n$disk->put(\'file.jpg\',$contents);               //上传文件\r\n$disk->put(\'file.jpg\',fopen(\'path/to/big.jpg\',\'r+\')); //分段上传文件。建议大文件>10Mb使用。\r\n$disk->url(\'a.png\');                            //返回文件的URL\r\n$disk->getDriver()->downloadUrl(\'file.jpg\');    //获取下载地址\r\n```\r\nconfig/filesystem.php 里面的 disks数组加上：\r\n```php\r\n\'disks\' => [\r\n  \'qiniu\' => [\r\n    \'driver\'  => \'qiniu\',\r\n    \'domains\' => [\r\n      \'default\'   => \'piuiogk6o.bkt.clouddn.com\', //你的七牛域名\r\n      \'https\'     => \'\',         //你的HTTPS域名\r\n      \'custom\'    => \'\',                //Useless 没啥用，请直接使用上面的 default 项\r\n    ],\r\n    \'access_key\'=> \'OAcMvvROh0M5fvqXfld0AzgL4fmyjUJW-Lc5qm7F\',  //AccessKey\r\n    \'secret_key\'=> \'xxxxx\',  //SecretKey\r\n    \'bucket\'    => \'xxxxx\',  //Bucket名字，就是存储空间名\r\n    \'notify_url\'=> \'\',  //持久化处理回调地址\r\n    \'access\'    => \'public\',  //空间访问控制 public 或 private\r\n    //\'hotlink_prevention_key\' => \'afc89ff8bd2axxxxxxxxxxxxxxbb\', // CDN 时间戳防盗链的 key。 设置为 null 则不启用本功能。\r\n    //\'hotlink_prevention_key\' => \'cbab68a279xxxxxxxxxxab509a\', // 同上，备用\r\n  ],\r\n],\r\n```\r\n路由\r\n```php\r\nRoute::post(\'uploader/qiniu\',\'Admin\\UploaderController@qiniu\') -> name(\'qiniu\');\r\n```\r\n控制器 UploaderController.php\r\n```php\r\nclass UploaderController extends Controller {\r\n  // 文件上传到七牛云服务器\r\n  public function qiniu(Request $request)\r\n  {   // 先判断文件是否存在、及上传的文件是否有效\r\n    if ($request->hasFile(\'file\') && $request->file(\'file\')->isValid()) {\r\n      // 上传成功处理\r\n      $filename = sha1(time() . rand(100000, 999999)) . \'.\' . $request->file(\'file\')->getClientOriginalExtension();\r\n      $disk = Storage::disk(\'qiniu\');\r\n      $result = $disk -> put($filename,file_get_contents($request -> file ->path()));\r\n      if($result) {\r\n        $response = [\'code\' => \'0\', \'msg\' => \'上传成功！\',\'filepath\' => $disk->getDriver()->downloadUrl($filename)];\r\n      } else {\r\n        // 上传失败\r\n        $response = [\'code\' => \'1\', \'msg\' => $request -> file -> getErrorMessage()];\r\n      }\r\n    } else {\r\n      // 非法上传\r\n      $response = [\'code\' => \'2\', \'msg\' > \'非法上传文件！\'];\r\n    }\r\n    return response()->json($response);\r\n  }\r\n}\r\n```',5,100,'2019-02-21 02:10:11','2019-02-21 02:10:11'),(55,'## 专业分类/专业管理\r\n### 数据表（迁移文件）\r\n```php\r\nphp artisan make:migration create_protype_table  // 分类表\r\nphp artisan make:migration create_profession_table  // 专业表\r\n```\r\n```php\r\n// 建立分类表\r\nSchema::create(\'protype\' ,function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'protype_name\',20) -> notnull() -> comment(\'分类名称\');\r\n  $table -> tinyInteger(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n  $table -> timestamps();\r\n  $table -> enum(\'status\', [1,2]) -> notnull() -> default(2) -> comment(\'状态：1=禁用，2=启用\');\r\n});\r\n```\r\n```sql\r\n// 分类表sql\r\nCREATE TABLE `protype` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `protype_name` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'分类名称\',\r\n  `sort` tinyint(4) NOT NULL DEFAULT \'50\' COMMENT \'排序\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'状态：1=禁用，2=启用\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n```php\r\n// 建 专业 表\r\nSchema::create(\'profession\', function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'pro_name\',20) -> notnull() -> comment(\'专业名称\');\r\n  $table -> tinyInteger(\'protype_id\') -> notnull() -> comment(\'专业分类id\');\r\n  $table -> string(\'teachers_ids\') -> notnull() -> comment(\'授课老师id集合\');\r\n  $table -> string(\'description\') -> nullable() -> comment(\'专业名称\');\r\n  $table -> string(\'cover_img\') -> nullable() -> comment(\'封面地址\');\r\n  $table -> integer(\'view_count\') -> notnull() -> default(500) -> comment(\'点击量\');\r\n  $table -> timestamps();\r\n  $table -> tinyInteger(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n  $table -> tinyInteger(\'duration\') -> nullable() -> comment(\'课时，单位小时\');\r\n  $table -> decimal(\'price\',7,2) -> nullable() -> comment(\'价格\');\r\n});\r\n```\r\n```sql\r\n// 专业表sql\r\nCREATE TABLE `profession` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `pro_name` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'专业名称\',\r\n  `protype_id` tinyint(4) NOT NULL COMMENT \'专业分类id\',\r\n  `teachers_ids` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'授课老师id集合\',\r\n  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'专业名称\',\r\n  `cover_img` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'封面地址\',\r\n  `view_count` int(11) NOT NULL DEFAULT \'500\' COMMENT \'点击量\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `sort` tinyint(4) NOT NULL DEFAULT \'50\' COMMENT \'排序\',\r\n  `duration` tinyint(4) DEFAULT NULL COMMENT \'课时，单位小时\',\r\n  `price` decimal(7,2) DEFAULT NULL COMMENT \'价格\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n### 填充文件\r\n```php\r\nphp artisan make:seed ProtypeAndProfessionTableSeeder\r\n```\r\n```php\r\npublic function run() {\r\n  // 模拟专业分类的数据\r\n  $protype = [\r\n    [\'protype_name\' => \'前端\', \'sort\' => 128, \'created_at\' => date(\'Y-m-d H:i:s\'), \'status\' => 2 ],\r\n    [\'protype_name\' => \'后端\', \'sort\' => 126, \'created_at\' => date(\'Y-m-d H:i:s\'), \'status\' => 2 ],\r\n    [\'protype_name\' => \'运维\', \'sort\' => 100, \'created_at\' => date(\'Y-m-d H:i:s\'), \'status\' => 2 ],\r\n  ];\r\n  // 模拟专业的数据\r\n  $profession = [\r\n    [\r\n      \'pro_name\'       => \'php基础班\',\r\n      \'protype_id\'     => 2,\r\n      \'teachers_ids\'   => \'10,13,15,17\',\r\n      \'created_at\'     => date(\'Y-m-d H:i:s\'),\r\n      \'duration\'       => 18,\r\n      \'cover_img\'      => \'/static/demo.jpg\',\r\n      \'price\'          => \'100.00\'\r\n    ],\r\n    [\r\n      \'pro_name\'       => \'php就业班\',\r\n      \'protype_id\'     => 2,\r\n      \'teachers_ids\'   => \'10,13,15,17\',\r\n      \'created_at\'     => date(\'Y-m-d H:i:s\'),\r\n      \'duration\'       => 98,\r\n      \'cover_img\'      => \'/static/demo.jpg\',\r\n      \'price\'          => \'100.00\'\r\n    ],\r\n    [\r\n      \'pro_name\'       => \'前端基础班\',\r\n      \'protype_id\'     => 1,\r\n      \'teachers_ids\'   => \'18,19,20,21\',\r\n      \'created_at\'     => date(\'Y-m-d H:i:s\'),\r\n      \'duration\'       => 90,\r\n      \'cover_img\'      => \'/static/demo.jpg\',\r\n      \'price\'          => \'100.00\'\r\n    ]\r\n  ];\r\n  DB::table(\'protype\') -> insert($protype);\r\n  DB::table(\'profession\') -> insert($profession);\r\n}\r\n```\r\n```php\r\nphp artisan db:seed --class=ProtypeAndProfessionTableSeeder\r\n```\r\n路由/控制器/模型/视图\r\n路由\r\n```php\r\n// 专业管理\r\nRoute::get(\'protype/index\',\'Admin\\ProtypeController@index\') -> name(\'protype_index\');\r\nRoute::get(\'profession/index\',\'Admin\\ProfessionController@index\') -> name(\'profession_index\');\r\n```\r\n控制器 & 模型\r\n```php\r\nphp artisan make:controller Admin/ProtypeController\r\nphp artisan make:controller admin/ProfessionController\r\nphp artisan make:model Models/Protype\r\nphp artisan make:model Models/Profession\r\n```\r\n```php\r\nclass ProfessionController extends Controller {\r\n    public function index() {\r\n        $data = Profession::orderBy(\'sort\',\'desc\') -> get();\r\n        return view(\'admin.profession.index\',compact(\'data\'));\r\n    }\r\n}\r\n```\r\n```php\r\nclass ProtypeController extends Controller {\r\n    public function index() {\r\n        $data = Protype::orderBy(\'sort\',\'desc\') -> get();\r\n        return view(\'admin.protype.index\',compact(\'data\'));\r\n    }\r\n}\r\n```\r\n```php\r\n// 专业表模型\r\nclass Profession extends Model {\r\n    protected $table = \'profession\';\r\n    // 关联专业分类表\r\n    public function rel_protype() {\r\n      	// 用【一对一】关系进行关联：一个专业有一个分类\r\n        // return $this -> hasOne(\'App\\Models\\Protype\',\'id\',\'protype_id\');\r\n        // 或者用【反向一对多】关系进行关系：多个专业属于一个分类(一个分类有多个专业)\r\n        return $this -> belongsTo(\'App\\Models\\Protype\',\'protype_id\',\'id\');\r\n    }\r\n}\r\n```',5,100,'2019-02-21 02:39:18','2019-02-21 02:39:18'),(56,'## 课程与点播课程管理\r\n### 数据表（迁移文件）(课程)\r\n```php\r\nphp artisan make:migration create_course_table // 课程表\r\nphp artisan make:migration create_lesson_table // 点播表\r\n```\r\n```php\r\nSchema::create(\'course\', function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'course_name\',30) -> notnull() -> comment(\'课程名称\');\r\n  $table -> integer(\'profession_id\') -> notnull() -> comment(\'专业id\'); // integer不写长度时，默认11\r\n  $table -> string(\'cover_img\') -> nullable() -> comment(\'封面图片地址\'); // string不写长度时，默认255\r\n  $table -> integer(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n  $table -> string(\'description\') -> nullable();\r\n  $table -> timestamps();\r\n  $table -> enum(\'status\',[1,2]) -> notnull() -> default(2) -> comment(\'状态：1=禁用，2=启用\');\r\n});\r\n```\r\n```php\r\nCREATE TABLE `course` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `course_name` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'课程名称\',\r\n  `profession_id` int(11) NOT NULL COMMENT \'专业id\',\r\n  `cover_img` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'封面图片地址\',\r\n  `sort` int(11) NOT NULL COMMENT \'排序\',\r\n  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'状态：1=禁用，2=启用\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n```php\r\nSchema::create(\'lesson\', function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'lesson_name\',50) -> notnull() -> comment(\'点播课程名称\');\r\n  $table -> integer(\'course_id\') -> notnull() -> comment(\'所属课程id\');\r\n  $table -> integer(\'video_time\') -> notnull() -> comment(\'视频时长，单位秒\');\r\n  $table -> string(\'video_addr\') -> notnull() -> comment(\'视频地址\');\r\n  $table -> integer(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n  $table -> string(\'description\') -> notnull() -> comment(\'点播视频描述\');\r\n  $table -> timestamps();\r\n  $table -> enum(\'status\', [1,2]) -> notnull() -> default(2) -> comment(\'状态：1=禁用，2=启用\');\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `lesson` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `lesson_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'点播课程名称\',\r\n  `course_id` int(11) NOT NULL COMMENT \'所属课程id\',\r\n  `video_time` int(11) NOT NULL COMMENT \'视频时长，单位秒\',\r\n  `video_addr` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'视频地址\',\r\n  `sort` int(11) NOT NULL DEFAULT \'50\' COMMENT \'排序\',\r\n  `description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'点播视频描述\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'状态：1=禁用，2=启用\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n### 填充文件 (课程)\r\n```php\r\nphp artisan make:seeder CourseAndLsessonTableSeeder\r\n```\r\n```php\r\npublic function run() {\r\n    $course = [\r\n		[\'course_name\'=>\'linux\',\'profession_id\'=>\'2\',\'cover_img\'=>\'/static/demo.jpg\',\'created_at\'=>date(\'Y-m-d H:i:s\')], \r\n		[\'course_name\'=>\'JQuery\',\'profession_id\'=>\'2\',\'cover_img\'=>\'/static/demo.jpg\',\'created_at\'=>date(\'Y-m-d H:i:s\')],\r\n		[\'course_name\'=>\'ThinkPHP\',\'profession_id\'=>\'2\',\'cover_img\'=>\'/static/demo.jpg\',\'created_at\'=>date(\'Y-m-d H:i:s\')],\r\n		[\'course_name\'=>\'Laravel\',\'profession_id\'=>\'2\',\'cover_img\'=>\'/static/demo.jpg\',\'created_at\'=>date(\'Y-m-d H:i:s\')]\r\n  ];\r\n  $lesson = [\r\n      [\'lesson_name\'=>\'linux发展史\',\'course_id\'=>\'1\',\'video_addr\'=>\'/static/demo.mp4\',\'created_at\'=>date(\'Y-m-d H:i:s\'),\'video_time\'=>86400],\r\n	  [\'lesson_name\'=>\'虚拟机安装\',\'course_id\'=>\'1\',\'video_addr\'=>\'/static/demo.mp4\',\'created_at\'=>date(\'Y-m-d H:i:s\'),\'video_time\'=>86400]\r\n	  [\'lesson_name\'=>\'jQuery事件编程\',\'course_id\'=>\'2\',\'video_addr\'=>\'/static/demo.mp4\',\'created_at\'=>date(\'Y-m-d H:i:s\'),\'video_time\'=>86400],\r\n	  [\'lesson_name\'=>\'九大选择器\',\'course_id\'=>\'2\',\'video_addr\'=>\'/static/demo.mp4\',\'created_at\'=>date(\'Y-m-d H:i:s\'),\'video_time\'=>86400],\r\n  ];\r\n  DB::table(\'course\')->insert($course);\r\n  DB::table(\'lesson\')->insert($lesson);\r\n}\r\n```\r\n### 路由/控制器/模型/视图 (课程)\r\n路由\r\n```php\r\n// 课程与点播\r\nRoute::get(\'course/index\',\'Admin\\CourseController@index\') -> name(\'course_index\');\r\nRoute::get(\'lesson/index\',\'Admin\\LessonController@index\') -> name(\'lesson_index\');\r\nRoute::get(\'lesson/play\',\'Admin\\LessonController@play\') -> name(\'lesson_play\');\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Admin/CourseController\r\nphp artisan make:controller admin/LessonController\r\nphp artisan make:model Models/Course\r\nphp artisan make:model Models/Lesson\r\n```\r\n```php\r\nclass CourseController extends Controller {\r\n  public function index() {\r\n    $data = Course::orderBy(\'sort\',\'desc\') -> get();\r\n    return view(\'admin.course.index\',compact(\'data\'));\r\n  }\r\n}\r\n```\r\n```php\r\nclass LessonController extends Controller {\r\n  public function index() {\r\n    $data = Lesson::orderBy(\'sort\',\'desc\') -> get();\r\n    return view(\'admin.lesson.index\',compact(\'data\'));\r\n  }\r\n\r\n  public function play(Request $request) {\r\n    $id = $request -> get(\'id\');\r\n    $path = Lesson::find($id) -> value(\'video_addr\');\r\n    if($path) {\r\n      // 播放 h5直接播放视频\r\n      return \"<video src=\'$path\' controls=\'controls\' width=\'98%\'></video>\";\r\n    } else {\r\n      return response() -> json([\'err\'=>\'1\',\'msg\'=>\'找不到视频\']);\r\n    }\r\n  }\r\n}\r\n```\r\n模型\r\n```php\r\nclass Course extends Model {\r\n  protected $table = \'course\';\r\n  public function rel_profession() {\r\n    // 一个课程有一个专业\r\n    // return $this -> hasOne(\'App\\Models\\Profession\',\'id\',\'profession_id\');\r\n    // 或者：多个课程属于一个专业\r\n    return $this -> BelongsTo(\'App\\Models\\Profession\',\'profession_id\',\'id\');\r\n  }\r\n}\r\n```\r\n```php\r\nclass Lesson extends Model {\r\n  protected $table = \'lesson\';\r\n  public function rel_course() {\r\n    // 一个点播有一个课程\r\n    // return $this -> hasOne(\'App\\Models\\Course\',\'id\',\'course_id\');\r\n    // 或者：多个点播属于一个课程\r\n    return $this -> BelongsTo(\'App\\Models\\Course\',\'course_id\',\'id\');\r\n  }\r\n}\r\n```\r\n视图：views/lesson/index.blade.php\r\n```php\r\n<a href=\"javascript:;\" onclick=\"play(\'{ { $val -> lesson_name } }\',\'{ {route(\'lesson_play\')} }\',\'{ { $val -> id } }\',\'800\',\'500\')\" class=\"btn btn-primary radius\"><i class=\"Hui-iconfont\"></i>  播放</a>\r\n<script>\r\nfunction play(title,url,id,w,h) {\r\n	layer_show(title,url+\'?id=\'+id,w,h);\r\n}\r\n</script>\r\n```',5,100,'2019-02-21 02:47:22','2019-02-21 02:57:31'),(57,'## 试卷与试题管理\r\n### 数据表(迁移文件) (试卷)\r\n```php\r\nphp artisan make:migration create_paper_table  // 试卷表\r\nphp artisan make:migration create_question_table  // 答题表\r\nphp artisan make:migration create_sheet_table // 答卷表\r\n```\r\n```php\r\n// 试卷表\r\nSchema::create(\'paper\',function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'paper_name\',50) -> notnull() -> comment(\'试卷名称\');\r\n  $table -> tinyInteger(\'course_id\') -> notnull() -> comment(\'课程id\');\r\n  $table -> tinyInteger(\'score\') -> notnull() -> default(100) -> comment(\'总分\');\r\n  $table -> timestamps();\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `paper` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `paper_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'试卷名称\',\r\n  `course_id` tinyint(4) NOT NULL COMMENT \'课程id\',\r\n  `score` tinyint(4) NOT NULL COMMENT \'总分\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n```php\r\n// 题目表\r\nSchema::create(\'question\', function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'question\') -> notnull() -> comment(\'题干\');\r\n  $table -> integer(\'paper_id\') -> notnull() -> comment(\'试卷id\');\r\n  $table -> tinyInteger(\'score\') -> notnull() -> comment(\'题目分值\');\r\n  $table -> string(\'options\') -> notnull() -> comment(\'选项\');\r\n  $table -> string(\'answer\',1) -> notnull() -> comment(\'正确答案\');\r\n  $table -> string(\'remark\') -> nullable() -> comment(\'备注\');\r\n  $table -> timestamps();\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `question` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `question` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'题干\',\r\n  `paper_id` int(11) NOT NULL COMMENT \'试卷id\',\r\n  `score` tinyint(4) NOT NULL COMMENT \'题目分值\',\r\n  `options` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'选项\',\r\n  `answer` varchar(1) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'正确答案\',\r\n  `remark` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'备注\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n```php\r\n// 答卷表\r\nSchema::create(\'sheet\',function(Blueprint $table){\r\n  $table -> increments(\'id\');\r\n  $table -> smallInteger(\'paper_id\') -> notnull() -> comment(\'试卷id\');\r\n  $table -> smallInteger(\'question_id\') -> notnull() -> comment(\'题目id\');\r\n  $table -> mediumInteger(\'member_id\') -> notnull() -> comment(\'会员id\');\r\n  $table -> enum(\'is_correct\',[1,2]) -> notnull() -> default(2) -> comment(\'是否正确：1=正确，2=错误\');\r\n  $table -> tinyInteger(\'score\') -> notnull() -> default(0) -> comment(\'得分\');\r\n  $table -> string(\'answer\',1) -> nullable() -> comment(\'用户答案\');\r\n  $table -> timestamps();\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `sheet` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `paper_id` smallint(6) NOT NULL COMMENT \'试卷id\',\r\n  `question_id` smallint(6) NOT NULL COMMENT \'题目id\',\r\n  `member_id` mediumint(9) NOT NULL COMMENT \'会员id\',\r\n  `is_correct` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'2\' COMMENT \'是否正确：1=正确，2=错误\',\r\n  `score` tinyint(4) NOT NULL DEFAULT \'0\' COMMENT \'得分\',\r\n  `answer` varchar(1) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'用户答案\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n### 填充文件 (试卷)\r\n```php\r\nphp artisan make:seeder PaperAndQuestionTableSeeder\r\n```\r\n```php\r\npublic function run() {\r\n  $paper = [\r\n    [\'paper_name\'=>\'ThinkPHP电子商城考试\',\'course_id\'=>\'3\',\'created_at\'=>date(\'Y-m-d H:i:s\')],\r\n    [\'paper_name\'=>\'jQuery阶段考试\',\'course_id\'=>\'2\',\'created_at\'=>date(\'Y-m-d H:i:s\')],\r\n    [\'paper_name\'=>\'linux阶段考试\',\'course_id\'=>\'1\',\'created_at\'=>date(\'Y-m-d H:i:s\')],\r\n    [\'paper_name\'=>\'laravel阶段考试\',\'course_id\'=>\'4\',\'created_at\'=>date(\'Y-m-d H:i:s\')]\r\n  ];\r\n  $question = [\r\n    [\r\n      \'question\'	=>	\'下列关于购物车说法错误的是？\',\r\n      \'paper_id\'	=>	1,\r\n      \'options\'	=>	\'A.购物车的本质就是有一个存储数据的载体~B.购物车的数据是可以被读取的~C.购物车的数据是可以被编辑和删除的~D.购物车只能在登录之后使用\',\r\n      \'answer\'	=>	\'D\',\r\n      \'created_at\'=>	date(\'Y-m-d H:i:s\')\r\n    ],\r\n    [\r\n      \'question\'	=>	\'支付宝接口申请不需要什么材料？\',\r\n      \'paper_id\'	=>	1,\r\n      \'options\'	=>	\'A.出身证~B.身份证~C.手机号~D.营业执照\',\r\n      \'answer\'	=>	\'A\',\r\n      \'created_at\'=>	date(\'Y-m-d H:i:s\')\r\n    ],\r\n    [\r\n      \'question\'	=>	\'如果想用navicat将sql代码在远程服务器上执行，则必须要保证远程服务器的用户表中的host字段至少有一个为？\',\r\n      \'paper_id\'	=>	1,\r\n      \'options\'	=>	\'A.%~B.::1~C.localhost~D.127.0.0.1\',\r\n      \'answer\'	=>	\'A\',\r\n      \'created_at\'=>	date(\'Y-m-d H:i:s\')\r\n    ]\r\n  ];\r\n  DB::table(\'paper\') -> insert($paper);\r\n  DB::table(\'question\') -> insert($question);\r\n}\r\n```\r\n```php\r\nphp artisan db:seed --class=PaperAndQuestionTableSeeder\r\n```\r\n### 路由/控制器/模型/视图 (试卷)\r\n路由\r\n```php\r\n// 试卷和试题\r\nRoute::get(\'paper/index\',\'Admin\\PaperController@index\') -> name(\'paper_index\');\r\nRoute::get(\'question/index\',\'Admin\\QuestionController@index\') -> name(\'question_index\');\r\nRoute::get(\'question/export\',\'Admin\\QuestionController@export\') -> name(\'question_export\');\r\nRoute::any(\'question/import\',\'Admin\\QuestionController@import\') -> name(\'question_import\');\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Admin/PaperController\r\nphp artisan make:controller Admin/QuestionController\r\nphp artisan make:model Models/Paper\r\nphp artisan make:model Models/Question\r\n```\r\n模型\r\n```php\r\nclass Paper extends Model {\r\n  protected $table = \'paper\';\r\n  public function rel_course() {\r\n    // return $this -> hasOne(\'App\\Models\\Course\',\'id\',\'course_id\');\r\n    return $this -> belongsTo(\'App\\Models\\Course\',\'course_id\',\'id\');\r\n  }\r\n}\r\n```\r\n```php\r\nclass Question extends Model {\r\n  protected $table = \'question\';\r\n  public function rel_paper() {\r\n    // return $this -> hasOne(\'App\\Models\\Paper\',\'id\',\'paper_id\');\r\n    return $this -> belongsTo(\'App\\Models\\Paper\',\'paper_id\',\'id\');\r\n  }\r\n}\r\n```\r\n视图：views/question/index.blade.php\r\n```php\r\n<td>\r\n  <a title=\"查看选项\" href=\"javascript:;\" onclick=\"show(\'{ {$val->options} }\')\" class=\"ml-5\" style=\"text-decoration:none\"><i class=\"Hui-iconfont\"></i> 查看选项</a>\r\n</td>\r\n<script>\r\n// 查看选项\r\nfunction show(options) {\r\n	layer.alert(options.replace(/~/g,\'<br/>\'),{title:\'试题选项\'});\r\n}\r\n</script>\r\n```',5,100,'2019-02-21 02:56:13','2019-02-21 02:56:52'),(58,'### 导出导入表格（Laravel-Excel）\r\n需要使用的插件：Laravel-Excel\r\n—— github官网：https://github.com/Maatwebsite/Laravel-Excel\r\n—— 安装：根据项目环境下载相应版本Laravel-Excel\r\n\r\n| Version | Laravel Version | Php Version | Support                      |\r\n| ------- | --------------- | ----------- | ---------------------------- |\r\n| 2.1     | <=5.6           | <=7.0       | Unsupported since 15-5-2018  |\r\n| 3.0     | ^5.5            | ^7.0        | Unsupported since 31-12-2018 |\r\n| 3.1     | ^5.5            | ^7.0        | New features                 |\r\n```php\r\ncomposer require maatwebsite/excel\r\ncomposer require \"maatwebsite/excel:~2.1.0\"\r\n```\r\nLaravel 5 中使用教程：https://laravelacademy.org/post/2024.html\r\n\r\n------------\r\n路由\r\n```php\r\nRoute::get(\'question/export\',\'Admin\\QuestionController@export\') -> name(\'question_export\');\r\nRoute::any(\'question/import\',\'Admin\\QuestionController@import\') -> name(\'question_import\');\r\n```\r\n导出视图部分：views/question/index.blade.php\r\n```php\r\nfunction question_export() {\r\n	// 直接跳转至导出页面（即文件输出页面）即可\r\n	location.href = \"{ {route(\'question_export\')} }\";\r\n}\r\n```\r\n控制器：QuestionController.php\r\n```php\r\nuse Excel;\r\nclass QuestionController extends Controller {\r\n  private $resonse; // 用于存放Excel类中执行的结果\r\n  public function index () {\r\n    $data = Question::get();\r\n    return view(\'admin.question.index\',compact(\'data\'));\r\n  }\r\n  // 导出试题\r\n  public function export(){\r\n    $data = Question::get();       \r\n    $cellData = [\r\n      [\'序号\',\'题干\',\'所属试卷\',\'分值\',\'选项\',\'答案\',\'加入时间\']           \r\n    ];\r\n    foreach($data as $key => $value) {\r\n      $cellData[] = [\r\n        $value -> id, $value -> question, $value -> rel_paper -> paper_name, $value -> score, $value -> options, $value -> answer, $value -> created_at\r\n      ];\r\n    }\r\n    // 由于$cellData是在外面定义的，函数中要使用时，需要use引入外部定义的变量\r\n    Excel::create(\'试题导出\',function($excel) use ($cellData){ \r\n      // sheet()创建一个工作表\r\n      $excel->sheet(\'题库\', function($sheet) use ($cellData){\r\n        // 把数据写入行\r\n        $sheet->rows($cellData);\r\n      });\r\n    })->export(\'xls\');\r\n  }\r\n  // 导入试题\r\n  public function import(Request $request) {\r\n    if($request->method() == \'POST\') {\r\n      // post 处理表格数据，提交模型存储\r\n      $post = $request -> all();            \r\n      $filePath = \'.\'.$post[\'excelpath\']; // 加一个\".\"后，变成\"./\"了（当前文件夹），相等于去掉了\"/\"\r\n      // load方法基于项目根路径作为根目录,所以$filePath前面不用\"/\"\r\n      // 对中文进行了转码，否则会提示文件不存在。\r\n      Excel::load($filePath, function($reader) use ($post) {\r\n        $data = $reader -> getSheet(0) -> toArray();\r\n        // dd($data);\r\n        $arr = [];\r\n        foreach ($data as $key => $value) {\r\n          if($key == 0) { // 跳过表头\r\n            continue;\r\n          }\r\n          $arr[] = [\r\n            \'question\' => $value[0],\r\n            \'paper_id\' => $post[\'paper_id\'],\r\n            \'options\'  => $value[1],\r\n            \'answer\'   => $value[2],\r\n            \'score\'    => (int)$value[3],\r\n            \'created_at\'   => date(\'Y-m-d H:i:s\')\r\n          ];\r\n        }\r\n        // 写入数据表表中\r\n        if(Question::insert($arr)) {\r\n          $this->resonse = [\'code\' => 0, \'msg\' => \'导入成功！\'];\r\n        } else {\r\n          $this->resonse = [\'code\' => 1, \'msg\' => \'导入失败！\'];\r\n        }\r\n        // 不在Excel中return是因为：Excel中return失效了\r\n      });\r\n      return response() -> json($this->resonse);\r\n    } else {\r\n      // get 展示导入表格面板\r\n      $paper = \\App\\Models\\Paper::select(\'id\',\'paper_name\') -> get();\r\n      return view(\'admin.question.import\',compact(\'paper\'));\r\n    }\r\n  } \r\n}\r\n```\r\n#### 导入表格之上传文件\r\n先上传表格：html部分\r\n```html\r\n<div id=\"uploader\" class=\"wu-example\">\r\n  <!--用来存放文件信息-->\r\n  <div id=\"thelist\" class=\"uploader-list\"></div>\r\n  <div class=\"btns\">\r\n    <div id=\"picker\">选择文件</div>\r\n    <button id=\"ctlBtn\" class=\"btn btn-default\">开始上传</button>\r\n  </div>\r\n</div>\r\n```\r\n先上传表格：js部分\r\n```javascript\r\n$(function() {\r\n  // start 文件上传开始\r\n  var $ = jQuery,\r\n      $list = $(\'#thelist\'),\r\n      $btn = $(\'#ctlBtn\'),\r\n      state = \'pending\',\r\n      uploader;\r\n  uploader = WebUploader.create({\r\n    // 自定义参数\r\n    formData: {_token: \"{ {csrf_token()} }\"},\r\n    // 不压缩image\r\n    resize: false,\r\n    // swf文件路径\r\n    swf: \'/admin/webuploader-0.1.5/Uploader.swf\',\r\n    // 文件接收服务端。\r\n    server: \'{ {route(\'webuploader\')} }\',\r\n    // 选择文件的按钮。可选。\r\n    // 内部根据当前运行是创建，可能是input元素，也可能是flash.\r\n    pick: \'#picker\'\r\n  });\r\n\r\n  // 当有文件添加进来的时候\r\n  uploader.on( \'fileQueued\', function( file ) {\r\n    $list.append( \'<div id=\"\' + file.id + \'\" class=\"item\">\' +\r\n                 \'<h4 class=\"info\">\' + file.name + \'</h4>\' +\r\n                 \'<p class=\"state\">等待上传...</p>\' +\r\n                 \'</div>\' );\r\n  });\r\n\r\n  // 文件上传过程中创建进度条实时显示。\r\n  uploader.on( \'uploadProgress\', function( file, percentage ) {\r\n    var $li = $( \'#\'+file.id ),\r\n        $percent = $li.find(\'.progress .progress-bar\');\r\n    // 避免重复创建\r\n    if ( !$percent.length ) {\r\n      $percent = $(\'<div class=\"progress progress-striped active\">\' +\r\n                   \'<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%\">\' +\r\n                   \'</div>\' +\r\n                   \'</div>\').appendTo( $li ).find(\'.progress-bar\');\r\n    }\r\n    $li.find(\'p.state\').text(\'上传中\');\r\n    $percent.css( \'width\', percentage * 100 + \'%\' );\r\n  });\r\n\r\n  uploader.on( \'uploadSuccess\', function( file , response ) {\r\n    $( \'#\'+file.id ).find(\'p.state\').text(\'已上传\');\r\n    $btn.remove(); // 上传成功后，删除按钮，避免反复点击与submit冲突\r\n    // 写入隐藏域，post提交时能带上隐藏域的值(文件路径)\r\n    if (response.code == \'0\') {\r\n      layer.msg(response.msg, {icon: 1, time: 1500});\r\n      $(\'#excelpath\').val(response.filepath);\r\n    } else {\r\n      layer.msg(response.msg, {icon: 1, time: 1500});\r\n    }\r\n  });\r\n\r\n  uploader.on( \'uploadError\', function( file ) {\r\n    $( \'#\'+file.id ).find(\'p.state\').text(\'上传出错\');\r\n  });\r\n\r\n  uploader.on( \'uploadComplete\', function( file ) {\r\n    $( \'#\'+file.id ).find(\'.progress\').fadeOut();\r\n  });\r\n\r\n  uploader.on( \'all\', function( type ) {\r\n    if ( type === \'startUpload\' ) {\r\n      state = \'uploading\';\r\n    } else if ( type === \'stopUpload\' ) {\r\n      state = \'paused\';\r\n    } else if ( type === \'uploadFinished\' ) {\r\n      state = \'done\';\r\n    }\r\n\r\n    if ( state === \'uploading\' ) {\r\n      $btn.text(\'暂停上传\');\r\n    } else {\r\n      $btn.text(\'开始上传\');\r\n    }\r\n  });\r\n\r\n  $btn.on( \'click\', function() {\r\n    if ( state === \'uploading\' ) {\r\n      uploader.stop();\r\n    } else {\r\n      uploader.upload();\r\n    }\r\n  });\r\n  // end 文件上传结束\r\n  });\r\n```',5,100,'2019-02-21 03:12:48','2019-02-21 03:12:48'),(59,'## 直播管理\r\n### 直播概述\r\n推流拉流：【1个直播】 —>RTMP推流 —> 【服务器】 —> 多路拉流观看 —> 【多个观众】\r\nRTMP：协议的一种，主要应用在流媒体中。RTMP（Real Time Message Protocol），实时消息协议。\r\n切片(切帧)：达到30帧/秒，人肉眼觉得不卡。\r\n### 直播域名备案\r\n直播域名需要2个备案：ICP证 、公网安备 （先办ICP证，再公安备案，2个办下来大约1个月时间 ）\r\n### 数据表 (迁移文件)  (直播)\r\n```php\r\nphp artisan make:migration create_stream_table\r\nphp artisan make:migration create_live_table\r\nphp artisan migrate\r\n```\r\n```php\r\nSchema::create(\'stream\', function(Blueprint $table) {\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'stream_name\',200) -> notnull() -> comment(\'直播流名称，即房间名\');\r\n  $table -> enum(\'status\',[1,2,3]) -> notnull() -> default(1) -> comment(\'禁播状态:1=不禁播，2=永久禁播，3=限时禁播\');\r\n  $table -> integer(\'permited_at\') -> notnull() -> default(0) -> comment(\'状态为3失，直播恢复时间\');\r\n  $table -> integer(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `stream` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `stream_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'直播流名称，即房间名\',\r\n  `status` enum(\'1\',\'2\',\'3\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'1\' COMMENT \'禁播状态:1=不禁播，2=永久禁播，3=限时禁播\',\r\n  `permited_at` int(11) NOT NULL DEFAULT \'0\' COMMENT \'状态为3失，直播恢复时间\',\r\n  `sort` int(11) NOT NULL DEFAULT \'50\' COMMENT \'排序\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n```php\r\nSchema::create(\'live\', function(Blueprint $table) {\r\n  $table -> increments(\'id\');\r\n  $table -> string(\'live_name\',50) -> notnull() -> unique() -> comment(\'直播课程名称\');\r\n  $table -> integer(\'profession_id\') -> notnull() -> comment(\'所属专业id\');\r\n  $table -> integer(\'stream_id\') -> notnull() -> comment(\'流id，即房间号\');\r\n  $table -> string(\'cover_img\') -> notnull() -> comment(\'封面\');\r\n  $table -> integer(\'sort\') -> notnull() -> default(50) -> comment(\'排序\');\r\n  $table -> string(\'description\') -> nullable() -> comment(\'描述\');\r\n  $table -> integer(\'begin_at\') -> notnull() -> comment(\'直播开始时间\');\r\n  $table -> integer(\'end_at\') -> notnull() -> comment(\'直播结束时间\');\r\n  $table -> string(\'video_addr\') -> nullable() -> comment(\'回看视频的地址\');\r\n  $table -> timestamps();\r\n  $table -> enum(\'status\',[1,2]) -> notnull() -> default(1) -> comment(\'直播课程状态，1=已启用，2=已禁用\');\r\n});\r\n```\r\n```sql\r\nCREATE TABLE `live` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `live_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'直播课程名称\',\r\n  `profession_id` int(11) NOT NULL COMMENT \'所属专业id\',\r\n  `stream_id` int(11) NOT NULL COMMENT \'流id，即房间号\',\r\n  `cover_img` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT \'封面\',\r\n  `sort` int(11) NOT NULL DEFAULT \'50\' COMMENT \'排序\',\r\n  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'描述\',\r\n  `begin_at` int(11) NOT NULL COMMENT \'直播开始时间\',\r\n  `end_at` int(11) NOT NULL COMMENT \'直播结束时间\',\r\n  `video_addr` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT \'回看视频的地址\',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  `status` enum(\'1\',\'2\') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT \'1\' COMMENT \'直播课程状态，1=已启用，2=已禁用\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `live_live_name_unique` (`live_name`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n### 填充文件 (直播)\r\n```php\r\nphp artisan make:seeder StreamAndLiveTableSeeder\r\nphp artisan db:seed --class=StreamAndLiveTableSeeder\r\n```\r\n```php\r\npublic function run() {\r\n  $stream = [\r\n    [\'stream_name\'=>\'sh09\',\'status\'=>\'2\',\'permited_at\'=>\'0\'],            \r\n    [\'stream_name\'=>\'test\',\'status\'=>\'3\',\'permited_at\'=>strtotime(\'2018-11-30 10:40\')],         \r\n    [\'stream_name\'=>\'sh10\',\'status\'=>\'1\',\'permited_at\'=>\'0\']    \r\n  ];\r\n  $live = [\r\n    [\r\n      \'live_name\' => \'php基础课程\',\r\n      \'profession_id\' => \'1\',\r\n      \'stream_id\' => \'3\',\r\n      \'cover_img\' => \'/static/demo.jpg\',\r\n      \'description\' => \'最全php基础知识直播课程，敬请期待！\',\r\n      \'begin_at\' => strtotime(date(\'2018-10-30 10:00:00\')),\r\n      \'end_at\'   => strtotime(date(\'2018-10-30 23:00:00\'))                \r\n    ],\r\n    [\r\n      \'live_name\' => \'php就业课程\',\r\n      \'profession_id\' => \'2\',\r\n      \'stream_id\' => \'3\',\r\n      \'cover_img\' => \'/static/demo.jpg\',\r\n      \'description\' => \'最全php就业课程直播课程，高薪之日可待，敬请期待！\',\r\n      \'begin_at\' => strtotime(date(\'2018-11-10 10:00:00\')),\r\n      \'end_at\'   => strtotime(date(\'2018-12-10 23:00:00\'))                \r\n    ]\r\n  ];\r\n  DB::table(\'stream\') -> insert($stream);\r\n  DB::table(\'live\') -> insert($live);\r\n}\r\n```\r\n### 路由/控制器/模型/视图 (直播)\r\n路由\r\n```php\r\n// 直播相关\r\nRoute::get(\'live/index\',\'Admin\\LiveController@index\') -> name(\'live_index\');\r\nRoute::get(\'stream/index\',\'Admin\\StreamController@index\') -> name(\'stream_index\');\r\nRoute::any(\'stream/add\',\'Admin\\StreamController@add\') -> name(\'stream_add\');\r\n```\r\n模型\r\n```php\r\nphp artisan make:model  Models/Stream\r\nphp artisan make:model  Models/Live\r\n```\r\n```php\r\nclass Live extends Model{\r\n  protected $table = \'live\';\r\n  public function rel_profession() {\r\n    // return $this -> hasOne(\'App\\Model\\Profession\',\'id\',\'profession_id\');\r\n    return $this -> belongsTo(\'App\\Models\\Profession\',\'profession_id\',\'id\');\r\n  }\r\n  public function rel_stream() {\r\n    // return $this -> hasOne(\'App\\Models\\Stream\',\'id\',\'stream_id\');\r\n    return $this -> belongsTo(\'App\\Models\\Stream\',\'stream_id\',\'id\');\r\n  }\r\n}\r\n```\r\n```php\r\nclass Stream extends Model {\r\n  protected $table = \'stream\';    \r\n}\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller	 Admin/StreamController\r\nphp artisan make:controller	 Admin/LiveController\r\n```\r\n```php\r\n// StreamController.php 流控制器\r\n// 1.0 Guzzle请求，第一步先引入\r\nuse GuzzleHttp\\Client;\r\nclass StreamController extends Controller {\r\n  // 直播流（房间）列表\r\n  public function index() {\r\n    $data = Stream::orderBy(\'sort\',\'desc\') -> get();\r\n    return view(\'admin.stream.index\',compact(\'data\'));\r\n  }\r\n  // 添加直播流（房间）\r\n  public function add(Request $request) {\r\n    if ($request -> method() == \'POST\') {\r\n      // post 先获取post请求数据\r\n      $post = $request -> except([\'_token\']);\r\n\r\n      // 生成七牛token\r\n      $method = \"POST\";\r\n      $path = \"/v2/hubs/education-zet/streams\";\r\n      $host = \"pili.qiniupi.com\";\r\n      $contentType = \"application/json\";\r\n      $body = json_encode([\'key\' => $post[\'stream_name\']]); // 请求体\r\n      $data = \" $method $path\\nHost: $host\\nContent-Type: $contentType\\n\\n$body\";\r\n      // 实例化七牛SDK中的Auth类（vendor/qiniu/src/Auth.php)，参数为：七牛的AK、SK\r\n      // $auth = \\Qiniu\\Auth(\'bBOpNSfGr5G1b0IFDvF68L7Za35-PAVUliL4Zrkn\',\'AOlw43W9NjgzmNNAEoZrO1sMU5w6CGwn-7pyOekM\');\r\n      $auth = new \\Qiniu\\Auth(config(\'filesystems.disks.qiniu.access_key\'),config(\'filesystems.disks.qiniu.secret_key\'));\r\n      $qiniuToken = \'Qiniu \' . $auth -> sign($data);        \r\n\r\n      // 2.0 Guzzle请求，第二步实例化Guzzle对象\r\n      $client = new Client([\r\n        // Base URI is used with relative requests（基础地址用于相对路径请求）\r\n        \'base_uri\' => \'http://\' . $host,\r\n        // You can set any number of default request options.单位秒\r\n        // \'timeout\'  => 5.0, // 不设置超时\r\n      ]);\r\n      // 3.0 使用Guzzle对象，向七牛云发送请求，在七牛云服务器上【创建流】，传并用变量接收\r\n      $res = $client -> post($path, [\r\n        // 请求头和请求体\r\n        \'header\' => [\r\n          \'Authorization\' => $qiniuToken,\r\n          \'Content-Type\'  => $contentType\r\n        ],\r\n        \'body\'  => $body\r\n      ]);\r\n      // 4.0 判断Guzzle请求是否成功\r\n      if($res -> getStatusCode() == \'200\') {\r\n        // 请求成功\r\n        // 在七牛服务商创建流成功后，再才提交表单数据入库        \r\n        $post[\'permited_at\'] = strtotime($post[\'permited_at\'])?strtotime($post[\'permited_at\']):\'0\';\r\n        if(Stream::insert($post)){\r\n          // 流入库成功\r\n          $response = [\'code\' => 0 , \'msg\' => \'添加流成功！\'];\r\n        } else {\r\n          // 流入库失败\r\n          $response = [\'code\' => 1 , \'msg\' => \'添加流失败！\'];\r\n        }\r\n      } else {\r\n        $response = [\'code\' => 2, \'msg\' => \'调用七牛云接口失败！\'];\r\n      }\r\n      // 最后返回结果          \r\n      return response() -> json($response);\r\n    } else {\r\n      // get 获取提交面板\r\n      return view(\'admin.stream.add\');\r\n    }\r\n  }\r\n}\r\n```',5,100,'2019-02-21 03:20:30','2019-02-21 03:20:30'),(60,'### 用guzzleHttp发送请求\r\nguzzleHttp其底层用的是curl\r\n用guzzleHttp时，请确保开通php的curl扩展\r\n下载安装说明：https://packagist.org/packages/guzzlehttp/guzzle\r\n```php\r\ncomposer require guzzlehttp/guzzle\r\n```\r\n使用参考文档（v6版本的，因为下载的是v6.3）：http://guzzle.readthedocs.org/en/latest/\r\n```php\r\n// 1.0 第一步先引入\r\nuse GuzzleHttp\\Client;\r\n// 2.0 第二步实例化\r\n$client = new Client([\r\n    // Base URI is used with relative requests（基础地址用于相对路径请求）\r\n    \'base_uri\' => \'http://httpbin.org\',\r\n    // You can set any number of default request options.单位秒\r\n    \'timeout\'  => 2.0,\r\n]);\r\n// 3.0 使用Guzzle对象，向七牛云发送请求，在七牛云服务器上【创建流】，传并用变量接收\r\n$res = $client -> post($path, [\r\n  // 请求头和请求体\r\n  \'header\' => [\r\n    \'Authorization\' => $qiniuToken,\r\n    \'Content-Type\'  => $contentType\r\n  ],\r\n  \'body\'  => $body\r\n]);\r\n// 4.0 判断Guzzle请求是否成功\r\nif($res -> getStatusCode() == \'200\') {\r\n	// 请求成后，再做一下入库操作等。\r\n}\r\n```\r\nbase_uri 用来做相对请求，说明如下\r\n\r\n| base_uri（基础地址）        | URI（相对地址）        | Result（实际请求的路径）          |\r\n  | --------------------- | ---------------- | ------------------------ |\r\n  | `http://foo.com`      | `/bar`           | `http://foo.com/bar`     |\r\n  | `http://foo.com/foo`  | `/bar`           | `http://foo.com/bar`     |\r\n  | `http://foo.com/foo`  | `bar`            | `http://foo.com/bar`     |\r\n  | `http://foo.com/foo/` | `bar`            | `http://foo.com/foo/bar` |\r\n  | `http://foo.com`      | `http://baz.com` | `http://baz.com`         |\r\n  | `http://foo.com/?bar` | `bar`            | `http://foo.com/bar`     |\r\n\r\n发送请求\r\n```php\r\n$response = $client->get(\'http://httpbin.org/get\');\r\n$response = $client->delete(\'http://httpbin.org/delete\');\r\n$response = $client->head(\'http://httpbin.org/get\');\r\n$response = $client->options(\'http://httpbin.org/get\');\r\n$response = $client->patch(\'http://httpbin.org/patch\');\r\n$response = $client->post(\'http://httpbin.org/post\');\r\n$response = $client->put(\'http://httpbin.org/put\');\r\n```\r\n```php\r\n// 完整语法如下\r\n$client->具体的请求方法(请求地址, [请求时需要携带的数据数组]);\r\n```',5,100,'2019-02-21 03:24:17','2019-02-21 03:24:17'),(61,'### 开始直播\r\n```\r\n开始直播，需要2个软件\r\n	一个推流软件：obs-studio，官网下载：https://obsproject.com/\r\n		推流软件用于把音视频流推到七牛服务器上\r\n		推流软件设置：点击\"设置\"，选择”流“，流类型选”自定义流媒体服务器“，填写URL和流名称，举例：如果七牛直播地址为：rtmp://pili-publish.28sjw.com/education-zet/itcast，那么URL和流名称按如下方式填写：\r\n			URL：rtmp://pili-publish.28sjw.com/education-zet\r\n			流名称：itcast\r\n	 一个拉流软件：PotPlayer播放器，在播放器中选择\"打开链接\"选项，输入直播地址即可观看直播，观看地址举例：rtmp://pili-publish.28sjw.com/education-zet/itcast\r\n```\r\n\r\n### 直播总结\r\n直播要在七牛上创建 直播空间 、流(即一个个直播房间) ，”直播空间“在七牛控制台上手动创建，”流“可在七牛控制台上创建，七牛也提供了API接口给第三方来创建流，方便第三方创建、管理流。\r\n只要有了流，就可以通过推流软件、拉流软件完成直播整个过程。\r\n所以，即使没有自己的服务器，仅靠七牛的服务器也能提供直播服务；第三方服务器只是用来创建、管理自己账户中七牛的流。',5,100,'2019-02-21 03:27:15','2019-02-21 03:29:26'),(62,'## 前台开发\r\n### 首页\r\n路由\r\n```php\r\n// 前台路由\r\nRoute::get(\'/\',\'Home\\IndexController@index\') -> name(\'home_index\');\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Home/IndexController\r\n```\r\n```php\r\nclass IndexController extends Controller {\r\n  public function index() {\r\n    $live = Live::where(\'status\',1) -> orderBy(\'sort\',\'desc\') -> get();\r\n    // 在服务端添加直播的播放状态\r\n    foreach($live as $key => $value) {\r\n      if(time() < $value -> begin_at) {\r\n        $value -> live_status = \'直播未开始\';\r\n      } elseif($value -> begin_at <= time() && time() <= $value -> end_at) {\r\n        $value -> live_status = \'直播中\';\r\n      } elseif (time() > $value -> end_at) {\r\n        $value -> live_status = \'直播已结束\';\r\n      }\r\n    }\r\n    $profession = Profession::orderBy(\'sort\',\'desc\') -> get();\r\n    return view(\'home.index.index\',compact(\'live\',\'profession\'));\r\n  }\r\n}\r\n```\r\n### 直播页\r\n路由\r\n```php\r\n// 前台直播路由\r\nRoute::get(\'live\',\'Home\\LiveController@live\') -> name(\'live\');\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Home/LiveController\r\n```\r\n```php\r\nclass LiveController extends Controller {\r\n    public function live(Request $request) {\r\n        $id = (int)$request -> get(\'id\');\r\n        $data = Live::where(\'id\',$id) -> where(\'status\',\'1\') -> where(\'begin_at\',\'<=\',time()) -> where(\'end_at\',\'>=\',time()) -> first();\r\n        if($data) {\r\n            // 有直播看\r\n            return view(\'home.live.live\',compact(\'data\'));\r\n        } else {\r\n            // 没有直播看,或者不在直播中\r\n            return \"<script>alert(\'抱歉，没有对应直播课程可以观看\');location.href = \'/\';</script>\";\r\n            exit;\r\n        }\r\n    }\r\n}\r\n```\r\n视图：views/live/live.blade.php\r\n```php\r\n<!-- ckplayer服务端播放器 -->\r\n<script type=\"text/javascript\" src=\"/home/ckplayer/ckplayer.js\"></script>\r\n<div id=\"video\" style=\"width:100%;height:650px;\"></div>\r\n<script type=\"text/javascript\">\r\n	var videoObject = {\r\n	container:\'#video\',\r\n	variable:\'player\',\r\n	autoplay:true,\r\n	video:\'rtmp://pili-publish.28sjw.com/education-zet/{ {$data -> rel_stream -> stream_name} }\'\r\n	};\r\n	var player=new ckplayer(videoObject);\r\n</script>\r\n```\r\n#### ckplayer网页播放器插件\r\n官网下载：http://www.ckplayer.com/\r\n使用：把 ckplayer 目录复制到项目根目录中，在视图中就可以使用ckpplayer了。\r\n使用教程：http://www.ckplayer.com/manualX/17.html\r\n使用示例：见上一节',5,100,'2019-02-21 04:11:16','2019-02-21 04:14:13'),(63,'### 专业详情请\r\n路由\r\n```php\r\n// 前台专业详情路由\r\nRoute::get(\'profession\',\'Home\\Profession@profession\') -> name(\'profession\');\r\n```\r\n控制器\r\n```php\r\nphp artisan make:controller Home/ProfessionController\r\n```\r\n```php\r\nclass ProfessionController extends Controller {\r\n    // 专业详情页\r\n    public function profession(Request $request) {\r\n        $data = Profession::where(\'id\',$request->get(\'id\')) -> first();\r\n        return view(\'home.profession.profession\',compact(\'data\'));\r\n    }\r\n    // 购买课程（专业)订单页\r\n    public function showOrder(Request $request) {\r\n        $data = Profession::where(\'id\',$request->get(\'id\')) -> first();\r\n        return view(\'home.profession.showOrder\',compact(\'data\'));\r\n    }\r\n}\r\n```',5,100,'2019-02-21 04:17:38','2019-02-21 04:17:38'),(64,'## 接入支付宝\r\n### 官方文档\r\n官网：https://b.alipay.com/\r\n网站支付接口申请流程：https://b.alipay.com/signing/productDetail.htm?productId=I1011000290000001000\r\n### 接入过程\r\n下载支付SDK包\r\nSDK有2种版本：MD5和RSA的，MD5配置简单，RSA更安全，选一个即可。\r\n复制对应语言（如php）的SDK包到【网站根目录public】中（复制后可把文件夹名改剪短点，如alipay）\r\nSDK就是一个demo，其目录结构如下：\r\n```\r\n img目录：demo需要使用的图片文件夹；\r\nlib目录：接口sdk需要使用到的类库；\r\nalipay.config.php：接口的配置文件；\r\nalipayapi.php：接口文件（发起支付请求的页面）；\r\ncacert.pem：证书公钥文件；\r\nindex.php：demo的运行入口文件；\r\nlog.txt：记录响应的日志文件（虽然是日志，但是不要删除）；\r\nnotify_url.php：通知文件（异步），支付宝在用户付款成功之后会给这个页面发一个post请求，告知本次支付结果【默认的异步通知页面、要求必须外网可以被访问】\r\nreturn_url.php：通知文件（同步），在用户支付成功之后跳转回来的页面【默认的同步通知页面、不需要外网可以被访问】\r\n```\r\n配置SKD\r\n—— 在 alipay.config.php文件中，配置如下选项\r\n```php\r\n// 1. 配置partner\r\n$alipay_config[\'partner\']		= \'\';\r\n// 2. 配置MD5密钥\r\n$alipay_config[\'key\']			= \'\';\r\n// 3. 服务器异步通知页面路径 (此页面要求网可访问)\r\n$alipay_config[\'notify_url\'] = \"http://edu.com/alipay/notify_url.php\";\r\n// 4. 页面跳转同步通知页面路径\r\n$alipay_config[\'return_url\'] = \"http://edu.com/alipay/return_url.php\";\r\n```\r\n支付流程说明\r\n```\r\n实现原理：可以查看index.php的入口文件，观察得知，其只是将四个值（订单编号、商品名称、金额、描述），以post形式进行提交，提交给alipayapi.php即可跳转至支付页面，完成支付。\r\n```\r\n集成支付原理\r\n—— 由上述实现原理可知，只需在商家页面，将（订单编号、商品名称、金额、描述）4个值以post提交给alipayapi.php即可。\r\n—— 所以只需在：**商家页面的form表单中**，**加4个input隐藏框即可**。\r\n```php\r\n// 商家页面 views/profession/shoOrder.blade.php\r\n<form action=\"/alipay/alipayapi.php\" name=\"pay\" method=\"post\" target=\"_blank\">\r\n  <!-- 订单编号要求唯一 -->\r\n  <input type=\"hidden\" name=\"WIDout_trade_no\" value=\"{ {date(\'YmdHis\').rand(100000,999999)} }\" id=\"out_trade_no\">\r\n  <input type=\"hidden\" name=\"WIDsubject\" value=\"{ {$data -> pro_name} }\">\r\n  <input type=\"hidden\" name=\"WIDtotal_fee\" value=\"{ {$data -> price * 0.0001} }\">\r\n  <input type=\"hidden\" name=\"WIDbody\" value=\"支付订单描述\">        \r\n  <div class=\"sub clearfix\"><a style=\"cursor:pointer\" onclick=\"document.pay.submit()\">提交订单</a>\r\n    <p>应付金额：<span>￥{ {$data -> price * 0.0001} }</span></p>\r\n  </div>\r\n</form>\r\n```\r\n### SDK中的bug修复\r\nPhp7+已经淘汰了each()、count()函数，因此如果项目中php版本大于7.0，则要修改替换SDK中的each()和count()函数。\r\n```php\r\n// alipay/lib/alipay_submit.class.php 中的each替换掉\r\n//while (list ($key, $val) = each ($para)) {\r\nforeach($para as $key => $val) { // 用foreach来替换\r\n  $sHtml.= \"<input type=\'hidden\' name=\'\".$key.\"\' value=\'\".$val.\"\'/>\";\r\n}\r\n```\r\n```php\r\n// alipay/lib/alipay_core.function.php 中的each替换掉，及count()也替换掉\r\n// while (list ($key, $val) = each ($para)) {  \r\nforeach($para as $key => $val) { // 用foreach来替换\r\n  \r\n//去掉最后一个&字符\r\n// $arg = substr($arg,0,count($arg)-2);\r\n$arg = substr($arg,0,-1);\r\n```\r\n### 支付成功的判断\r\n\r\n支付成功后，跳转 http://edu.com/alipay/return_url.php  页面时，url中会带有一系列参数，如订单号、买家id、是否支付成功等，单这些信息是通过get传值的，容易被篡改，所以商家不能依据这写参数判断订单是否支付成功。\r\n\r\n------------\r\n\r\n所以要根据 http://edu.com/alipay/notify_url.php 支付宝异步给我们的通知，来判断商家的订单是否完成支付了。',5,100,'2019-02-21 04:22:16','2019-02-21 04:32:30'),(65,'## Linux命令\r\n### 参考网址\r\n参考网址：http://cnajiu.cn/\r\n### 查看命令的帮助信息\r\n```php\r\n命令 --help  // 查看命令帮助信息\r\nman 命令     // 查看命令帮助信息\r\n```\r\n### 磁盘管理\r\n```php\r\ncd ~  // 切换到家目录\r\ncd .  // 切换到当前目录\r\ncd .. // 切换到上级目录\r\ncd -  // 切换到上次所在目录，所以，可以2个目录之间来回切换\r\n  \r\npwd   // 查看当前路径\r\n  \r\nls    // 查看当前目录内容\r\nls /  // 查看根目录内容\r\nls ~  // 查看家目录内容\r\nls 2*  // 查看以2开头的文件和文件夹，*表示0-N个字符\r\nls 2？ // 查找以2开头共2个字符的文件和文件夹，？表示1个字符，不能多也不能少\r\nls [abc].txt // [abc]表示 a、b、c 中的任意一个\r\nls [1-5].txt // [1-5]表示 1、2、3、4、5 中的任意一个\r\nls > 重定向.txt // 把应该显示到屏幕的内容，显示到“重定向.txt”中，这个文件存在则【覆盖】，不存在则创建\r\nls >> 重定向.txt // 把应该显示到屏幕的内容，【追加】到“重定向.txt”中，若文件不存在则创建\r\nls -alh  // 显示全部、列表形式、人话形式   http://cnajiu.cn/view/ls.html\r\nll = ls -al\r\n```',6,100,'2019-02-21 06:58:20','2019-02-21 07:02:03'),(66,'### 文件管理\r\n```php\r\ntouch aaa.a  // 创建文件aaa.a\r\ntouch b/aaa.a   // 在b文件夹下，创建文件aaa.a (前提是b文件夹存在 )\r\n  \r\ncat -n a.txt  // 加行号，输出 a.txt 的全部内容到【屏幕】，适合小文件\r\ncat -n a.txt > b.txt //把 a.txt 的档案内容加上行号后输入 b.txt 这个档案里，>表示重定向\r\ncat 1.txt 2.txt 3.txt  // 依次输出3个文件内容到【屏幕】\r\ncat 1.txt 2.txt 3.txt > xx.txt // 把3个文件的内容合并，【重定向】到新文件xx.txt中\r\n  \r\nmore a.txt    // 以分屏的方式，输出 a.txt 的内容到【屏幕】，按 f 表示向后翻屏，按 b 表示向前翻屏，适合大文件\r\n  \r\nls /bin | more  //以more的方式查看ls的内容。|表示【管道】，接收其前面命令的数据，并以此作为其后面命令的操作对象。  \r\n\r\ntree  				// 以tree的方式来显示目录内容\r\nmkdir A 			// 创建A文件夹\r\nmkdir A/B/C/C -p 	// -p表示依赖的上级文件夹不存在时，自动创建（在上级文件夹不存在时，不加-p会报错）\r\nrmdir A 			// 只能删除一个空目录，且必须离开当前要删除的目录\r\nrm 文件 -i    // 以交互的方式（有提示），删除文件\r\nrm 文件 -f    // 强制删除，忽略不存在的文件，无需提示\r\nrm 文件夹 -r  // 删除文件夹时必须加上，递归的删除文件夹及其内容，（往往牵扯到文件夹的都加 -r）\r\n  \r\nmv oldname newname     // 【重命名】,既可以重命名文件，也可以重命名文件夹\r\nmv filename dirname/   // 【移动】文件到文件夹中，最后的\"/\"可有可无\r\ncopy a.txt B   // 【复制文件】：复制a.txt到文件夹B中\r\ncopy A B -r	   // 【复制文件夹】：复制文件夹A到文件夹B中，-r 表示递归，操作文件夹通常要加上\r\n  \r\nln -s 1.txt 1.solflink.txt // 创建【软链接】，软链接相当于windows中的快捷方式(原理：软链接指向源文件的文件名)\r\nln 1.txt 1.hardlink.txt    // 创建【硬链接】，硬链接指向源文件的数据地址\r\n// 【删除文件的原理】：文件分为文件名和数据，文件名指向数据，可以多个文件名指向同一个数据，即多个硬链接；一个文件名表示一个硬链接，只有删除所有硬链接（即硬链接数为 0 时），文件的数据才会开始被删除。\r\n  \r\ngrep -n \"abc\" xx.txt  // 在xx.txt中【搜索】”abc“，显示所有包含”abc\"的【行内容】, -n 表示显示行号\r\ngrep -v \"abc\" xx.txt  // -v 表示不包含 \"abc\" 的内容\r\ngrep \"^abc\" xx.txt    // 搜索以 \"abc\" 开头的内容，^表示以某某开头\r\ngrep \"abc$\" xx.txt    // 搜索以 \"abc\" 结尾的内容，$表示以某某结尾\r\n  \r\nfind ./ -name \"test.sh\"  // 查找当前文件夹下，所有名为test.sh的【文件】，-name表示按名字查找\r\nfind ./ -name \"*.sh\"     // 查找当前文件夹下，所有以 \".sh\" 结尾的文件\r\nfind ./ -name \"[A-Z]\"	 // 查找当前文件夹下，所有以大写字母开头的文件\r\nfind /tmp -size 2M		 // 查找在/tmp目录下，所有等于 2M 的文件\r\nfind /tmp -size +2M		 // 查找在/tmp目录下，所有大于 2M 的文件\r\nfind /tmp -size -2M		 // 查找在/tmp目录下，所有小于 2M 的文件\r\nfind /tmp -size +4k -size -5M  // 查找在/tmp目录下，所有大于 4k 且 小于 2M 的文件\r\nfind ./ -perm 777        // 查找当前文件夹下，所有权限为 777 的文件或文件夹\r\nwhich ls    // 查看ls命令文件所在的路径\r\n  \r\n// -c创建打包文件；-v 显示进度；-f包文件名, 后面必须跟.tar文件，所以放最后；-x解开包文件；-z gz压缩；-j bz2压缩\r\ntar -cvf test.tar *.py  // 【打包】：打包当前文件夹下所有.py结尾的文件(只打包了，并没压缩，实际工作中不常用)\r\ntar -xvf test.tar       // 【解包】：解开test.tar打包文件\r\ntar -zcvf test.tar.gz *.py   // 【打包并压缩gz】：打包当前气文件夹下所有.py结尾的文件，并压缩成gz格式\r\ntar -zxvf test.tar.gz 		 // 【解压缩包gz】：解开gz格式的test.tar.gz压缩包文件，解压到当前目录\r\ntar -zxvf test.tar.gz -C path     // 在gz解压中：-C 表示解压到【指定路径】\r\ntar -jcvf test.tar.bz2 *.py  // 【打包并压缩bz2：打包当前文件夹下所有.py结尾的文件，并压缩成bz2格式\r\ntar -jxvf text.tar.bz2       // 【解压缩包bz2】：解开bz2格式的test.tar.bz2压缩包文件，解压到当前目录\r\nzip zzz.zip *.py             // 【打包并压缩zip】：打包当前文件夹下所有.py结尾的文件，并压缩成zip格式\r\nunzip  zzz.zip               // 【解压缩包zip】：解开zip格式的zzz.zip压缩包文件，解压到当前目录\r\nunzip  zzz.zip -d path       //  在zip解压中：-d 表示解压到【指定路径】\r\n// 压缩率排名如：gz > bz2 > zip  \r\n```\r\nlinux 下查看文件个数及大小\r\n```\r\nls -l |grep \"^-\"|wc -l\r\n\r\n或\r\n\r\nfind ./company -type f | wc -l\r\n\r\n查看某文件夹下文件的个数，包括子文件夹里的。\r\n\r\nls -lR|grep \"^-\"|wc -l\r\n\r\n查看某文件夹下文件夹的个数，包括子文件夹里的。\r\n\r\nls -lR|grep \"^d\"|wc -l\r\n\r\n说明：\r\n\r\nls -l\r\n\r\n长列表输出该目录下文件信息(注意这里的文件，不同于一般的文件，可能是目录、链接、设备文件等)\r\n\r\ngrep \"^-\"\r\n\r\n这里将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d\r\n\r\nwc -l\r\n\r\n统计输出信息的行数，因为已经过滤得只剩一般文件了，所以统计结果就是一般文件信息的行数，又由于\r\n\r\n一行信息对应一个文件，所以也就是文件的个数。\r\n\r\n \r\n\r\nLinux查看文件夹大小\r\n\r\ndu -sh 查看当前文件夹大小\r\n\r\ndu -sh * | sort -n 统计当前文件夹(目录)大小，并按文件大小排序\r\n\r\ndu -sk filename 查看指定文件大小\r\n```',6,100,'2019-02-21 07:01:46','2019-03-13 14:58:47'),(67,'### 系统管理\r\n```php\r\n// -a 显示所有进程(包括其他用户进程)；-u 详细状态；-x 没有控制终端的进程；-w 加宽以显示更多内容；-r 正在运行的进程\r\nps  -aux     // 显示所有进程的详细信息\r\n  \r\ntop          // 显示正在执行的程序，按 q 键退出\r\nkill -9 进程号(pid)   // 强制杀死程序，-9 表示强制杀死\r\n  \r\nreboot			   // 重启\r\nshutdowm -r now    // 重启，会给别的用户提示\r\ninit 0			   // 重启\r\nshutdown -h now	   // 关机，立即关机\r\nshutdown -h +10	   // 关机，10分钟后关机\r\nshutdown -h 20:30  // 关机，今天20:30关机\r\ninit 6			   // 关机\r\n  \r\ndf -h 		// 查看系统磁盘使用情况，-h表示说人话\r\ndu -h		// 查看当前文件夹磁盘的使用情况\r\n  \r\nifconfig		// 查看网络状态(网卡、ip等信息)\r\nsudo ifconfig ens33 192.168.57.150  // 修改”ens33\"这块网卡的ip地址\r\n  \r\nping www.baidu.com   // ping 域名\r\nping 61.135.169.121  // ping IP地址\r\n  \r\nclear  // 清除屏幕，windows的cmd下是：cls\r\nhistory // 显示历史命名\r\n!252    // 执行历史命令中对应序号（252）的命令\r\n```',6,100,'2019-02-21 07:03:10','2019-02-21 07:04:26'),(68,'### 用户与权限\r\n```php\r\n// 命令前面加 sudo ，表示还是以当前角色来执行操作，执行者的身份没变，只不过拥有了超级管理员的权限。\r\n// 用户只有在 sudo、adm 这个两个【用户组】中，才有 sudo 权限。新创建的用户不在这两个组中，所以新用户没有sudo权限。\r\n// useradd 创建用户的时候，会自动创建同名的用户组\r\nsudo useradd  username  -m   // 添加linux系统用户，-m 表示 顺便创建该用户的家目录(与用户名同名)\r\nsudo groupadd  groupname     // 添加用户组\r\ncat /etc/passwd  			 // 查看添加用户是否成功？添加的用户会显示在password文件最后面\r\ncat /etc/group   			 // 查看用户组\r\ngroupmod + 2次tab			// 查看用户组 \r\nsudo passwd username        // 设置用户的密码\r\nsudo userdel username       // 删除用户\r\nsudo userdel username -r    // 删除用户，顺带删除用户的家目录\r\nsudo groupdel groupname		// 删除用户组\r\n  \r\n// 为新用户添加 sudo 权限(即超级管理员的权限)，也就是把新用户加入到 sudo、adm 这两个用户组中\r\nsudo usermod -a -G sudo newuser  // 把 newuser 添加到 sudo 用户组中，-a 表示添加\r\nsudo suermod -a -G adm newuser   // 把 newuser 添加到 adm 用户组中，-a 表示添加\r\n// -g 用来指定用户的默认组，-G 用来配合 -a 添加用户到其他组。\r\ngroups andy   // 查看用户 andy 的用户组(andy adm cdrom sudo dip) ，其中一个用户组(andy)是默认组\r\nls -la  // 【-rw-rw-r--  1 andy andy  132 12月  7 10:41 1.txt】，这里第一个andy表示用户，第二个表示默认组\r\nsudo chown username 1.txt   // 修改文件的所有者\r\nsudo chgrp groupname 1.txt  // 修改文件的所属组 (这个组中的用户，拥有与该组一样的对文件的权限)\r\n  \r\n// 修改权限\r\nchmod u=rwx g=rw o=r  1.py // 修改权限：u所有者可读可写可执行，同组者可读可写不可执行，其他人只能读\r\nchmod u= g= o= 1.py        // 什么权限都没有\r\nchmod 777   // r=4,w=2,x=1，因此：7=rwx，6=rw，5=rx，4=r，3=wx，2=w，1=x\r\n  \r\nsu username    // 切换用户(还在原来的目录)\r\nsu - username  // 切换用户，同时还切换到该用户的家目录\r\nsudo -s		   // 切换到超级管理员(ubuntu中这样切换)\r\nsu root		   // 切换到超级管理员(其他系统中这样切换)\r\nexit		 // 退出，会回到原来的账户\r\nwhoami       // 显示当前用户\r\nwho			 // 显示当前登录的所有用户\r\n// ubuntu 系统是多用户多任务系统，可以开启多个终端，登录多个用户\r\n\r\n\r\n------------\r\n\r\n\r\nssh username@ip   // 远程登录\r\n```\r\n文件或文件夹详细解析：\r\n第一条：-rw-rw-r--     1 andy andy   132     12月  7 10:41  1.txt\r\n第二条：drwxrwxr-x  2 andy andy  4096   12月  7 19:31  b/\r\n\r\n| 第一条  | -      | rw-   | rw-   | r--   | 1    | andy  | andy  | 132  | 12月  7 10:41 | 1.txt    |\r\n| ---- | ------ | ----- | ----- | ----- | ---- | ----- | ----- | ---- | ------------ | -------- |\r\n| 解释   | 文件     | 所有者权限 | 同组者权限 | 其他人权限 | 硬链接数 | 文件所有者 | 文件所属组 | 大小   | 创建时间         | 文件名      |\r\n| 第二条  | d      | rwx   | rwx   | r-x   | 2    | andy  | andy  | 4096 | 12月  7 19:31 | b/       |\r\n| 解释   | **目录** | 所有者权限 | 同组者权限 | 其他人权限 | 硬链接数 | 文件所有者 | 文件所属组 | 大小   | 创建时间         | **文件夹名** |',6,100,'2019-02-21 07:04:18','2019-02-21 07:04:18'),(69,'### 日期\r\n```php\r\ncal  			 // 显示本月日历\r\ncal -y 2018  	 // 显示2018年日历\r\ndate			 // 查看当前时间：2018年 12月 07日 星期五 14:59:18 CST\r\ndate \"+%Y-%m-%d %H:%M:%S\"  // 2018-12-07 15:05:47\r\n```',6,100,'2019-02-21 07:05:23','2019-02-21 07:05:23'),(70,'## Linux命令快捷键\r\n```php\r\n// linux 命令行下快捷键\r\ntab  // 自动补全\r\nctl + c  // 取消命令\r\nctr + shift + t  // 以tab的形式打开多个终端\r\nalt + 数字       // 切换tab\r\n\r\n------------\r\n\r\n// mac 快捷键\r\nctl + command + f    // 全屏窗口\r\ncommand + shift + t  // 以tab的形式打开多个终端\r\ncommand + 数字       // 切换tab\r\ncommand + +			// 放大命令行窗口\r\ncommand + -			// 缩小命令行窗口\r\nalt		+ 左右键	  // 以单词为单位左右移动\r\nctr		+ a			// 跳到行首 ahead\r\nctr		+ e			// 跳到行尾	end\r\nctr		+ u			// 删除(剪切)：光标之前的所有字符 (【向前删除所有】，不包含光标所在字符)，实质是剪切\r\nctr		+ k			// 删除(剪切)：光标之后的所有字符 (【向后删除所有】，包含光标所在字符)，实质是剪切\r\nctr		+ y			// 粘贴Ctrl+u或ctrl+k剪切的内容  \r\nctr     + d			// 删除：向后删除一个字符（光标所在字符），相当于 del，纯删除，没有剪切\r\nctr		+ l			// 清屏\r\nctr		+ c			// 终止命令\r\nctr		+ o			// 执行当前命令，并选择上一条命令。\r\n\r\n------------\r\n\r\n// iterm2\r\ncommand + t			// 以tab的形式打开多个终端\r\n```',6,100,'2019-02-21 07:06:36','2019-02-21 07:06:36'),(71,'## vim编辑器命令\r\n### 三种模式\r\n`命令模式` ——  I  i  O  a  A  o  ——> `编辑（插入）模式`； 返回用 esc\r\n`命令模式` ——  : ——> `末行模式`；返回用 esc\r\n```php\r\n————————O————————\r\nI——————i—?—a—————A\r\n————————o————————\r\n```\r\n### 命令模式\r\n```php\r\n// 复制 粘贴 删除\r\nyy			// 复制 1 行 (光标所在行)\r\n4yy			// 复制 4 行 (从光标行开始向下的4行)\r\np			// 粘贴 (在光标的下一行)\r\ndd			// 删除(剪切)：1 行 (光标所在行)，dd 其实是把“剪切”当“删除”用\r\n2dd			// 删除(剪切)：2 行 (从光标行开始向下的2行)\r\ndw			// 删一个单词\r\nD			// 向后删除(剪切)：从当前光标(包括光标所在字符)开始【到行末】，进行剪切\r\nd0			// 向前删除(剪切)：从当前光标(不包括光标所在字符)开始【到行首】，进行剪切\r\nx			// 删除(剪切)：向后删除一个字符（光标所在字符），相当于 del\r\nX			// 删除(剪切)：像前删除一个字符（光标前的字符），相当于 backspace\r\n\r\n------------\r\n\r\n// 选中与移动代码\r\nv			// 选中光标经过区域\r\nV			// 选中光标经过的行\r\n>>			// 向右移动代码 (按选中的整行来移动，不是按区域移动)\r\n<<			// 向左移动代码 (按选中的整行来移动，不是按区域移动)\r\n.			// 重复执行上一次的命令  \r\n\r\n------------\r\n\r\n// 查找(搜索) 替换\r\n/abc		// 查找 abc ，abc 会被高亮显示，要去除高亮显示，重新搜一个不存在的字符串即可\r\nn			// 搜索结果的下一个\r\nN			// 搜索结果的上一个\r\nr			// 替换一个字符\r\nR			// 替换 N 个字符\r\n\r\n------------\r\n\r\n// 撤销与反撤销\r\nu			// 撤销\r\nctr + r		// 反撤销\r\n\r\n------------\r\n\r\n// 移动光标  \r\nhjkl		// 左下上右 (移动光标的方向)\r\nH			// 定位到当前屏幕的 顶部\r\nM			// 定位到当前屏幕的 中间\r\nL			// 定位到当前屏幕的 底部\r\nctl + f		// 向下翻一屏 follow\r\nctl + b		// 向上翻一屏 before\r\nctl + d		// 向下翻半屏 down\r\nctl + u		// 向上翻半屏 up\r\ngg			// 定位到第 1  行\r\n20G			// 定位到第 20 行\r\nG			// 定位到 最后 一行\r\nw			// 定位到下一个 单词 的开始处 word\r\nb			// 定位到上一个 单词 的开始处 back\r\n}			// 定义到下一段 末尾处\r\n{			// 定义到上一段 开始处\r\n\r\n------------\r\n\r\nshift + zz		// 保存退出，相当于:wq\r\n```\r\n### 末行模式\r\n```php\r\n:%s/abc/123/g		// 将所有的 abc 替换成 123\r\n:1,10s/abc/123/g	// 将1-10行之间的 abc 替换成 123\r\n\r\n------------\r\n\r\n:w					// 保存\r\n:q					// 退出\r\n:wq					// 保存退出，无论是否有内容被修改，都更新文件修改时间\r\n:x					// 保存退出，只有文件内容被修改时，才更新文件修改时间\r\n:q!					// 强制退出\r\n:set number 		// 临时显示行号\r\n:set nu				// 临时显示行号\r\n:set nonumber or nonu  // 隐藏行号\r\n```\r\n### vim设置\r\n```php\r\n// vim ~/.vimrc，在当前用户的家目录下【创建vimrc文件】，对vim进行设置\r\n\r\n------------\r\n\r\n// 显示行号\r\nset number  \r\n// tab为4个空格，换行保持当前缩进\r\nset ts=4\r\nset expandtab\r\nset autoindent\r\n```',6,100,'2019-02-21 07:15:25','2019-02-21 07:21:10'),(72,'## git 版本管理\r\n### git安装\r\nwindows下安装，windows下载地址：https://gitforwindows.org/\r\n```\r\n下载后，双击安装，一路next即可。\r\n安装后，鼠标右键会出现：Git Bash Here Git GUI Here (GUI是图形界面)\r\n```\r\nlinux下安装\r\n```\r\n// ubuntu,dbian \r\nsudo apt-get install git\r\n\r\n// centos,redhat \r\nyum install git\r\n```\r\n### git基础设置\r\n```\r\n// 设置用户名和邮箱，在多人协作时，会知道谁做了什么，怎么联系他\r\ngit config --global user.name Your Name  			// 设置用户名\r\ngit config --global user.email your@example.com		// 设置邮箱\r\n```\r\n```\r\n// 设置 push 时的默认分支为【当前分支】，这样 push 时没有指定分支就不会报错了\r\ngit config --global push.default simple  \r\n```\r\n此设置是 Git 命令 push 的默认模式为 simple，当我们执行 git push 没有指定分支时，自动使用【当前分支】，而不是报错。\r\n### 创建git版本库 (初始化)\r\n不要把仓库建在中文目录下，肯能出问题\r\n`.git`  是个隐藏目录，不要乱碰(你的每一次代码修改都由它来记着)\r\n```\r\nmkdir test		// 创建一个文件夹\r\ngit init		// 初始化 git 项目，这时会生成 .git 隐藏目录\r\n```\r\n### 添加文件\r\n状态流转：`工作区` —— git add ——> `暂存区` —— git commit ——> `版本库`\r\n```\r\ngit status					// 最开始时，查看状态，提示0：Untracked files 没有要跟踪的文件\r\ngit add index.php			// 添加文件 index.php 到【暂存区】\r\ngit add .					// 将当前文件夹里的内容纳入到 Git 【暂存区】\r\ngit add -A					// 将项目所有文件纳入到 Git 【暂存区】\r\ngit status					// 暂存后，再查看状态，提示1：Changes to be committed 有修改需要被提交\r\ngit commit -m \"init\"		// 提交文件 到【版本库】，-m 表示此次提交的备注消息\r\ngit status					// 提交后，提示2：nothing to commit, working tree clean\r\n```\r\n### 修改文件\r\n```\r\nvim index.php			// 修改文件\r\ngit status   			// 修改文件后，提示0：Changes not staged for commit 修改还没有暂存起来，为了提交\r\ngit add index.php		// 添加修改后的文件，到【暂存区】\r\ngit status				// 修改暂存后，提示1：Changes to be committed 有修改需要被提交\r\ngit commit -m \"modify\"	// 修改提交后，提示2：nothing to commit, working tree clean 工作区是干净的\r\n```\r\n### 删除文件\r\n```\r\ngit rm readme.md		// 用 git rm 删除文件\r\ngit status				// 删除后，提示：Changes to be committed 修改需要被提交\r\ngit commit -m \"delete readme.md\"  // 删除后提交，到【版本库】\r\ngit status 						  // 删除后提交后，提示：nothing to commit, working tree clean \r\n```\r\n### 推到远程仓库\r\n使用账号密码 把代码推到远程仓库\r\n```\r\n// 添加一个远程仓库，仓库别名为：origin ，远程仓库地址为：https://github.com/andy-love-coding/gitdemo.git\r\ngit remote add origin https://github.com/andy-love-coding/gitdemo.git  // 为远程仓库地址，起一个别名\r\n\r\n------------\r\n\r\ngit push origin master // 把本地的版本(默认master)，推到别名为 origin 的远程仓库去\r\ngit push https://github.com/andy-love-coding/gitdemo.git master  // 也可直接用地址推\r\ngit push -u origin master // 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。不带任何参数的git push，默认只推送当前分支，这叫做simple方式。\r\n\r\n------------\r\n\r\n// 推的时候，要求输入远程仓库的：【用户名】和【密码】\r\n// 第一次推完后，提示：[new branch]      master -> master\r\n// 第二次后再推，提示：b8b86dc..8c6e7b0  master -> master\r\n```\r\n配置公钥 把代码推到远程仓库\r\n—— `生成公钥`：替换成自己的邮箱，一直回车，期间不要输入密码。 接下来，会在/Users/andy/.ssh/目录下，看到 id_rsa 和 id_rsa.pub 两个文件，即私钥和公钥，它们是一对，可以让【分别持有】私钥和公钥的【双方认识】。\r\n```\r\nssh-keygen -t rsa -C \"your_email@example.com\"\r\n```\r\n—— 打开公钥文件，把公钥内容添加到github中。步骤：github头像 → settings → SSH and GPG keys → New SSH keys → 起一个title，设置好公钥即可。\r\n—— 配置好公钥后，再push的时候，地址就不是 https 协议了，而是 ssh 协议。所以要更改 origin 的地址。\r\n```\r\n// 用公钥 来把代码推到远程仓库\r\ngit remote -v     // 先查看先远程地址，发现 origin 指向 https://github.com/andy-love-coding/gitdemo.gi\r\ngit remote remove origin		// 删除别名 origin (所谓地址别名，就是用一个短名字代替一短长地址)\r\ngit remote add origin git@github.com:andy-love-coding/gitdemo.git  // 添加一个 SSH 协议地址的别？、\r\n// 到此：在github上已经配置了公钥、别名已经改为 SSH 协议地址了，以后再推，就不用输入用户名和密码了\r\ngit push origin master    // 此推送过程，会把私钥推到远程仓库，与公钥相遇相识，完成身份认证，代码推送成功。\r\n```\r\n### 远程仓库管理\r\n```\r\ngit remote add origin https://github.com/andy-love-coding/gitdemo.git  // 添加一个 origin 远程仓库\r\ngit remote					// 查看远程仓库\r\ngit remote -v				// 查看远程仓库地址\r\ngit remote remove origin	// 删除远程仓库别名 origin\r\n```\r\n### 拉取远程仓库代码\r\n```\r\ngit clone https://github.com/andy-love-coding/gitdemo.git   // 克隆项目到本地，如未制定文件夹，则默认项目名称为git线上的项目名称\r\ngit clone https://github.com/andy-love-coding/gitdemo.git  folder   // 克隆项目到本地，并制定文件夹名称（即项目名称）\r\ngit pull origin master 										// 从 origin 拉取最新代码到 本地 master\r\n```\r\n### 查看版本日志与切换版本\r\n```\r\ngit log					    // 查看 git 日志\r\ngit log --pretty=oneline	// 以简略的方式查看日志(显示到当前指针的版本为止)\r\ngit reflog					// 以更简略的方式查看日志(显示全部的版本)\r\ngit reset --hard 8d3a1c		// 切换到某次的版本  \r\n```\r\n### 分支管理\r\n```\r\nmaster: git branch				// 查看分支: * master，说明只有 master 分支，* 表示当前处于 master 分支\r\nmaster: git branch wechat		// 创建分支 分支名称为 wechat，由张三来做\r\nmaster: git branch ali			// 创建分支 分支名称为 ali，由李四来做\r\nwechat: git checkout wechat		// 张三切换到 wechat 分支\r\nwechat: git add .				// 张三把 wechat 分支上的修改全部添加\r\nwechat: git commit -m \"wechat done\"  // 张三提交 wechat 分支\r\nali: git checkout ali			// 李四切换到 ali 分支\r\nali: git add .					// 李四把 ali 分支上的修改全部添加\r\nali: git commit -m \"ali done\"	// 李四提交 ali 分支\r\nmaster: git checkout master 	// 主管切换到 master 主分支\r\nmaster: git merge wechat		// 主管合并 wechat 分支代码\r\nmaster: git merge ali			// 主管合并 ali 分支代码，此时，发现 ali 分支代码和 wechat 分支代码有冲突\r\nvim test.txt 					// 主管开会，修改代码解决冲突\r\nmaster: git add .				// 主管把修改冲突后的代码，全部添加\r\nmaster: git commit -m \"wechat and ali done\"  // 主管提交合并 wechat 和 ali 分支后的代码(并解决了代码冲突)\r\n```\r\n```\r\ngit checkout -b newbranch		// 创建并切换到分支\r\ngit checkout -f					// 将在暂存区的更改文件进行【强制撤销】。（将修改内容从 暂存区 → 工作区）\r\ngit branch -d wechat			// 删除 wechat 分支\r\n\r\n------------\r\n\r\n// 当要撤销新增、修改等超时时，先添加文件到暂存区，然后强制检出，就相当于上都没做  \r\ngit add -A				// 添加所有\r\ngit checkout -f			// 放弃本地修改，强制检出代码（将修改内容从 暂存区 → 工作区）\r\ngit checkout routes/api.php   // 放弃对某个指定文件的修改\r\n\r\n------------\r\n\r\n// 回滚：放弃修改\r\ngit checkout .			// 还原修改文件到原始状态，只是还原之前就已经存在的文件。（将修改内容从 暂存区 → 工作区）\r\ngit status				// 若前面操作时有新增文件，此时会看到有未跟踪的文件 Untracded files\r\ngit clean -f -d 		// clean 作用是清理项目，-f 是强制清理文件的设置，-d 选项命令连文件夹一并清除。\r\ngit status				// 再看时，发现：nothing to commit, working directory clean\r\n```',6,100,'2019-02-21 07:27:12','2019-03-25 12:52:13'),(73,'## apache服务器',6,100,'2019-02-21 07:35:26','2019-02-21 07:35:26'),(74,'### apache开启多端口\r\n在apache主配置文件conf/httpd.conf里，添加Listen端口即可\r\n```\r\nListen 80\r\nListen 8080\r\n```',6,100,'2019-02-21 07:36:00','2019-02-21 07:36:00'),(75,'### 日志格式优化（统计请求时长）\r\n在apache配置文件conf/httpd.conf里，\"LogFormat ...... combined\" 中添加%D ， %D表示服务器处理请求所用时间，单位为微秒 ，这样就能通过日志分析每个请求的所用的时间，从而对系统性能进行优化。\r\n```\r\n// combined 是别名，将来在虚拟主机配置文件中使用\r\n原来：LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n后来：LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %D\" combined\r\n```',6,100,'2019-02-21 07:36:46','2019-02-21 07:36:46'),(76,'### apache配置虚拟主机文件\r\n什么是FollowSymlinks**符号连接**？\r\n符号连接也叫软连接，就是允许你的网页文件夹下的链接文件链接到首页目录以外的文件。举例来说，如果你把首页目录设置为/var/www/html，那么你的网页程序最多只能访问到/var/www/html目录，上层目录是不可见的。但是你可以通过链接把文件链接到/var/www/html目录以外的文件以访问该文件，如果FollowSymLinks被设置的话\r\ntips: 实际中是用“#”注释，此次为了兼容本note显示问题，改为“//”\r\n```php\r\n<VirtualHost *:8080>\r\n 	// 设置网站目录\r\n 	DocumentRoot \"C:\\Users\\andy\\Desktop\\win7\\gzh-demo\"\r\n 	// 设置网站域名\r\n 	ServerName localhost\r\n 	// 错误日志\r\n 	ErrorLog \"C:\\Users\\andy\\Desktop\\win7\\gzh-demo/logs/error.log\"\r\n  	// 成功日志\r\n  	CustomLog \"C:\\Users\\andy\\Desktop\\win7\\gzh-demo/logs/access.log\" combined\r\n 	// 设置目录访问权限\r\n 	<Directory />\r\n 		// 允许目录浏览、允许在此目录中使用符号连接（软连接）\r\n 		Options +Indexes FollowSymLinks\r\n 		// 是否允许使用.htaccess文件\r\n 		AllowOverride All\r\n 		// 访问目录权限\r\n 		Require all granted\r\n     </Directory>\r\n </VirtualHost>\r\n ```',6,100,'2019-02-21 07:40:35','2019-02-21 07:41:10'),(77,'### apache配置文件语法检查\r\n如果apache的配置文件有语法错误，那么apache服务器将无法启动，此时可以用命令行工具来运行apache程序，来检查配置文件语法问题\r\n```\r\ncmd: C:\\phpStudy\\PHPTutorial\\Apache\\bin\\httpd.exe  -t\r\n```',6,100,'2019-02-21 07:42:39','2019-02-21 07:42:39'),(78,'## 常用',6,100,'2019-02-21 07:44:24','2019-02-21 07:44:24'),(79,'### 查看端口是否被使用\r\nwindows下查看端口是否被使用\r\n```\r\nnetstat  -ano | findstr 8080\r\n```\r\nlinux下查看端口是否被使用（centos6）\r\n```\r\nnetstat -tunpl | grep 8080\r\n```\r\nlinux下查看端口是否被使用（centos7）\r\n```\r\nss -lnp src :8080\r\n\r\nss -lnp | grep 8080\r\n```',6,100,'2019-02-21 07:46:06','2019-02-21 07:46:06'),(80,'## 内网穿透（Windows）\r\nnetapp内网映射（Windows）\r\n```\r\n使用netapp做内网穿透，也就是使用netapp把本地IP地址端口映射到netapp服务器，映射完成后生成一个netapp的三级域名，外网访问这个三级域名时，netapp服务器通过netapp客户端找到映射关系，从而找到对应的本地ip端口，继而完成公网对本地web服务的访问。\r\n```\r\n使用netapp的用处\r\n```\r\n在不用线上服务器的情况下，使用netapp的免费映射（隧道），可以搭建简单的公网web服务器。\r\n最大的用处是：netapp有个一调试界面，类似于chrome的调试工具，在开发微信公众号时很有用（公众号默认没有调试工具，很不方便），使用netapp做公众号的调试工具很方便。\r\n\r\n```\r\nnetapp详细介绍，转到全栈6期公众号开发第一天第13至15个视频。\r\n### natapp介绍\r\n官网：https://natapp.cn\r\n`natapp` 软件,它给我们提供一个外网的域名，通过此软件，把我们内网的IP和端口，映射到它自己的服务器上面，这样公众号服务器访问到他们的服务器上面，然后它在转发到我们的内网中，这样就实现了内网的穿透，即**本地局域网借助 natapp 连接到公网，从而穿透了内网，达到了用内网搭建服务器的目标。**\r\n### natapp注册\r\n注册\r\n实名认证\r\n购买隧道（个人有2个免费的隧道）\r\n—— 协议：web\r\n—— 端口：不要用80端口，尽量用大点的端口（5000端口以后），如：7000\r\n购买隧道完成后，得到隧道的authtoken，这个就是内网穿透的凭证\r\n配置apache多端口，监听隧道对应的端口（如上7000）\r\n—— 在配置文件中conf/httpd.conf，添加监听的端口\r\n```\r\nListen 80\r\nListen 7000\r\n```\r\n### 下载natapp客户端\r\n下载客户端：https://natapp.cn/#download\r\n加config.inf ：下载后，需要在与客户端同一目录下，加一个配置文件 config.ini（记得替换成自己的authotoken）\r\n—— config.ini\r\n```\r\n[default]\r\nauthtoken=后台所提供的authtoken值\r\nloglevel=DEBUG\r\n```\r\n### 运行natapp客户端\r\n加好配置文件后，用命令行运行 natapp.exe 即可，记得不是双击运行哦\r\ncmd下的运行命令\r\n```\r\n\\Users\\andy\\Desktop\\natapp>natapp.exe\r\n```\r\n运行成功\r\n```\r\nPowered By NATAPP       Please visit https://natapp.cn\r\nTunnel Status           Online\r\nVersion                 2.3.8\r\nForwarding              http://4fmv38.natappfree.cc -> 127.0.0.1:7000\r\nWeb Interface           http://127.0.0.1:4040\r\nTotal Connections       0\r\n```\r\n这样就可以用外网访问本地站点了：http://4fmv38.natappfree.cc/info.php (注意免费隧道，三级域名是动态分配的)\r\n调试页面：http://127.0.0.1:4040/http/in （这个相当于chrome的调试工具，对于公众号开发调试非常有用）\r\n运行错误（错误原因：可能是authotoken写错，或者是config.ini的字符集不对，可尝试更换字符集。）\r\n```\r\n认证错误 请登录 https://natapp.cn 查看相关信息 : errorCode :100 Msg:authtoken错误，请注意前后不得有空格等字符\r\n```',6,100,'2019-02-21 07:47:10','2019-02-26 09:37:13'),(81,'## 待修复的bug\r\n### bug1: 从网址直接跳转到锚点',7,100,'2019-02-21 07:51:18','2019-02-26 08:38:43'),(82,'## js基础知识\r\n### 前端面试真题\r\n参考网址：http://caibi.club/',8,100,'2019-02-21 09:39:42','2019-03-14 10:14:41'),(83,'### 回调函数\r\n1.利用回调函数：在函数之间**传递数据**\r\n```html\r\n<!DOCTYPE html>\r\n<head>\r\n    <title>callback</title>\r\n</head>\r\n<body>\r\n<script>\r\n    // A方法中用回调函数传递数据\r\n    // A方法中有数据（123），A方法有个参数是回调函数，执行回调函数，数据（123）被存入回调函数的作用域中\r\n    function funA(callback){\r\n        var a = 123;\r\n        callback(a);\r\n    }\r\n    // B方法通过回调函数接收数据\r\n    // B方法中调用A方法，A需要一个回调函数做参数，因此定义一个匿名回调函数，\r\n    // 这个函数接收一个参数，就是A方法中的数据a（123）\r\n    funB = function(){\r\n        funA(function(res){\r\n            document.write(\'B方法得到A方法中的数据：\' + res); //B方法得到A方法中的数据：123           \r\n        });\r\n    }\r\n    funB();\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n2.利用回调函数：简化主函数，具体处理逻辑交给回调函数。（主函数没有想好的事情，交给回调函数去做）\r\n```javascript\r\n<script>\r\n    function jia(a,b){\r\n        alert(\'加：\'+(a+b));\r\n    }\r\n    function jian(a,b){\r\n        alert(\'减：\'+(a-b));\r\n    }\r\n    function cheng(a,b){\r\n        alert(\'乘：\'+(a*b));\r\n    }\r\n    function chu(a,b){\r\n        alert(\'除：\'+(a/b));\r\n    }\r\n  	//主函数\r\n    function cal(callback,a,b){\r\n        callback(a,b);\r\n    }\r\n    cal(jia,5,2);  //加：7\r\n    cal(jian,5,2); //减：3\r\n    cal(cheng,5,2);//乘：10\r\n    cal(chu,5,2);  //除：2.5\r\n</script>\r\n```',8,100,'2019-02-21 09:43:27','2019-02-21 09:46:50'),(84,'### js闭包\r\n答、简单的说，作用域是针对变量的，比如我们创建一个函数a1，函数里面又包了一 个子函数 a2。此时就存在三个作用域： 全局作用域、a1作用域、a2 作用域；即全局作用域包含了a1的作用域，a2 的作用 域包含了 a1的作用域。 当a1 在查找变量的时候会先从自身的作用域区查找，找不到再到上一级a2 的作用域 查找，如果还没找到就到全局作用域区查找，这样就形成了一个作用域链。 理解闭包首先要理解， js 垃圾回收机制，也就是当一个函数被执行完后，其作用域会被 收回，如果形成了闭包，执行完后其作用域就不会被收回。 如果某个函数被他的父函数之外的一个变量引用，就会形成闭包。 闭包的作用，就是保存自己私有的变量，通过提供的接口（方法）给外部使用，但外部 不能直接访问该变量。\r\n### 原型链\r\nhttps://www.cnblogs.com/shuiyi/p/5305435.html\r\n原型：\r\n```\r\n  - prototype\r\n    - 属于构造函数\r\n  - proto\r\n    - 属性对象\r\n```',8,100,'2019-02-21 09:49:54','2019-03-20 14:12:33'),(85,'### 字符串模板\r\n在反引号中，使用字符串模板，只需在模板内的占位符 ${ } 内使用它们。\r\n```\r\nvar a = 5;\r\nvar b = 10;\r\nconsole.log(`Fifteen is ${a + b} and\r\nnot ${2 * a + b}.`);\r\n// \"Fifteen is 15 and\r\n// not 20.\"\r\n```',8,100,'2019-02-21 09:55:44','2019-02-21 09:55:44'),(89,'### 常量解析\r\n在使用常量时，若要解析常量，需要用[]括起来\r\n```javascript\r\nconst INCREMENT = \'increment\';\r\n[INCREMENT] () {...}  // [INCREMENT]会解析成increment，其等价于：increment () {...}\r\nobj = { [INCREMENT]： 1 } // 等价于：obj = { increment： 1 }\r\n```',8,100,'2019-02-21 09:56:32','2019-02-21 10:01:56'),(91,'## 待解决的技术问题\r\n### 问题1：新建多个问题\r\n问题描述：点击“新建”按钮时，短时间内过快点击，会在数据库中新建多条记录。\r\n### 问题2：let语法原理\r\n### 问题3：账号安全问题\r\ntoken登录：token存于浏览器，如何阻止假token登录成功。\r\n拿到别人的真token值后，是不是可以登录别人的账号进行操作？token登录，将如何保护好token存储？\r\n### 问题4：拒绝搜索引擎爬取',7,100,'2019-02-21 09:58:49','2019-02-28 11:47:34'),(92,'### 跨域\r\n 跨域：协议/ip地址/端口号，任何一个不一样，都会产生跨域，跨域是浏览器的行为，不是服务器的行为。\r\n虽然浏览器存在跨域，但是 script 标签不存在跨域\r\n跨域解决方法：\r\n1.自己封装 ajax\r\n2.jquery支持跨域：jquery.jsonp()\r\n注意：axios 不支持跨域\r\n3.使用 JSONP https://github.com/axios/axios/search?q=jsonp&unscoped_q=jsonp\r\njsonp缺点：只能实现get一种请求。\r\n\r\n```bash\r\n$ npm install jsonp --save\r\n```\r\n\r\n```js\r\nconst jsonp = require(\'jsonp\');\r\n\r\njsonp(\'http://www.example.com/foo\', null, (err, data) => {\r\n  if (err) {\r\n    console.error(err.message);\r\n  } else {\r\n    console.log(data);\r\n  }\r\n});\r\n```\r\n**vue + axios 跨域：**\r\nhttps://studygolang.com/articles/13955',8,100,'2019-02-21 10:03:48','2019-04-15 08:31:05'),(93,'### es6中的类\r\n```javascript\r\n// js\r\n// es6中的声明类\r\nclass User {\r\n  constructor(name = \'\', pwd = \'\') { // 构造器，类实例化时最先执行\r\n    this.username = name\r\n    this.password = pwd\r\n  }\r\n  showUserInfo() {\r\n    console.log(this.username, this.password)\r\n  }\r\n}\r\n// new一个用户对象\r\nvar userObj = new User(\'andy\', \'123456\')\r\n\r\n// 继承类\r\nclass Vip extends User {\r\n  constructor(name=\'\',pwd=\'\',vip=1) {\r\n    super(name, pwd) // 【必须】继承父类构造函数\r\n    this.vip = vip\r\n  }\r\n  showVip() {\r\n    console.log(`${this.username}的vip等级是：${this.vip}`)\r\n  }\r\n}\r\n\r\nPage({\r\n  data: {\r\n    name: \'\',\r\n    pwd: \'\'\r\n  },\r\n  show: function () {\r\n    userObj.showUserInfo();\r\n    // new 再new一个用户对象\r\n    var userObj2 = new User(\'mary\', \'987654\')\r\n    userObj2.showUserInfo()\r\n  },\r\n  onLoad() {\r\n    this.show() // 输出用户\r\n    var vip = new Vip(\'jack\',\'000000\',3) \r\n    vip.showVip() // 输出vip\r\n  }\r\n})\r\n```',8,100,'2019-02-21 10:05:45','2019-02-21 10:05:45'),(94,'### es6与es5对比\r\nes6写法\r\n```javascript\r\nlet a = 123;  \r\nlet name = \"张三\";\r\nconst obj = {\r\n	name,\r\n    age,\r\n    sayHi () {\r\n        console.log(this.name, this.age);\r\n        return () => {\r\n            console.log(this.name); // es6中的箭头函数this指向其宿主\r\n        };\r\n    }\r\n}\r\n```\r\n转换成es5之后\r\n```javascript\r\nvar a = 123;\r\nvar name = \"张三\";\r\nvar obj = {\r\n    name: name,\r\n    age: age,\r\n    sayHi: function sayHi() {\r\n        var _this = this;        \r\n        console.log(this.name, this.age);\r\n        return function() {\r\n            console.log(_this.name); // 匿名函数的this指向window，所以用_this接一下\r\n        }\r\n    }\r\n}\r\n```',8,100,'2019-02-21 10:10:03','2019-02-21 10:10:03'),(95,'### 用A标签来提交表单\r\n用法\r\n```html\r\n<!--  给A元素绑定click事件，点击A, 找到当前文档的form表单（通过form的name属性可以得的form元素）,执行form元素的submit()方法 -->\r\n<form name=\"pay\"></form>\r\n<a onclick=\"document.pay.submit()>提交</a>\r\n```\r\n举例\r\n```hmtl\r\n<form action=\"/alipay/alipayapi.php\" name=\"pay\" method=\"post\" target=\"_blank\">\r\n  <!-- 订单编号要求唯一 -->\r\n  <input type=\"hidden\" name=\"WIDout_trade_no\" value=\"{ {date(\'YmdHis\').rand(100000,999999)} }\" id=\"out_trade_no\">\r\n  <input type=\"hidden\" name=\"WIDsubject\" value=\"{ {$data -> pro_name} }\">\r\n  <input type=\"hidden\" name=\"WIDtotal_fee\" value=\"{ {$data -> price * 0.0001} }\">\r\n  <input type=\"hidden\" name=\"WIDbody\" value=\"支付订单描述\">        \r\n  <div class=\"sub clearfix\">\r\n    <a style=\"cursor:pointer\" onclick=\"document.pay.submit()\">提交订单</a>\r\n    <p>应付金额：<span>￥{ {$data -> price * 0.0001} }</span></p>\r\n  </div>\r\n</form>\r\n```\r\n\r\n## js的APi\r\n### 地址栏API\r\n\r\n`location.search`  \r\n### A标签返回上一页（history）\r\n```\r\n<a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\">\r\n```\r\n### location 页面跳转\r\n```\r\nlocation.href = \"/mobile/searchList.html\";\r\n```\r\n### lacation 获取整个url地址\r\n```\r\nvar url = location.href;\r\n```\r\n### location获取页面传参\r\n```\r\n// 为了防止全局变量污染，我们把全局方法，定义在一个对象中，这样只用注意着一个变量就够了\r\nif(!window.lt) {\r\n  window.lt = {};\r\n}\r\n\r\n// 1.封装一个获取地址栏传参的方法\r\nlt.getParamsByUrl = function () {\r\n  // 把 ?name=andy&age=30 转换成 { name:\"andy\", age: \"30\" }\r\n  var paramsObj = {};\r\n\r\n  var search = location.search; // 获取 ? 号参数\r\n  if (search) { // 如果?号参数存在\r\n    search = search.replace(/^\\?/, \'\'); // 去掉参数中的 ？\r\n    if (search) { // 去掉?号后参数依然存在，格式：name=andy&age=30\r\n      searchArr = search.split(\'&\');\r\n      searchArr.forEach(function(item,i) {\r\n        // item = \"key=value\"\r\n        itemArr = item.split(\'=\');\r\n        // itemArr = [\"key\",\"value\"]\r\n        paramsObj[itemArr[0]] = decodeURIComponent(itemArr[1]);\r\n      });\r\n    }\r\n  }\r\n\r\n  return paramsObj;\r\n}\r\n```\r\n### encodeURI和encodeURIComponent\r\n对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。\r\n它们都是编码URL，唯一区别就是编码的字符范围，其中\r\nencodeURI方法不会对下列字符编码  `ASCII字母、数字、~!@#$&*()=:/,;?+\'`\r\nencodeURIComponent方法不会对下列字符编码 `ASCII字母、数字、~!*()\'`\r\n所以encodeURIComponent比encodeURI编码的范围更大。\r\n实际例子来说，encodeURIComponent会把 http://  编码成  http%3A%2F%2F 而encodeURI却不会。\r\n### 事件绑定\r\n#### 事件委派绑定动态内容\r\n对于js动态添加的内容（即内容之前不存在，是后台通过js动态添加的），可以通过body元素的`事件委派(事件代理)`来绑定\r\n```\r\n$(\'body\').on(\'tap\', \'js动态添加的元素的选择器\', function(){\r\n	...\r\n});\r\n```\r\n### 保留2为小数点\r\n```\r\nvar num = 1.345364346;\r\nnum.toFixed(2);\r\n```',8,100,'2019-02-21 10:16:20','2019-03-25 08:43:10'),(96,'## js数组\r\n`.forEach` : 对数组的每个元素执行一次提供的函数\r\n`.every`: 测试数组的所有元素是否都通过了指定函数的测试\r\n`.some` : 测试数组中的某些元素是否通过由提供的函数实现的测试\r\n`.map` : 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后，返回的结果\r\n### .filter() 过滤数组元素\r\n.filter() 过滤数组，会返回一个新数组，但是不会改变原数组。（注意：函数体中用 return 返回条件）\r\n```javascript\r\n<script>\r\n    var words = [\'sprayaa\', \'limit\', \'elite\', \'exuberant\', \'present\'];\r\n    // 会依次将words中的内容进行遍历，每个内容依次传递给后面的回调函数\r\n    //  就会根据条件进行判断 \r\n    //  如果满足条件就会将当前数据返回到新的数组中\r\n    const result = words.filter(word => {\r\n        return word.length > 6;\r\n    });\r\n    console.log(result);// sprayaa exuberant present\r\n</script>\r\n```\r\n### concat() 合并数组\r\n`concat()`：newarr = arr1.concat(arr2)，连接2个数组，返回新数组',8,100,'2019-02-21 10:18:59','2019-03-25 04:35:26'),(97,'## XML数据\r\n### XML CDATA (忽略解析)\r\n术语 CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。比如有些内容不希望被解析成xml节点。<br>\r\n`<![CDATA[我是帅哥<h3>不要脸</h3>]]>` ，<![CDATA[ 这里会被解析器忽略]]>，CDATA区段中的内容会被XML解析器忽略。这样“< h3>不要脸< /h3>\"就不会被解析成一个xml的节点了。\r\n```xml\r\n<xml>\r\n	<item>\r\n		<id>1</di>\r\n		<name>张三</name>\r\n		<intro><![CDATA[我是帅哥]<h3>不要脸</h3>]]></intro>\r\n	</item>\r\n</xml>\r\n```',8,100,'2019-02-21 10:24:21','2019-02-21 10:31:15'),(98,'## 服务器管理软件（宝塔）\r\n宝塔linux面板命令大全：https://www.bt.cn/btcode.html\r\n宝塔工具 rewrite：https://www.bt.cn/Tools\r\n宝塔安装与使用教程：https://www.kancloud.cn/chudong/bt2017/424204',6,100,'2019-02-21 11:22:57','2019-02-21 11:22:57'),(99,'## js插件\r\n### 代码高亮 highlight.js\r\n#### highlight.js 介绍\r\nhighlight.js是一款代码高亮的插件，支持多种语言，使用简单\r\n教程：https://www.cnblogs.com/dealblog/p/6822563.html\r\n#### highlight.js 部署\r\n\r\n1.下载\r\n勾选自己需要的语言，下载即可，去下载：https://highlightjs.org/download/ <br>\r\n2.部署\r\n下载包解压后，拷贝里面的  `highlight.pack.js` 文件  和 `ccs文件` 到项目中\r\n在html页面中，引入highlight.pack.js文件和其中的一个dark.css\r\n```html\r\n<link rel=\"stylesheet\" href=\"css/dark.css\">\r\n<script src=\"js/highlight.pack.js\"></script>\r\n<script>hljs.initHighlightingOnLoad();</script>\r\n```\r\n3.使用\r\n在code标签中显示代码即可，此时代码就会高亮显示\r\n```html\r\n<pre><code class=\"html\">...</code></pre>\r\n```\r\n4.注意\r\n代码缩进格式，浏览器默认的tab-size为8，需要在样式中重新定义一下tab-size为4，这样缩进才好看\r\n```css\r\npre {tab-size: 4; }\r\n```\r\n在code标签中显示代码即可，此时代码就会高亮显示\r\n如果代码里包含标签，要将标签的\"<\"换成实体\"&lt ;\"，把\">\"换成实体\"&gt ;\"\r\n\r\n### 折叠目录tree\r\nhttps://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%A4%87%E4%BB%BD%2Flianxi%2Ftree',8,100,'2019-02-21 11:30:58','2019-03-10 12:17:26'),(100,'## 远程服务器\r\n### 用 Xshell 工具远程登录服务器\r\n教程：https://blog.csdn.net/datadev_sh/article/details/79593360\r\n### 修改 ssh 远程登录端口\r\n其实修改ssh端口后并无卵用，因为可以遍历请求端口号，最终找到正确的端口\r\n```\r\n在Xshel5中遍历ssh端口号：\r\n\r\nssh root@35.236.128.33 10   //Could not connect to \'35.236.128.33\' (port 2230)\r\nssh root@35.236.128.33 11	//Could not connect to \'35.236.128.33\' (port 2230)\r\n.....\r\nssh root@35.236.128.33 22	//Could not connect to \'35.236.128.33\' (port 2230)\r\nssh root@35.236.128.33 23	//Could not connect to \'35.236.128.33\' (port 2230)\r\n.....\r\nssh root@35.236.128.33 2232	//Could not connect to \'35.236.128.33\' (port 2230)\r\nssh root@35.236.128.33 2233	//尝试成功，开始要求用户登录认证。由此证明修改ssh端口号是无用的。\r\n```\r\n1.打开ssh端口配置文件 \r\n```\r\nvi /etc/ssh/sshd_config\r\n```\r\n2.修改默认22号端口，修改成别的\r\n```\r\n17 Port 22   //把22修改成别的，如：333\r\n18 #AddressFamily any\r\n19 #ListenAddress 0.0.0.0\r\n20 #ListenAddress ::\r\n```\r\n3.重启ssh服务器\r\n```\r\nservice sshd restart\r\n```\r\n不过重启会失败，需要关闭SELinux。关闭SELinux后，重启ssh服务器就会成功。\r\n关闭SELinux命令如下：\r\n```\r\nsetenforce 0\r\n```\r\n### ssh安全策略\r\n既然修改ssh端口号无用，那么就禁用root用户ssh远程登录\r\n打开ssh配置文件sshd_config\r\n```\r\nvi /etc/ssh/sshd_config\r\n```\r\n编辑sshd_config文件，设置不允许root用户ssh远程登录，不允许账户密码登录。\r\n```\r\n35 # Authentication:\r\n36\r\n37 #LoginGraceTime 2m\r\n38 PermitRootLogin no    //此设置为“是否允许root用户ssh登录”，“no\"不允许，\"yes\"允许。默认为“no”\r\n39 #StrictModes yes\r\n40 #MaxAuthTries 6\r\n41 #MaxSessions 10\r\n \r\n62 # To disable tunneled clear text passwords, change to no here!\r\n63 #PasswordAuthentication yes\r\n64 #PermitEmptyPasswords no\r\n65 PasswordAuthentication no   //此设置为“是否允许账户密码登录”，\"no\"不允许，\"yes\"允许。默认为“no”\r\n```',6,100,'2019-02-21 11:38:06','2019-02-21 11:41:22'),(101,'## vs code编辑器\r\n### vs code插件\r\n`live server`插件：在vs code中安装live server插件后，右键打开文件，将以服务器（ip+port）的形式打开。\r\n`open in browser`：右键在浏览器中打开。 \r\n`Vetur`：编辑.vue文件时用的\r\n`Vue VSCode Snippets`：写.vue模板的一些代码\r\n### vscode设置（User Settings）\r\n格式化代码需要安装vscode中的vetur插件\r\n```\r\n{\r\n    \"files.autoSave\": \"onFocusChange\",  // 代码自动保存\r\n    \"git.ignoreMissingGitWarning\": true, \r\n    \"window.zoomLevel\": 0,\r\n    \"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\Sysnative\\\\cmd.exe\",\r\n    \"editor.tabSize\": 2, //一个tab等于2个空格\r\n    \"editor.minimap.enabled\": false,\r\n    // \"editor.formatOnSave\": true, //每次保存的时候自动格式化\r\n    \"eslint.autoFixOnSave\": false,  // 每次保存的时候将代码按eslint格式进行修复\r\n    \"prettier.singleQuote\": true, // 用单引号优先\r\n    \"prettier.trailingComma\": \"none\", // 设置最后一个对象元素不加逗号\r\n    \"prettier.semi\": true, // 句末自动加分号\r\n    \"vetur.format.defaultFormatter.html\": \"js-beautify-html\", // 格式化html代码 \r\n}\r\n```\r\n### .eslintrc.js 文件设置\r\n```\r\nrules: {\r\n    // allow async-await\r\n    \'generator-star-spacing\': \'off\',\r\n    // allow debugger during development\r\n    \'no-debugger\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\r\n    // 强制书写分号\r\n    \'semi\': [\'error\', \'always\'],\r\n    // 方法后面可以不加空格\r\n    \'space-before-function-paren\': \'off\',\r\n    // 解决spaces和tabs问题：\"Expected indentation of 4 spaces but found 2 tabs\"的问题\r\n    \'no-tabs\': 0,\r\n    \'no-mixed-spaces-and-tabs\': 0,\r\n    \'indent\': [\"off\", \"tab\"],\r\n    // \'no-trailing-spaces\': 0,\r\n}\r\n```',9,100,'2019-02-21 11:44:52','2019-02-21 11:51:17'),(102,'## 播放器\r\nIINA播放器：这个播放器可以播放直播流，并且可以倍速播放视频，倍速播放效果还可以。（有mac版本的）',9,100,'2019-02-21 11:45:19','2019-02-21 11:51:32'),(103,'## Markdown 语法入门\r\n参考网址：https://www.jianshu.com/p/0130ad32a08d',9,100,'2019-02-21 11:48:06','2019-02-21 11:51:41'),(104,'## Vue 官网\r\n官网：https://vuejs.org\r\n官网API: https://cn.vuejs.org/v2/api/\r\n官网教程：https://cn.vuejs.org/v2/guide/\r\nhttps://vuejs.bootcss.com',10,100,'2019-02-24 14:30:03','2019-02-25 03:06:16'),(105,'## vue相关安装与使用',10,100,'2019-02-24 14:32:04','2019-02-24 14:32:04'),(106,'### vue安装与使用\r\nhttps://cn.vuejs.org/v2/guide/    https://vuejs.bootcss.com , 共有4种安装方式，如下：\r\n```\r\n第一种方式：直接下载vue.js文件，并用<script>标签引入\r\n第二种方式：以cdn的方式引入vue.js文件\r\n第三种方式：以npm方式安装  → $ npm install vue\r\n第四种方式：使用命令行工具vue-cli → \r\n\r\n```\r\nvue的使用\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n    { { msg } }\r\n  </div>\r\n</body>\r\n<!-- <script src=\"./vue.js\"></script> -->\r\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"></script>\r\n<script>\r\n  // 实例化：new\r\n  var vm = new Vue({\r\n      el: \"#app\", // 这个vue元素是用来操作id名为app的元素\r\n      data: { // 用来给vue对象提供数据 \r\n          msg: \"hello vue\",\r\n          name: \"itcast\"\r\n      }\r\n  });\r\n</script>\r\n```\r\n### Vue CLI（项目脚手架）\r\n帮助搭建项目结构，官网：https://cli.vuejs.org/\r\n使用 vue-cli2.0 版本搭建项目结构\r\n—— 1.0 全局安装\r\n```bash\r\nnpm install -g @vue/cli\r\n或\r\nyarn global add @vue/cli\r\n```\r\n```\r\n注意点：\r\n— 1.0 这里默认安装的3.0版本\r\n— 2.0 判断安装成功：vue --version/vue -V\r\n```\r\n—— 2.0 拉取vue2.x版本（旧版本），需安装\r\n```\r\nnpm install -g @vue/cli-init\r\n```\r\n———— **拉取2.x版本项目**\r\n```\r\nvue init webpack my-project\r\n```\r\n```\r\n注意点：\r\n- 1.0 如果是3.0版本这个可以完全不用安装\r\n- 2.0 由于我们要使用2.0版本的生成方式，所以需要下载这个\r\n```\r\n—— **3.0 生成项目结构**\r\n```\r\nvue init webpack 项目名\r\n\r\n- Project name：项目名\r\n- Project description: 项目描述\r\n- Author: 作者\r\n- Vue build：\r\n  - 第一种：配合大部分的开发人员（建议选这个）\r\n  - 第二种：仅仅中有runtime\r\n- Install vue-router? 是否安装vue-router（建议安装）\r\n- Use ESLint to lint your code? 是否使用ESLint来验证我们的语法。（建议使用）\r\n- Pick an ESLint preser:使用哪种语法规范来检查我们的代码：\r\n  - Standard: 标准规范（建议选标准）\r\n  - Airbnb: 爱彼迎规范\r\n- Set up unit test: 设置单元测试（建议不测试）\r\n- Setup e2e tests： 设置端对端测试（建议不测试个）\r\n- Should we run \'npm install\':要不要帮忙你下载这个项目需要的第三方包\r\n  - 使用npm来下载（可以先下载，也可在项目下载好后，再下载第三分包 npm install 即可）\r\n  - 使用yarn来下载\r\n\r\n```\r\n—— 4.0 项目结构介绍\r\n```\r\n  ├── build				webpack打包相关配置文件目录\r\n  ├── config				webpack打包相关配置文件目录\r\n  ├── node_modules		 第三方包\r\n  ├── src					项目源码(主战场)\r\n  │   ├── assets			 存储静态资源，例如 css、img、fonts\r\n  │   ├── components		 存储所有公共组件\r\n  │   ├── router			 路由\r\n  │   ├── App.vue			 单页面应用程序的根组件\r\n  │   └── main.js			 程序入口，负责把根组件替换到根节点\r\n  ├── static				可以放一些静态资源\r\n  │   └── .gitkeep		 git提交的时候空文件夹不会提交，这个文件可以让空文件夹可以提交\r\n  ├── .babelrc			 配置文件，es6转es5配置文件，给 babel 编译器用的\r\n  ├── .editorconfig		 给编辑器看的\r\n  ├── .eslintignore	      给eslint代码风格校验工具使用的，用来配置忽略代码风格校验的文件或是目录\r\n  ├── .eslintrc.js		 给eslint代码风格校验工具使用的，用来配置代码风格校验规则\r\n  ├── .gitignore			 给git使用的，用来配置忽略上传的文件\r\n  ├── index.html			 单页面应用程序的单页\r\n  ├── package.json		 项目说明，用来保存依赖项等信息\r\n  ├── package-lock.json	  锁定第三方包的版本，以及保存包的下载地址\r\n  ├── .postcssrc.js		  给postcss用的，postcss类似于 less、sass 预处理器\r\n  └── README.md			 项目说明文档\r\n```\r\n### 用 Vue CLI 快速搭建一个vue前端项目\r\n创建项目命令 (vue2.x版本)\r\n```\r\nvue init webpack my-project\r\n```\r\n启动项目，查看是否成功\r\n```\r\nnpm run dev\r\n```\r\n修改eslint校验（详情参看eslint校验 章节）（可选）\r\n```\r\nnpm run lintfix\r\n```\r\n删除示例代码文件，如下\r\n```\r\nApp.vue中的：模板内容、js内容、css内容\r\nrouter/index.js中的：helloworld的路由规则\r\nHelloWorld.vue组件\r\n```\r\n然后可以写自己的项目代码了\r\n### 若在虚拟机中运行 主机访问 需注意\r\n若vue项目运行在虚拟机中，而要在主机中访问，可以修改`config/index.js`文件中`host` `port`属性\r\n```\r\nhost: \'home.test\',  // 把默认值 localhost 改成指向虚拟机域名 home.test\r\nport: 8080,\r\n```\r\n### 快速启动项目（start.bat）\r\nwindow系统下，利用双击.bat文件，来快速执行cmd命令\r\n—— 在项目目录下创建start.bat，用编辑器编辑文件，输入cmd命令即可。\r\n```\r\n// 快速启动node项目的命令\r\nnode app.js\r\n```\r\n```\r\n// 快速启动vue项目的命令\r\nnpm run dev\r\n```\r\n### 在浏览器中预览\r\n运行 npm run dev 后，得到开发环境的预览网址：http://localhost:8080 (这是默认网址)\r\n如果修改过了 `config/index.js`文件，可以得到自定义的网址，如：http://home.test:8080 (自定义网址)',10,100,'2019-02-24 14:36:52','2019-03-26 08:10:14'),(107,'### Vue.js devtools 调试工具安装\r\n ue.js  devtools 可以方便的调试vue项目，查看vue数据变量。\r\n安装：此工具是chrome的一个插件，直接在谷歌应用商店搜索安装即可。\r\n使用：Vue.js devtools使用有3个条件\r\n—— 打开的网站必须是通过服务器打开的\r\n—— 网站必须是用vue写的\r\n—— 使用的vue必须是开发版本，如果是生产也可能打不开',10,100,'2019-02-24 14:39:38','2019-02-24 14:39:38'),(108,'## vue指令',10,100,'2019-02-24 14:41:26','2019-02-24 14:41:26'),(109,'### 插值表达式 { {} }\r\n插值表达式：{ {  } }\r\n它可输出字符串\r\n按原文输出html代码\r\n执行js代码\r\n——  js代码必须有返回值，必须是表达式，不能是js语句\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 插值表达式来输出 -->\r\n        <!-- 1.0 文本 -->\r\n        { { msg } } <br>       \r\n        <!-- 2.0 按原样输出html -->\r\n        { { htmlStr } } <br>       \r\n        <!-- 3.0 js表达式 -->\r\n        { { number + 1 } } <br>       \r\n        { { ok? \"YES\": \"NO\" } } <br>        \r\n        { { arrStr.split(\',\').reverse().toString() } } <br>        \r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"hello vue\",\r\n            htmlStr: \"<p>我是一个p标签</p>\",\r\n            number: 0,\r\n            ok: false,\r\n            arrStr: \"a,b,c,d\"\r\n        }        \r\n    });\r\n</script>\r\n```',10,100,'2019-02-24 14:44:09','2019-02-24 14:44:09'),(110,'### v-html (单向输出数据)\r\nv-html 用来在页面上的某一标签中输出一段html代码，它会解析html、js代码，有安全风险。\r\n与js中的innerHTML比较相似\r\n安全警告：在使用v-html时需要格外注意，有可能会被不法分子做xss攻击\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <div v-html=\"strHtml\"></div>\r\n        <div v-html=\"xss\"></div>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // v-html输出html代码\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            strHtml: \"<p>p标签</p>\",\r\n            xss: \"<p onclick=\'alert(1)\'>xss攻击</p>\"\r\n            // 将来如果将alert的代码转为ajax的代码，并且通过js取得当前浏览器的cookie信息\r\n        }        \r\n    });\r\n</script>\r\n```',10,100,'2019-02-24 14:46:24','2019-02-24 14:46:24'),(111,'### v-text (单向数据输出)\r\nv-text 用来在页面上的某一标签中输出一段普通文本,它不会解析html、js代码，会将他们原样输出\r\n与js中的innerText/textContent类似\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <div v-text=\"strHtml\"></div>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // v-text输出文本\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            strHtml: \"<p>p标签</p>\"\r\n        }        \r\n    });\r\n</script>\r\n```',10,100,'2019-02-24 14:49:44','2019-02-24 14:49:44'),(112,'### v-bind（: 单向绑定数据）\r\nv-bind 给html元素的属性绑定数据\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 1.0 给图片绑定的属性： -->\r\n        <img v-bind:src=\"src\" v-bind:alt=\"alt\">\r\n        <img v-bind=\"{src: src}\" v-bind:alt=\"alt\">\r\n        <!-- 将vm对象中的src属性绑定给图片的src属性 -->\r\n        <br>\r\n        <!-- 2.0 给a标签绑定属性 -->\r\n        <a v-bind:href=\"\'/del.php?id=\' + id\">删除</a>\r\n        <br>\r\n        <!-- 3.0 绑定类名:class -->\r\n        <!-- 4.0 绑定样式:style-->\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            src: \'4.jpg\',\r\n            alt: \'美女图片\',\r\n            id: 1\r\n        }        \r\n    });\r\n</script>\r\n```\r\nv-bind 绑定class类名\r\n```html\r\n<style>\r\n  .pink {\r\n    color: pink;\r\n  }\r\n  .font20 {\r\n    font-size: 20px;\r\n  }\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 类名绑定的第一种方式：对象方式来绑定 -->\r\n        <p v-bind:class=\"{pink: isPink, font20: isFont20}\">小刚刚</p>\r\n        <!-- \r\n            可以用来绑定类名对象\r\n                对象的属性为一个类名：这个类名需要在css中定义\r\n                属性对应的值为bool值 ：\r\n                    如果值为false，那么这个值对应的类名就不会显示 到class中\r\n                    如果值为true，那么这个值对应的类名就会显示 到class中\r\n         -->\r\n        <!-- 类名绑定的第二种方式：数组方式来绑定 -->\r\n        <p v-bind:class=\"[color, fontSzie]\">大刚刚</p>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            isPink: false,\r\n            isFont20: true,\r\n            color: \'pink\',\r\n            fontSzie: \'font20\'\r\n        }        \r\n    });\r\n</script>\r\n```\r\nv-bind 绑定style\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 绑定style：1.0 用对象方式来绑定 -->\r\n        <p v-bind:style=\"{color: color, fontSize: fontSize + \'px\'}\">柳岩</p>\r\n        <!-- 绑定style：2.0 用数组方式来绑定 -->\r\n        <p v-bind:style=\"[myColor, myFontSize]\">热巴</p>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            color: \"red\",\r\n            fontSize: 20,\r\n            myColor: {\r\n                color: \"red\"\r\n            },\r\n            myFontSize: {\r\n                fontSize: \"20px\"\r\n            }\r\n        }        \r\n    });\r\n</script>\r\n```\r\nv-bind 简写\r\n—— \"v-bind: \"可以简写： \":\"\r\n```html\r\n<img :src=\"src\" :alt=\"alt\">\r\n```',10,100,'2019-02-24 14:53:33','2019-02-24 14:53:33'),(113,'### v-model（双向数据绑定）\r\n绑定表单，只能作用在表单元素上，双向数据绑定\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <input type=\"text\" v-model=\"val\">\r\n        <br>\r\n        { { val } }\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // 双向数据绑定：\r\n    //  vm中的数据发生改变，视图中的数据也会相应的发生改变\r\n    //  视图中的数据发生改变(表单改变value值），vm中的数据也会相应的发生改变，\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            val: \"abc\"\r\n        }        \r\n    });\r\n</script>\r\n```\r\nv-model绑定表单元素\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 1.0 使用v-model给文本框绑定数据: 双向数据绑定-->\r\n        <input type=\"text\" v-model=\"msg\">\r\n        <br>\r\n        { {msg} }\r\n        <hr>\r\n        <!-- 2.0 使用v-model给多行文本框绑定数据   -->\r\n        < textarea v-model=\"msg1\"></ textarea>\r\n        <br>\r\n        { {msg1} }\r\n        <hr>\r\n        <!-- 3.0 使用v-model给复选框绑定数据  -->\r\n        <!-- 3.1 绑定的是一个复选框 -->\r\n        <input type=\"checkbox\" v-model=\"checkbox\">\r\n        <br>\r\n        { {checkbox} }\r\n        <hr>\r\n        <!-- 3.2 绑定的是多个复选框 -->\r\n        <input type=\"checkbox\" value=\"eat\" v-model=\"checkboxArr\">吃饭\r\n        <input type=\"checkbox\" value=\"sleep\" v-model=\"checkboxArr\">睡觉\r\n        <input type=\"checkbox\" value=\"ddd\" v-model=\"checkboxArr\">打豆豆\r\n        <br>\r\n        { {checkboxArr} }\r\n        <hr>\r\n        <!-- 4.0 绑定单选框 -->\r\n        <input type=\"radio\" value=\"男\" name=\"gender\" v-model=\"radio\">男\r\n        <input type=\"radio\" value=\"女\" name=\"gender\" v-model=\"radio\">女\r\n        <br>\r\n        { {radio} }\r\n        <hr>\r\n        <!-- 5.0 给下拉框绑定数据 -->\r\n        <select v-model=\"selected\">\r\n            <option value=\"-1\">请选择</option>\r\n            <option value=\"0\">A</option>\r\n            <option value=\"1\">B</option>\r\n            <option value=\"2\">C</option>\r\n        </select>\r\n        <br>\r\n        { {selected} }\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"abc\",\r\n            msg1: \"one\",\r\n            checkbox: \"\", // 值为true / false\r\n            checkboxArr: [\"eat\",\"ddd\"],\r\n            radio: \"女\",\r\n            selected: -1\r\n        }\r\n    });\r\n</script>\r\n```\r\nv-model修饰符\r\n`.lazy` 取代 input 监听 change 事件，为避免input输入时频繁双向绑定，.lazy 当数据修改完成，并且表单元素失去焦点时才会进行双向绑定\r\n`.number` 因为所有表达元素得到的将都是字符串，.number可将输入字符串转为数字 \r\n`.trim` 输入首尾空格过滤\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 1.0 .lazy 当数据修改完成，并且表单元素失去焦点时才会进行双向绑定-->\r\n        <input type=\"text\" v-model.lazy=\"one\"><br>        \r\n        { {one} } <hr>       \r\n        <!-- 2.0 .number 可以将表单元素得到的字符串转为数字 -->\r\n        <input type=\"number\" v-model.number=\"two\"> <br>        \r\n        { {two} } <hr>       \r\n        <!-- 3.0 .trim -->\r\n        <input type=\"text\" v-model.trim=\"three\"> <br>       \r\n        { {three} }\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            one: \"abc\",\r\n            two: 18,\r\n            three: \"abc\"\r\n        }        \r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 01:24:57','2019-02-25 01:44:08'),(114,'### v-on（@ 绑定事件）\r\nv-on给元素绑定事件，v-on可以进行简写： @\r\n\r\nv-on有很多的修饰符：\r\n`.stop` - 调用 `event.stopPropagation()`。阻止事件冒泡\r\n`.prevent` - 调用 `event.preventDefault()`。阻止默认行为\r\n`.capture` - 添加事件侦听器时使用 capture 模式。\r\n`.self` - 只当事件是从侦听器绑定的元素本身触发时才触发回调。\r\n`.{keyCode | keyAlias}` - 只当事件是从特定键触发时才触发回调。\r\n`.native` - 监听组件根元素的原生事件。\r\n`.once` - 只触发一次回调。\r\n`.left` - (2.2.0) 只当点击鼠标左键时触发。\r\n`.right` - (2.2.0) 只当点击鼠标右键时触发。\r\n`.middle` - (2.2.0) 只当点击鼠标中键时触发。\r\n`.passive` - (2.3.0) 以 { passive: true } 模式添加侦听器\r\n\r\n------------\r\n\r\n事件的类型：\r\n`click`：点击事件\r\n`keyup`：按钮事件（键盘修饰符： .enter  .tab  .delete .esc  .space  .up  .down  .left  .right ），@keyup.enter=\"doThis\" 表示释放“enter键”才执行doThis方法\r\n`submit`：提交事件\r\n`事件大全`：https://developer.mozilla.org/zh-CN/docs/Web/Events\r\n\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 设置一个元素，并且给这个元素设置一个点击事件 -->\r\n        <!-- <button v-on:click=\"doThis\">点我有惊喜</button> -->\r\n        <button @click=\"doThis\">点我有惊喜</button>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n        },\r\n        methods: {\r\n            doThis: function(){\r\n                alert(\'这就是传说中的惊喜\');\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```\r\n```html\r\n<!-- 方法处理器 -->\r\n<button v-on:click=\"doThis\"></button>\r\n<!-- 内联语句 -->\r\n<button v-on:click=\"doThat(\'hello\', $event)\"></button>\r\n<!-- 缩写 -->\r\n<button @click=\"doThis\"></button>\r\n<!-- 停止冒泡 -->\r\n<button @click.stop=\"doThis\"></button>\r\n<!-- 阻止默认行为 -->\r\n<button @click.prevent=\"doThis\"></button>\r\n<!-- 阻止默认行为，没有表达式 -->\r\n<form @submit.prevent></form>\r\n<!--  串联修饰符 -->\r\n<button @click.stop.prevent=\"doThis\"></button>\r\n<!-- 键修饰符，键别名 -->\r\n<input @keyup.enter=\"onEnter\">\r\n<!-- 键修饰符，键代码 -->\r\n<input @keyup.13=\"onEnter\">\r\n<!-- 点击回调只会触发一次 -->\r\n<button v-on:click.once=\"doThis\"></button>\r\n<!-- 对象语法 (2.4.0+) -->\r\n<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\r\n```',10,100,'2019-02-25 01:50:32','2019-02-25 01:55:42'),(115,'### $event事件参数（事件对象）\r\n@click=\"del(1, $event)\"，`$event`是固定写法，传递一个事件对象\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 没有传参时，会有一个默认的事件对象 -->\r\n        <a href=\"http://www.baidu.com\" @click=\"go\">点我go</a> <br>\r\n        <!-- 事件传参时，$event是固定写法，传递一个事件对象 -->\r\n        <a href=\"#\" @click=\"del(1, $event)\">点我删除</a>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n        },\r\n        methods: {\r\n            go(e) { //默认有一个事件对象\r\n                e.preventDefault(); //阻止默认a标签的默认跳转事件\r\n                console.log(\'我是一个按钮\');\r\n            },\r\n            del(id, e) {  // 得到事件参数id、和事件对象e\r\n                e.preventDefault(); //阻止默认行为\r\n                console.log(id); \r\n                console.log(e);\r\n            }\r\n        }        \r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 02:02:28','2019-02-25 02:02:28'),(116,'### v-show (显示与否)\r\n可以用来控制元素的display属性：如果值为true，那么元素display: block;否则元素的display:none\r\nv-show只是视觉上的显示与否，元素并没有在页面上消失。\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <button @click=\"showfun\">控制元素的显示和隐藏</button>\r\n        <p v-show=\"isShow\">{ { msg } }</p>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"hello vue\",\r\n            isShow: false\r\n        },\r\n        methods: {\r\n            showfun() {                \r\n                this.isShow = !this.isShow;  // this指向的是vm对象\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```\r\n### v-if (显示与否)\r\n与v-show基本一样的（**v-if元素会在页面上完全消失**）\r\n`v-if`  `v-else-if`  `v-else`\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <button @click=\"show\">控制元素的显示和隐藏</button>\r\n        <!-- 1.0 控制显示与隐藏，隐藏时元素会完全消失 -->\r\n        <p v-if=\"isShow\">{ { msg } }</p>\r\n        <hr>\r\n        <!-- 2.0 以下4个p标签，页面上只会显示1个 -->\r\n        <p v-if=\"score === \'A\'\" >A</p>\r\n        <p v-else-if=\"score ===\'B\'\">B</p>\r\n        <p v-else-if=\"score ===\'C\'\">C</p>\r\n        <p v-else>其它</p>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"hello vue\",\r\n            isShow: false,\r\n            score: \"D\"\r\n        },\r\n        methods: {\r\n            show() {\r\n                // this指向的是vm对象\r\n                this.isShow = !this.isShow;\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 02:06:56','2019-02-25 02:06:56'),(117,'### v-for（遍历数据）\r\nv-for遍历数据\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 使用 v-for 来遍历数组 -->\r\n        <ul>\r\n            <li v-for=\"(item,index) in arr\">{ {item} }---{ {index} }</li>\r\n        </ul>\r\n        <!-- 使用 v-for 来遍历对象 -->\r\n        <ul>\r\n            <li v-for=\"(item,key) in obj\">{ {item} }---{ {key} }</li>\r\n        </ul>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            arr: [\"a\",\"b\",\"c\"],\r\n            obj: {\r\n                id: 1,\r\n                name: \'张三\',\r\n                age: 18\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```\r\n#### v-for中key的作用\r\n为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n    <ul>\r\n      <li v-for=\"(item, index) in dataList\" :key=\"item.id\"><input type=\"text\">{ {item.name} }</li>\r\n    </ul>\r\n    <button @click=\"go\">点我将数据源反转</button>\r\n  </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n  var vm = new Vue({\r\n    el: \"#app\",\r\n    data: {\r\n      dataList: [\r\n        {name: \'张三\', age: 18, id: 1},\r\n        {name: \'张四\', age: 19, id: 2},\r\n        {name: \'张杰\', age: 20, id: 3}\r\n      ]\r\n    },\r\n    methods: {\r\n      go() {\r\n        this.dataList = this.dataList.reverse();\r\n      }\r\n    }\r\n  });\r\n</script>\r\n```',10,100,'2019-02-25 02:10:50','2019-02-25 02:10:50'),(118,'### v-cloak（优化dom加载）\r\n`v-cloak`属性会在vue实例结束编译时消失，结合css属性选择器 [v-cloak] { display: none }  一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。\r\n**如果不用v-cloak会导致的问题**： 页面会先加载dom元素，若网络较慢，此时vue的数据还未准备好，以下面代码为例，页面中会出现{ { msg } }，直到vue数据准备完毕，页面才会出现 hello vue\r\n```html\r\n<style>\r\n  [v-cloak] {\r\n    display: none;\r\n  }\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- v-cloak属性会在vue实例结束编译时消失 -->\r\n        <div v-cloak>{ { msg } }</div>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    setTimeout(function () {\r\n        var vm = new Vue({\r\n            el: \"#app\",\r\n            data: {\r\n                msg: \"hello vue\"\r\n            }\r\n        });\r\n    }, 2000);\r\n</script>\r\n```\r\n\r\n### v-once（优化更新性能）\r\n只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。\r\n```html\r\n<!-- 单个元素 -->\r\n<span v-once>This will never change: { {msg} }</span>\r\n<!-- 有子元素 -->\r\n<div v-once>\r\n  <h1>comment</h1>\r\n  <p>{ {msg} }</p>\r\n</div>\r\n<!-- 组件 -->\r\n<my-component v-once :comment=\"msg\"></my-component>\r\n<!-- `v-for` 指令-->\r\n<ul>\r\n  <li v-for=\"i in list\" v-once>{ {i} }</li>\r\n</ul>\r\n```',10,100,'2019-02-25 02:15:54','2019-02-25 02:19:50'),(119,'## 全局API',10,100,'2019-02-25 02:22:32','2019-02-25 02:22:32'),(120,'### 自定义指令\r\n作用：用来自己定义一些属性自己的指令\r\n#### 全局自定义指令\r\n通过vue的directive方法来定义：\r\n用法详解：https://cn.vuejs.org/v2/api/#Vue-directive  \r\n参数：\r\n—— 指令名称：在使用这个自定义指令时，需要要指令前面加上v-\r\n对象:\r\n—— inserted（钩子函数）：当被绑定的元素插入到 DOM 中时 \r\n—— 钩子函数：https://vuejs.bootcss.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\r\n———— 钩子函数：bind、intserted、update、componentUpdated、unbind\r\n—— el：绑定这个自这个自定义指令的元素\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <input type=\"text\" id=\"i1\" v-myfocus>\r\n        <input type=\"text\" id=\"i2\">\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script> \r\n    Vue.directive(\'myfocus\', {\r\n        inserted: function(el){// 当被绑定的元素插入到 DOM 中时\r\n            // console.log(el);\r\n            el.focus();\r\n        }\r\n    });\r\n    var vm = new Vue({\r\n        el: \"#app\"\r\n    });\r\n    var vm1 = new Vue({\r\n        el: \"#app1\"\r\n    });\r\n</script>\r\n```\r\n钩子函数参数\r\n—— 钩子函数参数 https://vuejs.bootcss.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\r\n```\r\n\r\n\r\n- 指令钩子函数会被传入以下参数： \r\n  - el：指令所绑定的元素，可以用来直接操作 DOM 。\r\n  - binding：一个对象，包含以下属性：\r\n    - name：指令名，不包括 v- 前缀。\r\n    - value：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。\r\n    - oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\r\n    - expression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。\r\n    - arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。\r\n    - modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\r\n```\r\n—— 利用自定义指令（钩子函数参数）实现：设置输入框背景颜色\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <input type=\"text\" id=\"i1\" v-myfocus v-my-color=\"color\">\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // 自动获取焦点\r\n    Vue.directive(\'myfocus\', {\r\n        inserted: function (el) { //钩子函数参数el\r\n            el.focus();\r\n        }\r\n    });\r\n    // 自动设置背景颜色\r\n    Vue.directive(\'myColor\', {\r\n        inserted: function (el, binding) { // v-my-color color red\r\n            // el.style.backgroundColor = \'pink\';\r\n            // 这里的背景颜色 应该是由color属性来控制的\r\n            el.style.backgroundColor = binding.value;\r\n            // console.log(binding);\r\n        }\r\n    });\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            color: \'pink\'\r\n        }\r\n    });\r\n</script>\r\n```\r\n#### 局部自定义指令\r\n如果想注册局部指令，组件中也接受一个 directives 的选项：\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        <input type=\"text\" id=\"i1\" v-myfocus>\r\n        <input type=\"text\" id=\"i2\" v-myfocus>\r\n        <input type=\"text\" id=\"i3\" v-myfocus>\r\n        <input type=\"text\" id=\"i4\">        \r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        directives: {\r\n            //局部自定义指令\r\n            \"myfocus\": {\r\n                inserted: function(el){\r\n                    el.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 02:26:34','2019-02-25 02:52:20'),(121,'## 实例方法/数据\r\n### vm.$set\r\n如果要动态的添加数据的属性，必须用 $set() 方法来设置，属性值更新时页面才会渲染； 否则不会渲染\r\n官网：https://cn.vuejs.org/v2/api/#vm-set\r\n实例：https://github.com/andy-love-coding/my-app/blob/master/src/views/goods/params.vue\r\n```javascript\r\nthis.dynamicData.forEach(element => {\r\n	// 在vue中，如果要动态设置数据的属性，必须用$set()方法来设置，属性值更新时页面才会渲染； 否则不会渲染\r\n	// element.temp_vals = element.attr_vals.split(\',\'); // 这种方式设置的动态属性，数据更新时页面不会渲染\r\n	this.$set(element, \'temp_vals\', element.attr_vals ? element.attr_vals.split(\',\') : []);\r\n});\r\n```',10,100,'2019-02-25 02:54:09','2019-02-25 03:00:09'),(122,'## 实例方法/生命周期\r\n### vm.$nextTick\r\n$nextTick 将回调延迟到下次 DOM 更新循环之后执行，对于获取v-if隐藏的元素，要用此方法\r\n官网：https://cn.vuejs.org/v2/api/#vm-nextTick\r\n```javascript\r\nshowInput () {\r\n  this.inputVisible = true\r\n  // $nextTick将自己的回调函数 延迟到下次 DOM 更新循环之后执行，这样就能保证回调函数执行时，DOM都更新好了\r\n  // console.log(this.$refs.saveTagInput); // undefined\r\n  // 因为el-input默认隐藏（v-if），dom还没更新，还没渲染出来，所以为undefined\r\n  this.$nextTick(_ => {\r\n    // console.log(this.$refs.saveTagInput); // VueComponent{_uid: 82, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: VueComponent,…}\r\n    this.$refs.saveTagInput.$refs.input.focus()\r\n  })\r\n}\r\n```',10,100,'2019-02-25 03:07:31','2019-04-05 16:33:44'),(123,'## 过滤器\r\n### 私有过滤器\r\n私有过滤器，定义在vm中的`filters`属性中\r\n注意点：\r\n—— 过滤器的方法中默认有一个参数：就是将来要使用这个过滤器的数据\r\n—— 过滤器需要返回数据 \r\n使用：{ { msg | myReverse } }\r\n```javascript\r\n<body>\r\n    <div id=\"app\">\r\n        <!-- 将 msg 进行反转 输出 -->\r\n        <!-- 1.0 表达式反转（过滤） -->\r\n        { { msg.split(\" \").reverse().join(\" \") } }\r\n        <!-- 2.0 方法反转（过滤） -->\r\n        { { reverseStr() } }<br/>\r\n        { { reverseStr() } }<br/>\r\n        { { reverseStr() } }<br/>        \r\n        <!-- 3.0 过滤器反转（过滤） -->\r\n        { { msg | myReverse } }\r\n        <!-- 如果直接将这段代码封装到一个方法中，那么将来每次执行这个方法的时候代码都会执行一遍 -->\r\n        <!-- 为了解决方法每次执行都会重新执行代码。我们可以使用过滤器 -->\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"hello vue\"\r\n        },\r\n        methods: {\r\n            reverseStr() {\r\n                return this.msg.split(\" \").reverse().join(\" \");\r\n                // return new Date();//当这个方法调用足够多少，时间就不一样，就证明方法反复执行了代码\r\n            }\r\n        }, // 添加过滤器的属性 filters\r\n        filters: {\r\n            myReverse: function(val) {\r\n                return val.split(\" \").reverse().join(\" \");\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```\r\n### 全局过滤器\r\n定义：\r\n—— Vue.filter(\'过滤器名\', 函数)\r\n—— 它的使用与私有过滤器一样\r\n过滤器的参数：\r\n—— 默认的第1个参数（形参）：就是使用这个过滤器的数据（即将来要过滤的那个数据）。\r\n—— 过滤器的第1个实参，对应过滤器的第2个形参；第2个实参，对应第3个形参；以此类推。\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        { { time | myTime(\"-\",\"-\") } }\r\n    </div>\r\n    <div id=\"app2\">\r\n        { { time | myTime(\"-\",\"-\") } }\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // 定义一个全局过滤器，val代表将来要过的数据，其后是过滤器参数\r\n    Vue.filter(\"myTime\", function (val, splitStr1, splitStr2) {\r\n        // 得到时间的年月日\r\n        var y = val.getFullYear()\r\n        var m = val.getMonth();\r\n        var d = val.getDate();\r\n        return `${y}${splitStr1}${splitStr2}${m}${splitStr1}${splitStr2}${d}`;\r\n    });\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            time: new Date()\r\n        }\r\n    });\r\n    var vm2 = new Vue({\r\n        el: \"#app2\",\r\n        data: {\r\n            time: new Date()\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 03:16:00','2019-02-25 06:53:54'),(124,'## 选项/数据\r\n### computed（计算属性）\r\n作用：用来根据现有的属性计算出新的属性来\r\n定义：\r\n—— 1.0 找到要设计计算属性的vm对象\r\n—— 2.0 给vm添加一个属性： computed\r\n—— 3.0 给computed 添加一个属性：这个属性也是一个方法，这个属性就是我们的计算属性\r\n使用：\r\n—— 直接当data中的变量来使用就OKEY了\r\n优点：\r\n—— 每次计算出结果后会将结果进行【缓存】 以此来优化代码。\r\n缺点：\r\n—— 当计算的数据来自网络请求，则因为计算属性有缓存的原因，就不能及时重新计算出最新的值。所以，一般对于网络请求的数据，通常用【侦听器】来检测数据的变化，当有变化时执行对应的回调函数。\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        姓：<input type=\"text\" v-model=\"firstName\">\r\n        名：<input type=\"text\" v-model=\"lastName\">\r\n        <br>\r\n        { { getFullName() } }\r\n        { { fullName } }\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            firstName: \' \',\r\n            lastName: \' \',\r\n            time: \' \'\r\n        },\r\n        methods: {\r\n            getFullName() {\r\n                return this.firstName + this.lastName;\r\n                // 他每次拿到name都会执行一遍这个代码\r\n            }\r\n        },\r\n        computed: {\r\n            // 计算全名称：这个方法只要在firstName/lastName其中一个发生改变时才会变化\r\n            fullName() {\r\n                console.log(this.firstName);\r\n                // this.time = new Date();\r\n                // return this.firstName + this.lastName;\r\n                this.time = new Date()\r\n                return {\r\n                    time: this.time,\r\n                    lastName: this.lastName\r\n                }\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 06:59:10','2019-02-25 07:13:13'),(125,'### watch（侦听器）\r\n可以用来监控一个已经有的属性，如果这个属性发生改变就执行后面的回调函数。\r\nwatch与computed的区别：\r\n—— 计算属性是计算出一个新属性，这个属性之前并不存在；侦听器用来监控已有的属性。\r\n—— 计算属性有缓存，对于网络请求的数据监控，会更新不及时，因此对于网络请求的数据，通常用【侦听器】来监控，当数据有变化时，执行相应的回调函数。\r\n\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        姓： <input type=\"text\" v-model=\"firstName\"><br/>\r\n        名： <input type=\"text\" v-model=\"lastName\"><br/>\r\n        { { fullName } }<br/>\r\n        { { newFullName } } \r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // 使用侦听器来得到全名称\r\n    //  可以用来监控一个已经有的属性,当这个属性中的内容发生变化时，执行回调函数\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            firstName: \'\',\r\n            lastName: \'\',\r\n            fullName: \'\'\r\n        },\r\n        watch: {\r\n            // 将来这个侦听器会去侦听firstName属性，如果这个属性改变，会执行后央的代码\r\n            firstName() {\r\n                // 当姓发生改变时，全名称也要改变\r\n                this.fullName = this.firstName + this.lastName;\r\n                // 如果这里面的数据不是直接从data中取的，而是从网络环境中来\r\n                //  axios.get()取的，如果用计算属性，他会有一个缓存，数据可能会更新不及时\r\n            },\r\n            lastName() {\r\n                this.fullName = this.firstName + this.lastName;\r\n            }\r\n        },\r\n        computed: {\r\n            // 计算出一个新的属性\r\n            newFullName() {\r\n                return this.firstName + this.lastName;\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 07:05:13','2019-02-25 07:16:09'),(126,'## 内置的组件\r\n### transition (过渡和动画)\r\n1.0 将要运动的元素放在一个transition标签\r\n2.0 给元素设置过渡动画的样式\r\n```\r\n- 在vue中如果元素是从显示到隐藏那么叫做：leave\r\n    - 三个状态：三个类名\r\n      - v-leave：隐藏之前的状态\r\n      - v-leave-active： 隐藏过程中的状态\r\n      - v-leave-to：隐藏之后的状态\r\n- 在vue中如果元素是从隐藏到显示那么叫做：enter\r\n    - 三个状态：三个类名\r\n      - v-enter：显示之前的状态\r\n      - v-enter-active：显示过程中的状态\r\n      - v-enter-to：显示之后的状态\r\n\r\n```\r\n```html\r\n<style>\r\n  .ddiv {width: 300px; position: absolute; top: 50px;}\r\n  /* 设置隐藏之前的状态，设置显示之后状态 */      \r\n  .show-leave, .show-enter-to  {opacity: 1;left: 0px;}\r\n  /* 设置隐藏过程中的动画 ，中间状态*/\r\n  .show-leave-active,.show-enter-active  {transition: all 0.3s;}\r\n  /* 设置隐藏之后的状态，设置显示之前状态 */\r\n  .show-leave-to, .show-enter {opacity: 0; left: 300px;}\r\n  .show1-leave {opacity: 1; top: 100px;}\r\n  .ddiv1 {width: 300px; position: absolute; top: 100px;}\r\n  .show1-leave-active {transition: all 1s;}\r\n  .show1-leave-to {opacity: 0;}\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <button @click=\"go\">显示/隐藏</button>\r\n        <transition name=\"show\">\r\n            <div class=\"ddiv\" v-show=\"isShow\">我是一个div</div>\r\n        </transition>\r\n        <transition name=\"show1\">\r\n            <div class=\"ddiv1\" v-show=\"isShow\">我是另一个div</div>\r\n        </transition>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            isShow: true\r\n        },\r\n        methods: {\r\n            go() {\r\n                this.isShow = !this.isShow;\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 07:19:10','2019-02-25 07:22:20'),(127,'### transition结合animate.css使用\r\n`animate.css` 是一个集合酷的，有趣的和跨浏览器的动画 。\r\n动画效果展示：https://daneden.github.io/animate.css  \r\n代码调用方法：https://www.awesomes.cn/repo/daneden/animate-css\r\n```html\r\n<link href=\"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\" type=\"text/css\">\r\n<style>\r\n  div div { width: 300px;}\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <button @click=\"go\">显示/隐藏</button>\r\n        <transition leave-active-class=\"animated fadeOutRight\" enter-active-class=\"animated fadeInRight\">\r\n            <div v-show=\"isShow\">animate.css</div>\r\n        </transition>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            isShow: true\r\n        },\r\n        methods: {\r\n            go() {\r\n                this.isShow = !this.isShow;\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 07:32:45','2019-03-26 05:34:21'),(128,'### 全局组件（Vue.component）\r\n注册全局组件\r\n```\r\nVue.component(\'组件名\' , {template:{},data: function () { return { count: 0 },methods:{} });\r\n```\r\n全局组件举例\r\n—— 组件中可以模板、数据、方法\r\n—— vm对象也是一个组件，若vm中有template，那么template就会替换掉vm对应的dom元素中的内容。\r\n```html\r\n<style>\r\n  * { margin: 0; padding: 0;}\r\n  .top {width: 100%; height: 80px; background-color: #ccc;}\r\n  .left {margin-top: 20px; width: 800px; height: 600px; background-color: #ccc; float: left;}\r\n  .right {margin-top: 20px; width: 400px; height: 600px; background-color: #ccc; float: right;}\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <top></top>\r\n        <left></left>\r\n        <right></right>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    // 三个全局组件\r\n    Vue.component(\'top\', {\r\n        template: `<div class=\"top\">\r\n                我是上<br/>\r\n                <input type=\"text\" v-model=\"txt\"><br/>\r\n                <button @click=\"fn\">点我</button>\r\n            </div>`,\r\n        data(){\r\n            return {\r\n                txt: \"topTxt\"  // 注意组件中的数据需要return\r\n            }\r\n        },\r\n        methods: {   // 组件中可以有方法\r\n            fn() {\r\n                console.log(\"我被点了\");\r\n            }\r\n        }\r\n    });\r\n    Vue.component(\'left\', {\r\n        template: `<div class=\"left\">我是左</div>`\r\n    });\r\n    Vue.component(\'right\', {\r\n        template: `<div class=\"right\">我是右</div>`\r\n    });\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            txt: \'aa\'\r\n        },\r\n        //一旦这个vm中的模板生效，那么整个#app元素都会被这个模板(#template)所替换\r\n        // template: \'<div id=\"template\">vm也是一个组件</div>\'  \r\n    });\r\n</script>\r\n```\r\n### 局部组件（components:{}）\r\n注册局部组件\r\n```\r\ncomponents: {\'组件名\'，{ template:\'\'，data:function(){return{...} } } }\r\n```\r\n局部组件举例\r\n```html\r\n<body>\r\n    <div id=\"app\">\r\n        { { msg } } <mycom></mycom>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \"我是app中的msg\"\r\n        },\r\n        components: {\r\n            \"mycom\": {\r\n                template: `<div>\r\n                    我是myCom<br/>\r\n                    <input type=\"text\" v-model=\"txt\"><br/> { {txt} }\r\n                </div>`,\r\n                data() {  \r\n                    return {\r\n                        txt: \"mycomTxt\"   // 注意组件中的数据需要return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```',10,100,'2019-02-25 08:17:38','2019-02-25 08:17:38'),(129,'## 组件传参\r\ngithub地址：https://github.com/andy-love-coding/vue-passValue\r\n### 父组件向子组件 传参预览\r\n![VPvflv.png](https://t1.picb.cc/uploads/2019/04/06/VPvflv.png)\r\n### 父组件向子组件 传参代码\r\nsrc/components/01fahterToSon.vue\r\n```\r\n<template>\r\n  <div>\r\n    <b>father.vue父组件给子组件传参</b><br />\r\n    <!-- 修改父组件数据不仅不会报错，还会把数据同步给子组件，从父到子：数据单向流动 -->\r\n    <button @click=\"num++\">+</button>\r\n    <!-- 1.0 父组件把数据num传递给子组件的属性abc -->\r\n    <son :abc=\"num\" />\r\n    <son :abc=\"num \" />\r\n    <!-- 数据单向流动：是为了防止多个子组件更改数据，导致数据冲突 -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入子组件\r\nimport son from \'@/components/01son.vue\';\r\nexport default {\r\n  data() {\r\n    return {\r\n      num: 2\r\n    };\r\n  },\r\n  // 注册组件\r\n  components: {\r\n    son\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n\r\n```\r\nsrc/components/01son.vue\r\n```\r\n<template>\r\n  <div>\r\n    son.vue <br />\r\n    <button @click=\"minus\">-</button>\r\n    <!-- 3.0子组件使用接收来的属性（数据） -->\r\n    <input type=\"text\" v-model=\"abc\">\r\n    <button @click=\"plus\">+</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n	props: [\'abc\'], // 2.0子组件接收父组件传递来的属性\r\n	methods: {\r\n		minus() {\r\n			this.abc--; // 单独修改传过来的子组件属性会报错，因为数据从父组件到子组件是：单向数据流动\r\n		},\r\n		plus() {\r\n      this.abc++; // 单独修改传过来的子组件属性会报错，因为数据从父组件到子组件是：单向数据流动\r\n      // 如果真要修改abc的话，把abc赋值给子组件自己的属性再修改就好\r\n		}\r\n	}\r\n};\r\n</script>\r\n\r\n<style>\r\ninput {\r\n	width: 30px;\r\n}\r\n</style>\r\n\r\n```\r\n### 子组件向父组件 传参预览\r\n[![VPv6vi.png](https://t1.picb.cc/uploads/2019/04/06/VPv6vi.png)](https://www.picb.cc/image/VPv6vi)\r\n### 子组件向父组件 传参代码\r\nsrc/components/02sonToFather.vue\r\n```\r\n<template>\r\n  <div>\r\n    <b>father.vue子组件给父组件传参</b><br />\r\n    { { num } }\r\n    <!-- 2.0引用子组件时定义接收事件方法 -->\r\n    <son @sonToFather=\"fn\"></son>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入子组件\r\nimport son from \'@/components/02son.vue\';\r\nexport default {\r\n  data() {\r\n    return {\r\n      num: 0\r\n    };\r\n  },\r\n	// 注册组件\r\n	components: {\r\n		son\r\n  },\r\n  methods: {\r\n    // 3.0 父组件自定义接收子组件数据的方法\r\n    fn(val) {\r\n      this.num = val;\r\n      console.log(val);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n\r\n```\r\n02son.vue\r\n```\r\n<template>\r\n  <div>\r\n    son.vue <br />\r\n    <button @click=\"minus\">-</button>\r\n    <input type=\"text\" v-model=\"sonNum\">\r\n    <button @click=\"plus\">+</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n	data() {\r\n		return {\r\n			sonNum: 1\r\n		};\r\n	},\r\n	methods: {\r\n		minus() {\r\n			this.sonNum--;\r\n			// 1.0 子组件数据改变时，将数据传递到父组件（sonToFather父组件用来定义接收事件方法的）\r\n			this.$emit(\'sonToFather\', this.sonNum);\r\n		},\r\n		plus() {\r\n      this.sonNum++;\r\n      this.$emit(\'sonToFather\', this.sonNum);\r\n		}\r\n	}\r\n};\r\n</script>\r\n<style>\r\ninput {\r\n	width: 30px;\r\n}\r\n</style>\r\n\r\n```\r\n### 兄弟组件 传参预览\r\n![VPvILL.png](https://t1.picb.cc/uploads/2019/04/06/VPvILL.png)\r\n### 兄弟组件 传参代码\r\nsrc/components/03one.vue\r\n```\r\n<template>\r\n  <div>\r\n    one.vue<br />{ { msg } } <br />\r\n    <button @click=\"pass\">传递参数到two中</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 1.0引入公共的vue对象\r\nimport commonVue from \'../assets/js/commonVue.js\';\r\nexport default {\r\n	data() {\r\n		return {\r\n			msg: \'one_msg\'\r\n		};\r\n	},\r\n	methods: {\r\n		pass() {\r\n      // 2.0 兄弟one组件将数据传递到公共vue对象，用：commonVue.$emit(\'passFn\', value);\r\n			commonVue.$emit(\'toBrother\', this.msg);\r\n		}\r\n	}\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\nsrc/assets/js/commonVue.js\r\n```\r\nimport Vue from \'vue\';\r\n// 导出一个公共的vue对象\r\nexport default new Vue();\r\n```\r\nsrc/components/03two.vue\r\n```\r\n<template>\r\n  <div>\r\n    two.vue<br />\r\n    在two中，显示one的msg属性：{ { receive } }\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 3.0引入公共的vue对象\r\nimport commonVue from \'../assets/js/commonVue.js\';\r\nexport default {\r\n  data() {\r\n    return {\r\n      receive: \'\'\r\n    };\r\n  },\r\n  created() {\r\n    // 4.0同样在兄弟two组件中,用公共vue对象的事件接收参数：commonVue.$on(\'passFn\', (value) => {});\r\n    commonVue.$on(\'toBrother\', (val) => {\r\n      console.log(val);\r\n      this.receive = val;\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```',10,100,'2019-02-25 08:32:26','2019-04-06 14:48:01'),(130,'## ref属性 (vue操作dom)\r\n作用：vue提供给我们操作dom的方式 \r\n使用步骤：\r\n—— 1.0 找到要操作的dom元素设置一个ref属性\r\n—— 2.0 将来被ref属性标记的元素，会被添加到vm对象中的$refs属性对象中\r\n—— 3.0 要使用可以直接通过this.$refs对象来操作dom元素\r\n```\r\n<body>\r\n  <div id=\"app\">\r\n    <!-- 当点击一个按钮，获取焦点   -->\r\n    <button @click=\"go\">点我得到焦点</button>\r\n    <br>\r\n    <input ref=\"txt\" id=\"txt\" type=\"text\"><br>\r\n    <p ref=\"p\">我是一个p标签</p>\r\n  </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n  var vm = new Vue({\r\n    el: \"#app\",\r\n    methods: {\r\n      go() {\r\n        // 是js操作dom元素的方法，太low，不建议使用\r\n        // document.getElementById(\"txt\").focus(); \r\n        // 通过ref来操作input元素\r\n        // 如果给dom元素设置了ref属性之后，这个元素会被自动添加到$refs属性中\r\n        this.$refs.txt.focus();\r\n        console.log(this);\r\n        // 在今后的开发过程中能够不使用尽量不使用 MVVM\r\n      }\r\n    }, // 加一个mounted的钩子函数\r\n    mounted: function(){\r\n      console.log(\'我是mounted\');\r\n    }\r\n  });\r\n  // window.onload = function(){\r\n  //     document.getElementById().focus();\r\n  // }\r\n</script>\r\n```',10,100,'2019-02-25 08:37:34','2019-02-25 08:38:55'),(131,'## json-server快速搭建一个json数据服务器\r\njson-server介绍\r\n—— 它可以快速的开启一个数据服务器，并以简单的json数据文件当做数据库，使用简单。\r\njson-server安装（用npm全局安装）\r\n```\r\nnpm install json-server -g\r\n```\r\njson-server使用\r\n—— 创建一个数据文件：db.json (数据的格式直接是json格式)\r\n—— 将db.json文件当作数据库，开启一个服务器\r\n```\r\njson-server --watch db.json --port 3004\r\n```\r\ndb.josn示例如下\r\n```\r\n{\r\n  \"brands\": [\r\n    {\r\n      \"name\": \"小米\",\r\n      \"date\": \"2018-05-05T10:00:54.115Z\",\r\n      \"id\": 109\r\n    },\r\n    {\r\n      \"name\": \"红米\",\r\n      \"date\": \"2022-2-2\",\r\n      \"id\": 110\r\n    },\r\n    {\r\n      \"name\": \"馒头\",\r\n      \"date\": \"2018-08-23T09:05:19.861Z\",\r\n      \"id\": 112\r\n    }\r\n  ]\r\n}\r\n```\r\n得到结果\r\n```\r\nResources\r\nhttp://localhost:3004/brands\r\n\r\nHome\r\nhttp://localhost:3004\r\n```\r\n用 postman 测试调用接口\r\n```\r\n- 查\r\n  - 得到所有的数据\r\n    - http://localhost:3004/brands     get\r\n  - 根据id得到数据\r\n    - http://localhost:3004/brands/110       get\r\n- 增\r\n  - http://localhost:3004/brands    post  添加一个参数\r\n- 删\r\n  - http://localhost:3004/brands/110    delete 删一个参数\r\n- 模糊查找：\r\n  - http://localhost:3004/brands?name_like=米    get\r\n- 修改数据\r\n  - http://localhost:3004/brands/110    patch 添加一个参数\r\n\r\n```',10,100,'2019-02-25 08:44:20','2019-02-25 08:49:29'),(132,'## json-server快速搭建一个json数据服务器\r\njson-server介绍\r\n—— 它可以快速的开启一个数据服务器，并以简单的json数据文件当做数据库，使用简单。\r\njson-server安装（用npm全局安装）\r\n```\r\nnpm install json-server -g\r\n```\r\njson-server使用\r\n—— 创建一个数据文件：db.json (数据的格式直接是json格式)\r\n—— 将db.json文件当作数据库，开启一个服务器\r\n```\r\njson-server --watch db.json --port 3004\r\n```\r\ndb.josn示例如下\r\n```\r\n{\r\n  \"brands\": [\r\n    {\r\n      \"name\": \"小米\",\r\n      \"date\": \"2018-05-05T10:00:54.115Z\",\r\n      \"id\": 109\r\n    },\r\n    {\r\n      \"name\": \"红米\",\r\n      \"date\": \"2022-2-2\",\r\n      \"id\": 110\r\n    },\r\n    {\r\n      \"name\": \"馒头\",\r\n      \"date\": \"2018-08-23T09:05:19.861Z\",\r\n      \"id\": 112\r\n    }\r\n  ]\r\n}\r\n```\r\n得到结果\r\n```\r\nResources\r\nhttp://localhost:3004/brands\r\n\r\nHome\r\nhttp://localhost:3004\r\n```\r\n用 postman 测试调用接口\r\n```\r\n- 查\r\n  - 得到所有的数据\r\n    - http://localhost:3004/brands     get\r\n  - 根据id得到数据\r\n    - http://localhost:3004/brands/110       get\r\n- 增\r\n  - http://localhost:3004/brands    post  添加一个参数\r\n- 删\r\n  - http://localhost:3004/brands/110    delete 删一个参数\r\n- 模糊查找：\r\n  - http://localhost:3004/brands?name_like=米    get\r\n- 修改数据\r\n  - http://localhost:3004/brands/110    patch 添加一个参数\r\n\r\n```',6,100,'2019-02-25 08:48:31','2019-02-25 08:49:05'),(133,'## axios（发送请求）\r\n### 安装与使用axios\r\n下载与引入\r\n—— 在 www.npmjs.com 搜索 axios \r\n—— 找到 axios 官网：https://www.npmjs.com/package/axios  ，在官网查看下载方法\r\n```\r\n安装：npm install axios\r\n引用：import axios from \'axios\';\r\n```\r\n—— 也可以在npm安装axios后，把里面的dist目录下的axios.js找到，直接引入就可以使用axios了。\r\n```\r\n<script src=\"./axios.js\"></script>\r\n```\r\n—— 在官网还可以找到axios的示例用法\r\n\r\n------------\r\n\r\n**作用**：可以代替ajax来发送异步请求，去服务器拿到数据（这玩意与jquery一样，也支持promise语法，then,catch）\r\n它是vue官方指定的请求数据的方法\r\n使用：与jquery一样\r\n—— 发送get请求\r\n```\r\naxios.get(url).then(res => {\r\n    var {status, data} = res;\r\n    if (status === 200){\r\n        console.log(data);\r\n    }\r\n});\r\n```\r\n—— 发送post请求\r\n```\r\naxios.post(url, { }).then();\r\n```\r\n—— 发送delete请求\r\n```\r\naxios.delete(url).then();\r\n```\r\n—— 发送patch请求（更新）\r\n```\r\naxios.patch(url,{}).then(res => {});\r\n```\r\n—— **推荐书写格式**\r\n```\r\naxios({\r\n     url: \'goods\',\r\n     method: \'get\',\r\n     params: {\r\n         query: this.query,\r\n         pagenum: this.pagenum,\r\n         pagesize: this.pagesize\r\n     }\r\n }).then(res => {});\r\n```\r\n### axios JSONP 跨域\r\naxios跨域说明：https://github.com/axios/axios （搜“jsonp”）→ https://github.com/axios/axios/search?q=jsonp&unscoped_q=jsonp\r\n\r\n默认情况下axios不支持跨域（所以用jsonp第三方包来进行跨域）\r\n```bash\r\n$ npm install jsonp\r\n```\r\n\r\n```js\r\n// axios jsonp使用方法\r\nconst jsonp = require(\'jsonp\');\r\n\r\njsonp(\'http://www.example.com/foo\', null, (err, data) => {\r\n  if (err) {\r\n    console.error(err.message);\r\n  } else {\r\n    console.log(data);\r\n  }\r\n});\r\n```\r\n```\r\n<script src=\"./axios.js\"></script>\r\n<script>\r\n    // get 拿到所有数据\r\n    axios.get(\'http://localhost:3004/brands\')\r\n        .then(res => {\r\n            var { data, status } = res; //es6解构对象\r\n            if (status === 200) {\r\n                // 得到数据 对象的解构 \r\n                console.log(data);\r\n            }\r\n        })\r\n    // post 新增一条数据\r\n    axios.post(\'http://localhost:3004/brands\', {\r\n        name: \"馒头\",\r\n        date: new Date()\r\n    }).then( res => {\r\n        var {status} = res;\r\n        if(status === 201) {\r\n            console.log(\'新增成功\');\r\n        }\r\n    })\r\n    // delete 删除一条数据\r\n    axios.delete(\'http://localhost:3004/brands/113\')\r\n        .then(res => {\r\n            var {status} = res;\r\n            if (status === 200) {\r\n                console.log(\'删除成功\');\r\n            }\r\n        })\r\n</script>\r\n```\r\n### 注册axios为全局属性\r\n注册axios为全局属性（其实不推荐这种方式全局使用axios，推荐封装axios为插件）\r\n—— 在main.js中引入axios，然后添加到vue对象中\r\n```\r\nimport axios from \'axios\';\r\n// 将axios添加到vue对象中\r\nVue.prototype.$http = axios;\r\n```\r\n使用vue全局axios属性\r\n```\r\nthis.$http({\r\n    url: \'url\',\r\n    post: \'post\',\r\n    data: {}\r\n}).then(res => {});\r\n```\r\n### vue插件介绍（官网）\r\n插件通常会为 Vue 添加全局功能 。官网：https://vuejs.bootcss.com/v2/guide/plugins.html\r\n### 封装axios插件\r\n封装axios为插件，以便可全局使用axios。\r\n—— 1.0 单独创建一个js文件来封装axios插件 。创建/assets/js/axios.js文件，内容如下：\r\n—— 用axios的create()方法来创建axios实例，配置axios实例后再注册到vue中。\r\n```\r\n// 引入axios\r\nimport axios from \'axios\';\r\nvar myPlugin = {};\r\n\r\n// 添加方法\r\nmyPlugin.install = function(vue) {\r\n  // 1.0 直接将axios注册到vue中（只能注册一个baseURL到axios）\r\n  // axios.defaults.baseURL = \'http://localhost:3004\';\r\n  // vue.prototype.$http = axios;\r\n\r\n  // 2.0 将axios实例注册到vue中（可以注册多个baseURL到多个实例，再到vue中）\r\n  const instance = axios.create({\r\n    baseURL: \'http://localhost:3004\',\r\n    timeout: 3000\r\n  });\r\n  const instance2 = axios.create({\r\n    baseURL: \'http://localhost:3005\',\r\n    timeout: 2000\r\n  });\r\n  vue.prototype.$http = instance;\r\n  vue.prototype.$http2 = instance2;\r\n};\r\nexport default myPlugin;\r\n```\r\n—— 2.0 在main.js中，引入axios插件\r\n```\r\n// 引入axios插件\r\nimport axios from \'@/assets/js/axios.js\';\r\nVue.use(axios);\r\n```\r\n—— 3.0 全局使用axios插件\r\n```\r\nthis.$http.get(url).then(res => {});\r\n```\r\n#### 在axios插件中注册默认地址\r\n可以在axios插件中，给axios注册全局基础地址，参考网址：https://github.com/axios/axios\r\n```\r\n// 不推荐直接在axios中添加baseURL,建议用axios.create()创造实例的方式来添加，见上文\r\nmyPlugin.install = function(vue) {\r\n  axios.defaults.baseURL = \'http://localhost:3004\';\r\n  vue.prototype.$http = axios;\r\n};\r\n```\r\n注册默认地址后，再发送请求时，可以省略默认地址中的部分\r\n```\r\n// 没有默认地址时，要写全地址\r\nthis.$http.get(\'http://localhost:3004/heroes\').then(res => {});\r\n// 有默认地址时，可以省略默认地址的部分\r\nthis.$http.get(\'/heroes\').then(res => {});\r\n```',10,100,'2019-02-25 08:57:48','2019-02-26 02:08:18'),(134,'## vue插件\r\n### 安装与卸载插件\r\n安装：\r\n```\r\nnpm i 插件名；\r\nnpm i 插件名@版本号; //安装固定版本\r\n```\r\n卸载：\r\n```\r\nnpm uni 插件名\r\n```',10,100,'2019-02-26 02:24:46','2019-02-26 02:25:22'),(135,'### moment插件（处理时间）\r\n安装moment插件\r\n```\r\nnpm i momnet\r\n```\r\n引入moment，找到node_module/moment/moment.js，引入moment.js即可\r\n```\r\n<script src=\"./moment.js\"><script>\r\n```\r\n使用moment\r\n—— moment官网教程 ：http://momentjs.cn\r\n```\r\nreturn moment(val).format(\'YYYY-MM-DD, hh:mm:ss\')\r\n```',10,100,'2019-02-26 02:28:41','2019-02-26 02:31:07'),(136,'### vue-router（路由插件）\r\nvue-router是用来给vue的单页应用设置路由\r\n官网：https://router.vuejs.org/zh\r\n安装\r\n—— 直接下载后引用：https://unpkg.com/vue-router/dist/vue-router.js \r\n—— npm安装：`npm install vue-router`\r\n—— CDN使用：`<script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>`\r\n\r\n------------\r\n\r\n使用步骤：\r\n```\r\n- 1.0 引入vue-router.js文件\r\n- 2.0 js代码\r\n  - 1.0创建组件：创建路由对应的组件\r\n  - 2.0创建router对象：创建一个VueRouter对象（就是设置这个对象中的routes属性）\r\n  - 3.0注册router对象：将VueRouter对象创建出来的实例注册给Vue对象\r\n- 3.0 html代码\r\n  - 在页面上放几个a标签，在a标签中使用之前注册好的路由\r\n  - 在合适的位置放上一个将来渲染数据的标签：<router-view></router-view>\r\n- 实现原理：\r\n  - 当浏览器使用到vue-router中的路由时，vue会去vue对象中的router属性中找对应路由，找到以后会根据这个路由找到它的component（组件），根据组件中的template属性渲染页面，将渲染的结果显示在router-view标签\r\n```\r\n```\r\n<style>\r\n  .router-link-active {\r\n    color: red;\r\n  }\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <ul>\r\n            <!-- <li><a href=\"#/login\">登录</a></li>\r\n            <li><a href=\"#/register\">注册</a></li> -->\r\n            <li><router-link to=\"/login\">登录</router-link></li>\r\n            <li><router-link to=\"/register\">注册</router-link></li>\r\n            <!-- 设置两个路由的入口： Login / regiester -->\r\n\r\n            <!-- 将来路由对应的组件内容，会被动态渲染到这个标签中 -->\r\n            <router-view></router-view>\r\n        </ul>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script src=\"./vue-router.js\"></script>\r\n<!-- 要使用vue-router需要单独引入vue-router -->\r\n<script>\r\n    // 注册路由：\r\n    // 1.0 设置路由对应的组件\r\n    var login = {\r\n        template: \"<div>我是登录页面</div>\"\r\n    }\r\n    var register = {\r\n        template: \"<div>我是注册页面</div>\"\r\n    }\r\n    // 2.0 定义一个路由对象：\r\n    var router = new VueRouter({\r\n        routes: [ // 定义路由规则            \r\n            // 这个路由名称为login,请求的路径为/login，如果将来请求这个路径，\r\n            //  那么会将login对应的组件中的内容响应到页面上的<router-view></router-view>中\r\n            {name: \"login\", path: \"/login\", component: login},                        \r\n            {name: \"register\", path: \"/register\", component: register}\r\n        ]\r\n    });\r\n    // 3.0 将设置好的路由对象注册到Vue对象\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n        },\r\n        // router: router\r\n        router\r\n    });\r\n</script>\r\n```\r\n#### 路由参数&路由跳转（js）\r\n父组件通过prop传递数据给子组件，子组件触发事件给父组件。\r\n父组件想在子组件上监听自己的click的话，需要加上native修饰符。\r\n所以如果在想要在`router-link`上添加事件的话需要`@click.native`这样写 。\r\n路由参数（动态匹配路由）\r\n—— 定义路由参数：`{name: \"del\", path: \"/del/:abc\", component: del}`\r\n—— 传递路由参数：\r\n```\r\n1.0： <router-link to=\"/del/1\" @click.native=\"del\">删除</router-link>\r\n```\r\n```\r\n//params会在浏览器地址栏生成路径参数，如：localhost:8080/#/del/1\r\n2.0： this.$router.push({name: \'del\', params:{abc:1} });  \r\n3.0:  this.$router.push(\'/del/1\');\r\n```\r\n—— 获取路由参数：\r\n```\r\n// $router：这个是vue中的路由对象\r\n// $route：这个是$router中的路由规则\r\nvar id = this.$route.params.abc;\r\n```\r\n------------\r\n\r\njs方法实现路由跳转： `this.$router.push(\"/login\");`  ， `this.$router.push({name: \'login\'});`\r\n```\r\n<style>\r\n  .router-link-active {color: red;}\r\n</style>\r\n</head>\r\n<body>\r\n    <div id=\"app\">\r\n        <ul>\r\n            <li><router-link to=\"/login\">登录</router-link></li>\r\n            <li><router-link to=\"/register\">注册</router-link></li>           \r\n            <li><router-link to=\"/del/1\" @click.native=\"del\">删除</router-link></li>\r\n            <button @click=\"go\">去登录</button>\r\n            <router-view></router-view>\r\n        </ul>\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script src=\"./vue-router.js\"></script>\r\n<script>\r\n    // 1.0 设置路由对应的组件\r\n    var login = {\r\n        template: \"<div>我是登录页面</div>\"\r\n    }\r\n    var register = {\r\n        template: \"<div>我是注册页面</div>\"\r\n    }\r\n    var del = {\r\n        template: \"<div>我是del</div>\",\r\n        mounted(){\r\n            // $router：这个是vue中的路由对象\r\n            // $route：这个是$router中的路由规则   \r\n            // 得到路由规则中的参数：\r\n            var id = this.$route.params.abc;\r\n            console.log(id);\r\n        }\r\n    }\r\n    // 2.0 定义一个路由对象：为del定义一个路由参数\r\n    var router = new VueRouter({\r\n        routes: [\r\n            {name: \"login\", path: \"/login\", component: login},\r\n            {name: \"register\", path: \"/register\", component: register},\r\n            {name: \"del\", path: \"/del/:abc\", component: del}, // /del  /del/1       \r\n        ]\r\n    });\r\n    // 3.0 注册路由到vue中\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n        },\r\n        // router: router\r\n        router,\r\n        methods: {\r\n            go() {\r\n                // 通过js代码动态跳转路由中\r\n                this.$router.push(\"/login\");\r\n            },\r\n            del() {\r\n                var id = this.$route.params.abc;\r\n                console.log(id);\r\n                alert(1);\r\n            }\r\n        }\r\n    });\r\n</script>\r\n```\r\n##### 路由参数params和?号参数query\r\n参考网址：https://blog.csdn.net/mf_717714/article/details/81945218\r\n```\r\nthis.$router.push({name: \'searchList\', query: {key: encodeURIComponent(this.inputValue)} })\r\n会跳转到\r\nhttp://home.test:8080/#/searchList?key=4545\r\n```\r\n#### 获取?问号参数\r\n```\r\ncreated () {\r\n  this.productId = this.$router.query.productId\r\n}\r\n```\r\n#### 在模板中直接使用 $router 实现跳转\r\n在vue框架中（因为src/main.js已经引入了router），因此在模板中可以直接使用路由对象 `$router`来实现跳转, 如下：\r\n```\r\n<template>\r\n	<div>\r\n		<el-button type=\"success\" @click=\"$router.push({name: \'goodsAdd\'})\" plain>新增商品</el-button>\r\n	</div>\r\n</template>\r\n```',10,100,'2019-02-26 02:34:10','2019-04-19 06:25:53'),(137,'#### router-link\r\n官网：https://router.vuejs.org/zh/api/#router-link\r\n通过 to 属性指定目标地址，默认渲染成带有正确链接的 < a> 标签，可以通过配置 tag 属性生成别的标签。\r\n另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。\r\n```\r\n<li class=\"active\">\r\n	<router-link to=\'/heros\'>英雄列表</router-link>\r\n</li>\r\n\r\n<!-- 1.0 会渲染成 :（未激活时） -->\r\n<li class=\"active\">\r\n	<a href=\"#/heros\" class=\"\">英雄列表</a>\r\n</li>\r\n\r\n<!-- 2.0 当“英雄列表”激活时，连接元素（a元素）会自动添加一个激活class类名，如下： -->\r\n<li class=\"active\">\r\n    <a href=\"#/heros\" class=\"router-link-exact-active router-link-active\">英雄列表</a>\r\n</li>\r\n```\r\n将router-link激活 class 应用在外层元素\r\n```\r\n- 通过router-link的active-class属性设置 链接激活时使用的 CSS 类名 \r\n- 注意：当浏览器url中包含对应路由“heros”时，激活时使用的css类名“active”才会被添加。\r\n- 因此：在某个菜单中进行操作，并且希望保持该菜单的激活状态时，应该使用“下级路由”，举例，如果希望在英雄列表菜单中点击“添加英雄”，那么该操作的路由应该为/heros/Add，此时会包含”上级路由“heros，也就意味着heros列表菜单会保持激活状态。\r\n```\r\n```\r\n<!-- <router-link tag=\"li\" to=\"/heros\" active-class=\"active\"> -->\r\n<router-link tag=\"li\" :to=\"{\'name\':\'heros\'}\" active-class=\"active\">\r\n  <a>英雄列表</a>\r\n</router-link>\r\n\r\n<!-- 1.0 会渲染成： -->\r\n<!-- 设置了active-class=\"active\"，渲染的li素就会添加上激活类名\"active\"-->\r\n<li class=\"router-link-exact-active active\">\r\n	<a href=\"#/heros\">英雄列表</a>\r\n</li>\r\n```\r\n全局配置router-link激活class的类名\r\n```\r\nexport default new Router({\r\n  routes: [\r\n    {\r\n      name: \'root\',\r\n      path: \'/\',\r\n      redirect: {name: \'heros\'}\r\n    },\r\n    {\r\n      name: \'heros\',\r\n      path: \'/heros\',\r\n      component: Heros\r\n    },    \r\n  ],\r\n  linkActiveClass: \'active\' //全局配置router-link激活class类名\"active\"\r\n});\r\n```\r\n#### 路由重定向\r\n重定向到路由名称为“heros”的路由上。\r\n```\r\n{ name: \'root\', path: \'/\', redirect: {\'name\': \'heros\'} }\r\n```',10,100,'2019-02-26 02:58:48','2019-02-26 02:58:48'),(138,'### bootstrap插件\r\n官网： www.bootcss.com\r\nbootstrap v3布局精选：https://v3.bootcss.com/getting-started/#examples\r\n安装bootstrap时，注意项目所对应的bootstrap版本，根据项目当时所用的版本进行下载\r\n—— 如果没有带版本@3.3.7，则会安装最新的版本\r\n```bash\r\nnpm install bootstrap@3.3.7\r\n```\r\n在main.js中，全局引用bootstrap.css\r\n```bash\r\nimport \'../node_modules/bootstrap/dist/css/bootstrap.css\';\r\n```',10,100,'2019-02-26 03:32:00','2019-02-26 03:32:00'),(139,'### elementUI插件\r\nelementUI安装，官网：http://element.eleme.io/#/zh-CN\r\n```bash\r\nnpm i element-ui\r\n```\r\n引入并注册 element（在main.js中引入）\r\n```\r\n// 引入elementUI对象\r\nimport Element from \'element-ui\';\r\n// 引入elementUI样式\r\nimport \'element-ui/lib/theme-chalk/index.css\'; \r\n// 全局注册 elementUI\r\nVue.use(Element);\r\n```',10,100,'2019-02-26 03:34:39','2019-02-26 03:34:39'),(140,'## 生命周期（钩子函数）\r\n官网图示：https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\r\n生命周期示例代码\r\n```\r\n<body>\r\n    <div id=\"app\">\r\n        { { msg } }\r\n        <input type=\"text\" ref=\"txt\" v-model=\"msg\">\r\n    </div>\r\n</body>\r\n<script src=\"./vue.js\"></script>\r\n<script>\r\n    var vm = new Vue({\r\n        el: \"#app\",\r\n        data: {\r\n            msg: \'hello vue\',\r\n            dataList: []\r\n        },\r\n        // 在vue对象初始化之前执行\r\n        beforeCreate(){\r\n            console.log(\'beforeCreate\');\r\n            console.log(this.msg);// undefined\r\n        },\r\n        // 在vue对象初始化之后执行\r\n        created() {\r\n            console.log(\'created\');\r\n            console.log(this.msg);//hello vue\r\n        },\r\n        // 在页面渲染之前执行\r\n        beforeMount() {\r\n            console.log(\'beforeMount\');\r\n            console.log(this.$refs.txt);// undefined\r\n        },\r\n        // 在页面渲染之后执行\r\n        mounted() {\r\n            console.log(\'mounted\');\r\n            console.log(this.$refs.txt);// <input type=\"text\">\r\n        },\r\n        // 在更新之前执行\r\n        beforeUpdate() {\r\n            console.log(\'beforeUpdate\');\r\n        },\r\n        // 在更新之后执行\r\n        updated() {\r\n            console.log(\'updated\');\r\n        },\r\n        // 在对象被销毁之前执行\r\n        beforeDestroy() {\r\n            console.log(\'beforedestroy\');\r\n        },\r\n        // 在对象被销毁之后执行\r\n        destroyed() {\r\n            console.log(\'destroyed\');\r\n        },\r\n    });\r\n</script>\r\n```',10,100,'2019-02-26 03:36:56','2019-02-26 03:36:56'),(141,'## 单页应用\r\n单页应用(single page web application，SPA)，是在一个页面完成所有的业务功能，浏览器一开始会加载必需的HTML、CSS和JavaScript，之后所有的操作都在这张页面完成，这一切都由JavaScript来控制。\r\n优点：\r\n—— 操作体验流畅\r\n—— 完全的前端组件化\r\n缺点：\r\n—— 首次加载大量资源(可以只加载所需部分)\r\n—— 对搜索引擎不友好\r\n—— 开发难度相对较高',10,100,'2019-02-26 03:46:44','2019-02-26 03:46:44'),(142,'## vue项目知识\r\n### 项目框架说明\r\n```\r\n- assets 用来存储网站的静态文件\r\n- components 用来存储网站的组件（单页应用）\r\n- router 用来存储路由\r\n- App.vue 用来设置单页应用的根组件\r\n- main.js 网站的入口文件\r\n\r\n```',10,100,'2019-02-26 04:37:06','2019-02-26 04:37:06'),(143,'### es中导入和导出标准语法\r\n#### node.js中导入和导出语法\r\n```\r\n- 导入: var fs = require(\'fs\');\r\n- 导出：\r\n  - module.exports = {};\r\n  - exports.obj = obj;\r\n\r\n```\r\n#### es6中标准导出和导入语法\r\n导出与导入方式一（**对象**）\r\n```\r\nexport default { name: \'andy\' }; // 在一个文件中，导出一个对象\r\n```\r\n```\r\nimport obj from \'filename\'; // 在另一个文件中，导入一个对象\r\n```\r\n导出与导入方式二（**常量、变量**）\r\n```\r\nexport const pi = 3.14; // 导出一个常量\r\n```\r\n```\r\n import { pi } from \'filename\'; // 导入一个常量\r\n```\r\n导出与导入方式三（**方法**）\r\n```\r\nexport function fn () { console.log(\'我是导出的方法\'); }; // 导出一个方法\r\n```\r\n```\r\nimport { fn } from \'filename\'; // 导入一个方法\r\ncreated () { fn (); } // 调用\r\n```\r\n导出与导入方式四（**类**）\r\n```\r\nclass User {...}\r\nexport { User }; // 导出一个类\r\n```\r\n```\r\nimport { User } from \'filename\'; // 导入一个类\r\nvar user = new User(); // 实例化类\r\n```\r\n多个导出与导入组合\r\n```\r\n// 同时导出一个对象、常量、方法\r\nexport default { name: \'andy\' };\r\nexport const pi = 3.14;\r\nexport function fn () { console.log(\'我是导出的方法\'); };\r\nexport { User }; // 导出一个类\r\n```\r\n```\r\nimport obj  from \'filename\'; // 导入一个对象\r\nimport { pi as PI } from \'filename\'; // 导入一个常量，as表示别名\r\n// 或\r\nimport { pi , fn , User } from \'filename\' // 导一个常量、一个方法、一个类\r\n```',10,100,'2019-02-26 04:43:28','2019-02-26 04:46:04'),(144,'### eslint校验\r\n分号与函数空格校验规则\r\n```\r\n//在.eslintrc.js文件中修改rules\r\nrules: {\r\n    // allow async-await\r\n    \'generator-star-spacing\': \'off\',\r\n    // allow debugger during development\r\n    \'no-debugger\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\r\n    // 强制书写分号\r\n    \'semi\': [\'error\', \'always\'],\r\n    // 方法后面可以不加空格\r\n    \'space-before-function-paren\': \'off\',\r\n    // 解决spaces和tabs问题：\"Expected indentation of 4 spaces but found 2 tabs\"的问题\r\n    \'no-tabs\': 0,\r\n    \'no-mixed-spaces-and-tabs\': 0,\r\n    \'indent\': [\"off\", \"tab\"],\r\n    // \'no-trailing-spaces\': 0,\r\n}\r\n```\r\n修复eslint（强制书写分号后，需要修复现有的文件，以适应修改后的lint规则）\r\n```\r\n// 1.0 在package.json文件中，加一行lintfix\r\n\"scripts\": {\r\n  	//dev中的--open表示在执行npm run dev时，在浏览器中打开项目根目录\r\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --open\",\r\n    \"start\": \"npm run dev\",\r\n    \"lint\": \"eslint --ext .js,.vue src\",\r\n    \"lintfix\": \"eslint --ext .js,.vue src --fix\",\r\n    \"build\": \"node build/build.js\"\r\n  },\r\n    \r\n// 2.0 运行lintfix，以为修复现有文件适应新规则\r\n$ npm run lintfix\r\n```',10,100,'2019-02-26 04:51:12','2019-02-26 04:54:04'),(145,'### 登录token与session\r\n#### session登录验证\r\n过程描述\r\n```\r\n- 条件：前端域名http://localhost:3000 ， 登录页login.html；后端域名http://localhost:4000 , 登录接口psot：http://localhost:4000/login，参数：用户名、密码。\r\n- 过程：\r\n  - 浏览器请求前端登录页（http://localhost:3000/login.index），前端只负责页面渲染，登录数据的请求与验证还是由浏览器向后端服务器发起。\r\n  - 浏览器post请求后端登录接口(http://localhost:4000/login，参数：用户名、密码），验证通过后，后端服务器返回浏览器cookie（表示localhost:4000的cookie，内容为sessionID）。\r\n    - 以后浏览器在地址栏，若请求localhost:4000的域名，则会带上4000端口的cookie；但是，若浏览器地址栏请求的是localhost:3000，则不会带上4000端口的cookie。\r\n- 缺点：cookie（sessionID）标记的是后台服务器的域名，如果前台与后台共用一个域名（没有跨域）时，那么用户访问前台页面时，cookie（sessionID）会带到后台，完成身份认证。但是，如果在前后台分离的情况下（前后台域名不同，跨域了），用户访问前台页面时，标记后台域名的cookie（sessionID）不会被带到前台服务器，继而无法完成身份验证。\r\n\r\n```\r\n总结：如果前后台跨域了，那么则无法完成session登录验证\r\n#### token登录验证\r\n```\r\n- 过程描述：客户端向后台服务器发送登录请求，验证通过后，后台服务器返回一个token；以后客户端每次请求时，带上token即可完成身份证明。\r\n```\r\n总结：token登录验证，不仅适合前后台没有分离的情况（不跨越）；也适合前后台分离（跨域）的情况。',10,100,'2019-02-26 04:56:16','2019-02-26 05:09:16'),(146,'## 首屏优化\r\n### 路由懒加载\r\n使用vue与webpack结合起来，在打包时将路由文件从app和vendor文件中分离出来\r\n官网讲解：https://router.vuejs.org/zh/guide/advanced/lazy-loading.html\r\n```\r\nconst Foo = () => import(\'./Foo.vue\')\r\n```\r\n实际应用举例，在router/index.js中，把路由改造成路由懒加载\r\n改造后再打包，就会把路由组件从app（js）和vendor（js）文件中分离出来，使app和vendor的size会大幅减少，但是如果没有用cdn的话，vendor还是会比较大。\r\nsrc/router/index.js\r\n```\r\n// 常规路由加载\r\n// import Login from \'@/views/login/login.vue\'\r\n// import Home from \'@/views/home.vue\'\r\n// import Index from \'@/views/index.vue\'\r\n// import Users from \'@/views/users/users.vue\'\r\n// import Rights from \'@/views/rights/rights.vue\'\r\n// import Roles from \'@/views/rights/roles.vue\'\r\n// import Categories from \'@/views/goods/categories.vue\'\r\n// import Goods from \'@/views/goods/goods.vue\'\r\n// import GoodsAdd from \'@/views/goods/goodsAdd.vue\'\r\n// import Params from \'@/views/goods/params\'\r\n// import Orders from \'@/views/orders/orders\'\r\n// import Reports from \'@/views/reports/reports.vue\'\r\n\r\n// 首屏优化：路由懒加载\r\nconst Login = () => import(\'@/views/login/login.vue\')\r\nconst Home = () => import(\'@/views/home.vue\')\r\nconst Index = () => import(\'@/views/index.vue\')\r\nconst Users = () => import(\'@/views/users/users.vue\')\r\nconst Rights = () => import(\'@/views/rights/rights.vue\')\r\nconst Roles = () => import(\'@/views/rights/roles.vue\')\r\nconst Categories = () => import(\'@/views/goods/categories.vue\')\r\nconst Goods = () => import(\'@/views/goods/goods.vue\')\r\nconst GoodsAdd = () => import(\'@/views/goods/goodsAdd.vue\')\r\nconst Params = () => import(\'@/views/goods/params\')\r\nconst Orders = () => import(\'@/views/orders/orders\')\r\nconst Reports = () => import(\'@/views/reports/reports.vue\')\r\n```\r\n路由懒加载之前打包结果size情况\r\n\r\n\r\n| Asset  | 懒加载之前 Size  | 懒加载之后 Size  | 对应的路由组件 |\r\n| ------------: | ------------: | ------------: |  ------------: |\r\n| static/fonts/element-icons.6f0a763.ttf  | 11 kB  | 11 kB | 没有对应 |\r\n| static/js/vendor.05ab866211a3a75dcd3a.js  | 2.01 MB  | 963 kB | 没有对应 |\r\n| static/js/app.146eb1ca146b6d08a67f.js  | 47.1 kB  | 7.38 kB | 没有对应 |\r\n| static/js/manifest.2ae2e69a05c33dfc65f8.js  | 857 bytes  | 1.74 kB | 没有对应 |\r\n| static/css/app.f1c39caf50fd06fda3a8da42aa15762f.css  | 228 kB  | 228 kB | 没有对应 |\r\n| static/js/0.7d01559f4294d130508d.js | 之前没有 | 806 kB | Reports |\r\n|static/js/1.e214983609ef821f52d9.js | 之前没有 | 247 kB | GoodsAdd |\r\n| static/js/2.a43acfec7179e6a15444.js | 之前没有 | 2.42 kB | Home |\r\n| static/js/3.7ff7d8dc861b4e9787c5.js | 之前没有 | 10.9 kB | Categories |\r\n| static/js/4.b68e8e4475dbebed37ad.js | 之前没有 | 2.77 kB | Goods |\r\n| static/js/5.7cbbfc29e586e1805fd0.js | 之前没有 | 9.7 kB | Users |\r\n|static/js/6.10a529f0b55ba25fef6a.js | 之前没有 | 1.39 kB | Rights |\r\n| static/js/7.05cf49d075aa41761833.js | 之前没有 | 1.72 kB | Login |\r\n| static/js/8.74cc2cdb85c441beb70a.js |之前没有 | 5.07 kB | Params |\r\n|static/js/9.747371dab54f4e866454.js | 之前没有 | 398 bytes | Index |\r\n| static/js/10.d5c31dc49eec463b82bb.js | 之前没有| 2.29 kB | Orders |\r\n| static/js/11.fdbbaa290985932d2aba.js | 之前没有 | 4.44 kB | Roles |\r\n\r\n### cdn静态资源托管\r\n主要是把main.js中import的插件，用cdn代替。并且把main.js中import的css也用cdn代替，且必须注释掉import css语句（import 插件 语句不可以注释掉），从而能使app(css)大为缩减。\r\n使用cdn加载资源，然后再npm run build 打包，会使vendor（js）的size减少很多，一般能减少到25k左右（且使用了路由懒加载的情况下）\r\n步骤：\r\n——  第一步：找cdn资源 相关网站：https://www.bootcdn.cn/\r\n根据 package.json 中的插件版本，在cdn网站找到对应版本的cnd资源\r\n```\r\n// https://www.bootcdn.cn/vue，找到对应版本资源（在package.json中查看版本）\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js\"></script>\r\n```\r\n—— 第二步：在index.html页面中引入cnd资源\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <title>vue-demo</title>\r\n    <!-- cdn资源 -->\r\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/element-ui/2.6.3/theme-chalk/index.css\">\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <script src=\"https://cdn.bootcss.com/vue/2.5.2/vue.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/element-ui/2.6.3/index.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/axios/0.18.0/axios.min.js\"></script>\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n\r\n```\r\n—— 第三步：在项目中配置第三方包相应信息（直接去webpack官网去找）\r\n———— webpack官网：www.webpackjs.com\r\n———— 找到webpack官网 > 外部扩展：https://www.webpackjs.com/configuration/externals/#externals\r\n```\r\n// 这样就剥离了jQuery模块，从 CDN 引入 jQuery，而不是把它打包\r\nexternals: {\r\n  jquery: \'jQuery\'\r\n}\r\n```\r\n———— 在build/webpack.base.conf.js中，加入exernals配置就ok\r\n```\r\n// 将来从cnd中加载，而不是从第三方包中加载\r\nmodule.exports = { \r\n  context: path.resolve(__dirname, \'../\'),\r\n  entry: {\r\n    app: \'./src/main.js\'\r\n  },\r\n  externals: {\r\n    // \'第三方包名\'： \'第三方包中导出对象的名称\'\r\n    // 这两个名称都是固定的，第一个是node_modules的名称，第二个名称在第三方包js文件中查看（即导出的对象名称）\r\n    vue: \'Vue\',\r\n    \'element-ui\': \'ELEMENT\',\r\n    \'moment\': \'moment\',\r\n    \'axios\': \'axios\'\r\n  },\r\n  ...\r\n}\r\n```\r\n—— 第四步：注释（删除）main.js中import css的语句\r\n```\r\n// 引入 elementUI 样式\r\n// import \'element-ui/lib/theme-chalk/index.css\' // import css注释掉，缩减app(css)体积，因为在index.html中已经用cdn加载过这个css样式了\r\n// 引入公共样式\r\nimport \'@/assets/css/index.css\'\r\n\r\n// import 插件对象，这些不能注释，这代表的是从cdn下载后的包中，导入插件到项目中\r\n// 引入 elementUI 对象(但是：当vue是从cdn和element都是cdn引入的话，element可以不用import引入和Vue.use注册，因为element是基于vue封装的)\r\n// import Element from \'element-ui\'\r\n// 引入封装的 axios 插件\r\nimport axios from \'@/assets/js/myaxios.js\'\r\n// 引入全局面包屑组件\r\nimport MybreadCrumb from \'@/components/breadcrumb.vue\'\r\n// 引入moment\r\nimport moment from \'moment\'\r\n\r\n// 注意，所有的 import 必须放在前面，import 语句之前不能有其他的代码\r\n\r\n// 全局注册 element ，将来任何位置都可以使用 element 组件\r\n// Vue.use(Element)(但是：当vue是从cdn和element都是cdn引入的话，element可以不用import引入和Vue.use注册，因为element是基于vue封装的)\r\n// 全局注册 axios\r\nVue.use(axios)\r\n// 注册全局面包屑组件，格式：Vue.component(\'组件名\' , 组件)\r\nVue.component(MybreadCrumb.name, MybreadCrumb)\r\n// 注册全局过滤器(时间格式化)\r\nVue.filter(\'myTime\', function (time) {\r\n  return moment(time).format(\'YYYY-MM-DD hh:mm:ss\') // 使用 moment 格式化时间\r\n})\r\n// 注册q全局过滤器(人民币格式化)\r\nVue.filter(\'myRMB\', function (rmb) {\r\n  return rmb.toFixed(2) + \' ¥\'\r\n})\r\n```\r\ncdn优化后的size情况\r\n\r\n| Asset  | 懒加载之前 Size  | 懒加载之后 Size  | 对应的路由组件 | cdn vue后 | cdn Element-ui后 | cdn Element-ui后 | cdn axios后 |\r\n| ------------: | ------------: | ------------: |  ------------: | ------------: | ------------: | ------------: |------------: |\r\n| static/fonts/element-icons.6f0a763.ttf  | 11 kB  | 11 kB | 没有对应 | —— | 0kB(变没了) | —— | —— |\r\n| static/js/vendor.05ab866211a3a75dcd3a.js  | 2.01 MB  | 963 kB | 没有对应 | 869 kB | 274 kB | 39.4 kB | 25.1 kB |\r\n| static/js/app.146eb1ca146b6d08a67f.js  | 47.1 kB  | 7.38 kB | 没有对应 |—— | —— | 3.01 kB | 3.05 kB |\r\n| static/js/manifest.2ae2e69a05c33dfc65f8.js  | 857 bytes  | 1.74 kB | 没有对应 |—— | —— | —— | —— |\r\n| static/css/app.f1c39caf50fd06fda3a8da42aa15762f.css  | 228 kB  | 228 kB | 没有对应 |—— | 37.9 kB | —— | —— |\r\n| static/js/0.7d01559f4294d130508d.js | 之前没有 | 806 kB | Reports |—— | 812 kB | —— | —— |\r\n|static/js/1.e214983609ef821f52d9.js | 之前没有 | 247 kB | GoodsAdd |—— | 248 kB | —— | —— |\r\n| static/js/2.a43acfec7179e6a15444.js | 之前没有 | 2.42 kB | Home |—— | —— | —— | —— |\r\n| static/js/3.7ff7d8dc861b4e9787c5.js | 之前没有 | 10.9 kB | Categories |—— | —— | —— | —— |\r\n| static/js/4.b68e8e4475dbebed37ad.js | 之前没有 | 2.77 kB | Goods |—— | —— | —— | —— |\r\n| static/js/5.7cbbfc29e586e1805fd0.js | 之前没有 | 9.7 kB | Users |—— | —— | —— | —— |\r\n|static/js/6.10a529f0b55ba25fef6a.js | 之前没有 | 1.39 kB | Rights |—— | —— | —— | —— |\r\n| static/js/7.05cf49d075aa41761833.js | 之前没有 | 1.72 kB | Login |—— | —— | —— | —— |\r\n| static/js/8.74cc2cdb85c441beb70a.js |之前没有 | 5.07 kB | Params |—— | —— | —— | —— |\r\n|static/js/9.747371dab54f4e866454.js | 之前没有 | 398 bytes | Index |—— | —— | —— | —— |\r\n| static/js/10.d5c31dc49eec463b82bb.js | 之前没有| 2.29 kB | Orders |—— | —— | —— | —— |\r\n| static/js/11.fdbbaa290985932d2aba.js | 之前没有 | 4.44 kB | Roles |—— | —— | —— | —— |',10,100,'2019-02-26 05:08:28','2019-04-11 07:36:49'),(147,'## 组件加载优化\r\nCSS打包分离优化',10,100,'2019-02-26 05:32:12','2019-02-26 05:32:12'),(148,'## vuex\r\n### vuex概念介绍\r\nvuex官网：https://vuex.vuejs.org/zh\r\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\r\n![](https://vuex.vuejs.org/vuex.png)\r\n### vuex 安装\r\nvuex安装：https://vuex.vuejs.org/zh/installation.html\r\n```\r\nnpm i vuex\r\n```\r\n导入\r\n```\r\nimport Vue from \'vue\';\r\nimport Vuex from \'vuex\';\r\n\r\nVue.use(Vuex);\r\n```\r\n创建数据仓库对象：https://vuex.vuejs.org/zh/guide/\r\n```\r\n// 1.0创建一个状态管理仓库\r\nconst store = new Vuex.Store({\r\n  state: {\r\n    count: 0\r\n  },\r\n  mutations: {\r\n    increment (state) {\r\n      state.count++\r\n    }\r\n  }\r\n});\r\n```\r\n把vuex注册到vue对象中\r\n```\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  components: { App },\r\n  template: \'<App/>\',\r\n  store // 2.0把vuex注册到vue对象中\r\n});\r\n```\r\n### vuex 基础demo教程\r\ndemo教程 github 地址：https://github.com/andy-love-coding/vuex-demo\r\n#### demo 视图总预览\r\n![VTgnGD.jpg](https://t1.picb.cc/uploads/2019/04/09/VTgnGD.jpg)\r\n#### state 使用\r\nsrc/main.js\r\n```\r\nimport Vue from \'vue\'\r\nimport App from \'./App\'\r\nimport router from \'./router\'\r\n// 1.0 导入 vuex\r\nimport Vuex from \'vuex\'\r\n\r\n// 2.0 全局注册 vuex\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nlet store = new Vuex.Store({\r\n  state: {\r\n    msg: \'storeMsg\'\r\n  }\r\n})\r\n\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  components: { App },\r\n  template: \'<App/>\',\r\n  store // 4.0 全局注册 vuex 仓库(store)，以后再任意vue文件，都可以使用仓库(store)中的数据了\r\n})\r\n```\r\nsrc/App.vue\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <state />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport State from \'@/components/State.vue\'\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    State\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n```\r\nsrc/components/State.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>State 页面</p>\r\n    <!-- 使用 vuex 仓库(store) 中的数据 -->\r\n    <!-- 使用方法一：直接使用，但是不太方便，书写太长了 -->\r\n    { { $store.state.msg } }\r\n\r\n    <!-- 使用方法二：封装到方法中 -->\r\n    { { getMsg() } }\r\n\r\n    <!-- 使用方式三：将内容封装到计算属性中 -->\r\n    <!-- { { ComuptedMsg } } -->\r\n\r\n    <!-- 使用方法四：使用【辅助函数】mapState 来操作 (数组映射 独占)。  -->\r\n    <!-- 缺点：容易与本页面 data 中的数据命名冲突；独占了当前组件的计算属性 computed -->\r\n    <!-- { { msg } } -->\r\n\r\n    <!-- 使用方法五：使用【辅助函数】mapState 来操作 (对象映射 独占) -->\r\n    <!-- 缺点：独占了当前组件的计算属性 computed -->\r\n    <!-- { { msgAlias } } -->\r\n\r\n    <!-- 使用方法六：使用【辅助函数】mapState来操作 (对象映射 非独占)。【推荐这种使用方法】-->\r\n    { { msgAlias } }\r\n    { { reverseMsg } }\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入辅助函数\r\nimport { mapState } from \'vuex\'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      msg: \'localMsg\' // data 中的 msg 会优先于数组映射的 msg\r\n    }\r\n  },\r\n  methods: {\r\n    // 方法二\r\n    getMsg () {\r\n      return this.$store.state.msg // { { getMsg() } } 输出：storeMsg\r\n    }\r\n  },\r\n  // computed: {\r\n  //   // 方法三\r\n  //   ComuptedMsg () {\r\n  //     return this.$store.state.msg // { { ComuptedMsg } } 输出：storeMsg\r\n  //   }\r\n  // }\r\n  // computed: mapState([\r\n  //   // 方法四：映射 this.msg 为 store.state.msg。mapState 独占了 computed\r\n  //   \'msg\' // { { msg } } 输出：storeMsg\r\n  // ])\r\n  // computed: mapState({\r\n  //   // 方法五：mapState 独占了 computed\r\n  //   msgAlias: \'msg\' // { { msgAlias } } 输出：storeMsg\r\n  // })\r\n  computed: {\r\n    // 方法六：mapState 没有独占 computed，还可以在 computed 中造新的计算属性\r\n    reverseMsg () {\r\n      return this.msg.split(\'\').reverse().join(\'\') // { { reverseMsg } } 输出：gsMlacol\r\n    },\r\n    ...mapState({\r\n      msgAlias: \'msg\' // { { msgAlias } } 输出：storeMsg\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n#### 封装 vuex\r\n新建文件：src/store/myStore.js\r\n```\r\n// 将 vuex 单独封装为一个文件\r\n// 1.0 导入\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\n\r\n// 2.0 注册\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nvar store = new Vuex.Store({\r\n  state: {\r\n    msg: \'storeMsg\'\r\n  }\r\n})\r\n\r\n// 4.0 暴露仓库\r\nexport default store\r\n\r\n```\r\n在 src/main.js 中引用封装的 vuex\r\n```\r\n// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from \'vue\'\r\nimport App from \'./App\'\r\nimport router from \'./router\'\r\n// 1.0 导入外部仓库\r\nimport store from \'@/store/myStore.js\'\r\n\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  components: { App },\r\n  template: \'<App/>\',\r\n  store // 2.0 全局注册 vuex 仓库(store)，以后再任意vue文件，都可以使用仓库(store)中的数据了\r\n})\r\n\r\n```\r\n#### Getter 使用\r\nsrc/store/myStore.js\r\n```\r\n// 将 vuex 单独封装为一个文件\r\n// 1.0 导入\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\n\r\n// 2.0 注册\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nvar store = new Vuex.Store({\r\n  state: { // state 用于存储数据\r\n    msg: \'storeMsg\'\r\n  },\r\n  getters: { // getters 相对于 vue 中的计算属性\r\n    reverseMsg (state) {\r\n      return state.msg.split(\'\').reverse().join(\'\')\r\n    }\r\n  }\r\n})\r\n\r\n// 4.0 暴露仓库\r\nexport default store\r\n\r\n```\r\nsrc/App.vue\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <state /> <hr>\r\n    <getter /> <hr>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport State from \'@/components/State.vue\'\r\nimport Getter from \'@/components/Getter.vue\'\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    State,\r\n    Getter\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\nsrc/components/Getter.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>Getter 页面</p>\r\n    <!-- 使用 vuex 仓库(store) 中的 getters 属性，其相当于 vue 中的计算属性 -->\r\n    <!-- Getter 使用方法一：用属性的方式直接访问 -->\r\n    { { $store.getters.reverseMsg } }\r\n    <!-- Getter 使用方法二：用【辅助函数】mapGetters 来操作 -->\r\n    <!-- 辅助函数可以接收一个数组(会导致接收的属性与原getter属性同名)，想将一个 getter 属性另取一个名字，则使用对象形式 -->\r\n    { { reverseMsgAlias } }\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from \'vuex\'\r\nexport default {\r\n  computed: {\r\n    ...mapGetters({\r\n      reverseMsgAlias: \'reverseMsg\' // { { reverseMsgAlias } } 输出：gsMerots\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n#### mutation 使用\r\nsrc/store/myStore.js\r\n```\r\n// 将 vuex 单独封装为一个文件\r\n// 1.0 导入\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\n\r\n// 2.0 注册\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nvar store = new Vuex.Store({\r\n  state: { // state 用于存储数据\r\n    msg: \'storeMsg\',\r\n    count: 1\r\n  },\r\n  getters: { // getters 相对于 vue 中的计算属性\r\n    reverseMsg (state) {\r\n      return state.msg.split(\'\').reverse().join(\'\')\r\n    }\r\n  },\r\n  mutations: { // 所有对状态或数据(state)的改变，都应该统一放在 mutations 中定义。Mutation 必须是同步函数。\r\n    increment (state, payLoad) {\r\n      state.count += payLoad.amount\r\n    }\r\n  }\r\n})\r\n\r\n// 4.0 暴露仓库\r\nexport default store\r\n\r\n```\r\nsrc/App.vue\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <state /> <hr>\r\n    <getter /> <hr>\r\n    <Mutation />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport State from \'@/components/State.vue\'\r\nimport Getter from \'@/components/Getter.vue\'\r\nimport Mutation from \'@/components/Mutation.vue\'\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    State,\r\n    Getter,\r\n    Mutation\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\nsrc/components/Mutation.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>Mutation 页面</p>\r\n    <!-- 使用方法一： 封装方法-->\r\n    <button @click=\"getAdd\">点我加1</button>\r\n    { { $store.state.count } } <br />\r\n    <!-- 使用方法二：用【辅助函数】mapMutations 来操作(数组) -->\r\n    <button @click=\"localIncrement\">点我加2</button>\r\n    { { $store.state.count } }\r\n    <!-- 使用方法三：用【辅助函数】mapMutations 来操作(对象) -->\r\n    <button @click=\"localAddAlias\">点我加3</button>\r\n    { { $store.state.count } }\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapMutations } from \'vuex\'\r\nexport default {\r\n  methods: {\r\n    // 方法一\r\n    getAdd () {\r\n      // this.$store.commit(\'increment\', {\r\n      //   amount: 1\r\n      // })\r\n      this.$store.commit({\r\n        type: \'increment\',\r\n        amount: 1\r\n      })\r\n    },\r\n    // 方法二\r\n    ...mapMutations([ // 将 `this.increment()` 映射为 `this.$store.commit(\'increment\')`\r\n      \'increment\'\r\n    ]),\r\n    localIncrement () {\r\n      this.increment({\r\n        amount: 2\r\n      })\r\n    },\r\n    // 方法三\r\n    ...mapMutations({\r\n      addAlias: \'increment\' // 将 `this.addAlias()` 映射为 `this.$store.commit(\'increment\')`\r\n    }),\r\n    localAddAlias () {\r\n      this.addAlias({\r\n        amount: 3\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n#### Action 使用\r\nsrc/store/myStore.js\r\n```\r\n// 将 vuex 单独封装为一个文件\r\n// 1.0 导入\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\n\r\n// 2.0 注册\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nvar store = new Vuex.Store({\r\n  state: { // state 用于存储数据\r\n    msg: \'storeMsg\',\r\n    count: 1\r\n  },\r\n  getters: { // getters 相对于 vue 中的计算属性\r\n    reverseMsg (state) {\r\n      return state.msg.split(\'\').reverse().join(\'\')\r\n    }\r\n  },\r\n  mutations: { // 所有对状态或数据(state)的改变，都应该统一放在 mutations 中定义。Mutation 中无法完成异步操作，只能进行【同步操作】。\r\n    increment (state, payLoad) {\r\n      state.count += payLoad.amount\r\n    }\r\n  },\r\n  actions: { // Action 用来提交 mutation，而不是直接变更状态。Action 可以包含任意【异步操作】。\r\n    // increment (context) { // context 对象 与 store 实例具有相同方法和属性 ，但不是 store 实例本身\r\n    //   context.commit(\'increment\')\r\n    // }\r\n    // increment ({ commit }) { // 从 context 对象中解构出 commit\r\n    //   commit(\'increment\')\r\n    // }\r\n    incrementAsync ({ commit }, payLoad) {\r\n      setTimeout(() => {\r\n        // commit(\'increment\',payLoad)\r\n        commit({\r\n          type: \'increment\',\r\n          amount: payLoad.amount\r\n        })\r\n      }, 1000)\r\n    }\r\n  }\r\n})\r\n\r\n// 4.0 暴露仓库\r\nexport default store\r\n\r\n```\r\nsrc/App.vue\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <state /> <hr>\r\n    <getter /> <hr>\r\n    <Mutation /> <hr>\r\n    <action />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport State from \'@/components/State.vue\'\r\nimport Getter from \'@/components/Getter.vue\'\r\nimport Mutation from \'@/components/Mutation.vue\'\r\nimport Action from \'@/components/Action.vue\'\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    State,\r\n    Getter,\r\n    Mutation,\r\n    Action\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\nsrc/components/Action.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>Action 页面</p>\r\n    <!-- 使用方法一： 封装方法-->\r\n    <button @click=\"ActionAdd\">点我加1</button>\r\n    { { $store.state.count } } <br />\r\n    <!-- 使用方法二：用【辅助函数】mapActions 来操作(数组) -->\r\n    <button @click=\"localIncrementAsync\">点我加2</button>\r\n    { { $store.state.count } } <br />\r\n    <!-- 使用方法三：用【辅助函数】mapActions 来操作(对象) -->\r\n    <button @click=\"localIncrementAsyncAlias\">点我加3</button>\r\n    { { $store.state.count } }\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from \'vuex\'\r\nexport default {\r\n  methods: {\r\n    // 方法一\r\n    ActionAdd () {\r\n      // this.$store.dispatch(\'incrementAsync\', {\r\n      //   amount: 1\r\n      // })\r\n      this.$store.dispatch({\r\n        type: \'incrementAsync\',\r\n        amount: 1\r\n      })\r\n    },\r\n    // 方法二\r\n    ...mapActions([ // 将 `this.incrementAsync()` 映射为 `this.$store.dispatch(\'incrementAsync\')`\r\n      \'incrementAsync\'\r\n    ]),\r\n    localIncrementAsync () {\r\n      this.incrementAsync({\r\n        amount: 2\r\n      })\r\n    },\r\n    // 方法三\r\n    ...mapActions({\r\n      incrementAsyncAlias: \'incrementAsync\' // 将 `this.incrementAsyncAlias()` 映射为 `this.$store.dispatch(\'incrementAsync\')`\r\n    }),\r\n    localIncrementAsyncAlias () {\r\n      this.incrementAsyncAlias({\r\n        amount: 3\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n#### Module 模块的使用\r\n每个模块都有自己 state/getters/mutations/acitons\r\n新建一个模块 src/store/ModuleA.js\r\n```\r\n// 为A页面提供数据的 模块A\r\nconst moduleA = {\r\n  namespaced: true, // 启用命名空间\r\n  state: {\r\n    name: \'AAAA\',\r\n    gender: \'男\',\r\n    age: 18\r\n  },\r\n  getters: {\r\n    AgetGender (state) { // 这里的 `state` 对象是模块的局部状态\r\n      return state.gender + \' Male\'\r\n    }\r\n  },\r\n  mutations: {\r\n    Aincrement (state, payLoad) {\r\n      state.age += payLoad.amount\r\n    }\r\n  },\r\n  actions: {\r\n    Aincrement ({ commit }, payLoad) {\r\n      commit({\r\n        type: \'Aincrement\',\r\n        amount: payLoad.amount\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default moduleA\r\n\r\n```\r\n再新建一个模块 src/store/ModuleB.js\r\n```\r\n// 为B页面提供数据的 模块B\r\nconst moduleB = {\r\n  namespaced: true, // 启用命名空间\r\n  state: {\r\n    name: \'BBBB\',\r\n    gender: \'女\',\r\n    age: 16\r\n  },\r\n  getters: {\r\n    BgetGender (state) { // 这里的 `state` 对象是模块的局部状态\r\n      return state.gender + \' Female\'\r\n    }\r\n  },\r\n  mutations: {\r\n    Bincrement (state, payLoad) {\r\n      state.age += payLoad.amount\r\n    }\r\n  },\r\n  actions: {\r\n    Bincrement ({ commit }, payLoad) {\r\n      commit({\r\n        type: \'Bincrement\',\r\n        amount: payLoad.amount\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default moduleB\r\n\r\n```\r\n把模块A和模块B 导入到 src/store/myStore.js 中\r\n```\r\n// 将 vuex 单独封装为一个文件\r\n// 1.0 导入\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\nimport moduleA from \'./moduleA.js\'\r\nimport moduleB from \'./moduleB.js\'\r\n\r\n// 2.0 注册\r\nVue.use(Vuex)\r\n\r\n// 3.0 创建 vuex 仓库\r\nvar store = new Vuex.Store({\r\n  // 导入模块\r\n  modules: {\r\n    a: moduleA, // 这里，a 和 b 才是命名空间 (如果 moduleA 和 moduleB 中启用了命名空间的话)\r\n    b: moduleB\r\n  },\r\n  state: { // state 用于存储数据\r\n    msg: \'storeMsg\',\r\n    count: 1\r\n  },\r\n  getters: { // getters 相对于 vue 中的计算属性\r\n    reverseMsg (state) {\r\n      return state.msg.split(\'\').reverse().join(\'\')\r\n    }\r\n  },\r\n  mutations: { // 所有对状态或数据(state)的改变，都应该统一放在 mutations 中定义。Mutation 中无法完成异步操作，只能进行【同步操作】。\r\n    increment (state, payLoad) {\r\n      state.count += payLoad.amount\r\n    }\r\n  },\r\n  actions: { // Action 用来提交 mutation，而不是直接变更状态。Action 可以包含任意【异步操作】。\r\n    // increment (context) { // context 对象 与 store 实例具有相同方法和属性 ，但不是 store 实例本身\r\n    //   context.commit(\'increment\')\r\n    // }\r\n    // increment ({ commit }) { // 从 context 对象中解构出 commit\r\n    //   commit(\'increment\')\r\n    // }\r\n    incrementAsync ({ commit }, payLoad) {\r\n      setTimeout(() => {\r\n        // commit(\'increment\',payLoad)\r\n        commit({\r\n          type: \'increment\',\r\n          amount: payLoad.amount\r\n        })\r\n      }, 1000)\r\n    }\r\n  }\r\n})\r\n\r\n// 4.0 暴露仓库\r\nexport default store\r\n\r\n```\r\n在 src/App.vue 中引入页面A和页面B\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <state /> <hr>\r\n    <getter /> <hr>\r\n    <Mutation /> <hr>\r\n    <action /> <hr>\r\n    <ModuleA /> <hr>\r\n    <ModuleB />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport State from \'@/components/State.vue\'\r\nimport Getter from \'@/components/Getter.vue\'\r\nimport Mutation from \'@/components/Mutation.vue\'\r\nimport Action from \'@/components/Action.vue\'\r\nimport ModuleA from \'@/components/ModuleA.vue\'\r\nimport ModuleB from \'@/components/ModuleB.vue\'\r\nexport default {\r\n  name: \'App\',\r\n  components: {\r\n    State,\r\n    Getter,\r\n    Mutation,\r\n    Action,\r\n    ModuleA,\r\n    ModuleB\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\n新建页面 A：src/components/ModuleA.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>A 页面</p>\r\n    <p>\r\n      A模块数据：{ { name} } -- { { gender } } -- { { age } } -- { { AgetGender } }\r\n    </p>\r\n    <p>\r\n      全局数据：{ { count } }\r\n    </p>\r\n    <button @click=\"add\">操作A模块 点我A加4岁</button>\r\n    <button @click=\"addGolbal\">操作全局 加1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from \'vuex\'\r\nexport default {\r\n  computed: {\r\n    // 映射局部模块A\r\n    ...mapState(\'a\', { // 加命名空间\r\n      name: \'name\',\r\n      gender: \'gender\',\r\n      age: \'age\'\r\n    }),\r\n    ...mapGetters(\'a\', { // 加命名空间\r\n      AgetGender: \'AgetGender\'\r\n    }),\r\n    // 映射全局数据\r\n    ...mapState({\r\n      count: \'count\'\r\n    })\r\n  },\r\n  methods: {\r\n    // 映射局部模块A中的 actions\r\n    ...mapActions(\'a\', { // 加命名空间\r\n      Aincrement: \'Aincrement\'\r\n    }),\r\n    add () {\r\n      this.Aincrement({\r\n        amount: 4\r\n      })\r\n    },\r\n    // 映射全局 actions\r\n    ...mapActions({\r\n      incrementAsync: \'incrementAsync\'\r\n    }),\r\n    addGolbal () {\r\n      this.incrementAsync({\r\n        amount: 1\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n新建页面 B：src/components/ModuleB.vue\r\n```\r\n<template>\r\n  <div>\r\n    <p>B 页面</p>\r\n    <p>\r\n      B模块数据：{ { name} } -- { { gender } } -- { { age } } -- { { BgetGender } }\r\n    </p>\r\n    <p>\r\n      全局数据：{ { count } }\r\n    </p>\r\n    <button @click=\"add\">操作B模块 点我加2岁</button>\r\n    <button @click=\"addGolbal\">操作全局 加2</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from \'vuex\'\r\nexport default {\r\n  computed: {\r\n    // 映射局部模块A\r\n    ...mapState(\'b\', { // 加命名空间\r\n      name: \'name\',\r\n      gender: \'gender\',\r\n      age: \'age\'\r\n    }),\r\n    ...mapGetters(\'b\', { // 加命名空间\r\n      BgetGender: \'BgetGender\'\r\n    }),\r\n    // 映射全局数据\r\n    ...mapState({\r\n      count: \'count\'\r\n    })\r\n  },\r\n  methods: {\r\n    // 映射局部模块A中的 actions\r\n    ...mapActions(\'b\', { // 加命名空间\r\n      Bincrement: \'Bincrement\'\r\n    }),\r\n    add () {\r\n      this.Bincrement({\r\n        amount: 2\r\n      })\r\n    },\r\n    // 映射全局 actions\r\n    ...mapActions({\r\n      incrementAsync: \'incrementAsync\'\r\n    }),\r\n    addGolbal () {\r\n      this.incrementAsync({\r\n        amount: 2\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```',10,100,'2019-02-26 05:35:04','2019-04-09 13:47:00'),(149,'## webpack\r\n### webpack介绍\r\n官网： https://webpack.docschina.org/guides/\r\n概念：webpack 是一个现代 JavaScript 应用程序的静态模块打包器(static module bundler)\r\ndemo：以下介绍的demo项目名称为 `webpack-demo` ，demo地址：https://github.com/andy-love-coding/webpack-deom\r\n\r\n### 安装与打包指令\r\n全局安装（不建议全局安装）：https://webpack.docschina.org/guides/installation\r\n```\r\nnpm install webpack -g \r\nnpm install webpack-cli -g // 如果你使用 webpack v4+ 版本，你还需要安装 CLI。\r\nwebpack -v // 检测webpack安装的版本\r\n```\r\n全局打包指令: `项目目录> webpack 入口文件`\r\n```\r\nwebpack ./src/main.js   // 将来会在项目目录下生成dist目录\r\n```\r\n全局卸载\r\n```\r\nnpm uni webpack  webpack-cli -g\r\n```\r\n本地安装（建议）：https://webpack.docschina.org/guides/installation\r\n\r\n—— 直接将webpack当做第三方包安装到当前项目中\r\n—— 第1步先初始化项目，生成package.json\r\n```\r\nnpm init\r\n```\r\n—— 第2步本地安装安装（会生成node_module)\r\n```\r\nnpm install webpack  webpack-cli\r\n```\r\n**本地打包指令**\r\n—— 本地打包指令需在package.json中加入一个或多个npm scripts\r\n```\r\n\"scripts\": {\r\n    \"build\": \"webpack --config webpack.config.js\" // 运行start时会找到webpack,还有配置文件\r\n}\r\n```\r\n```\r\nnpm run start // 本地运行打包指令\r\n```\r\n访问本地webpack版本\r\n```\r\n当你在本地安装 webpack 后，你能够从 node_modules/.bin/webpack 访问它的 bin 版本。\r\n```\r\n### webpack.config.js 配置如下\r\n```\r\n// 导入path核心模块\r\nconst path = require(\'path\')\r\n// 导入 HtmlWebpackPlugin模块，自动生成html入口文件\r\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\r\n// 导入自动清除dist目录里面文件的模块\r\nconst CleanWebpackPlugin = require(\'clean-webpack-plugin\');\r\nconst webpack = require(\'webpack\'); // 第一步引入webpack \r\n\r\nmodule.exports = {\r\n  mode: \'development\', \r\n  // 配置入口文件信息(单页面应用程序spa)\r\n  entry: \'./src/main.js\',\r\n  // 将用webpack-dev-server以服务器的形式开启一个网站\r\n  devServer: {\r\n    contentBase: \'./dist\', // 生成的网站目录为dist，其默认打开index.html，所以记得设置默认filename: \'index.html\'\r\n    hot: true // 第二步设置热更新\r\n  },\r\n  resolve: {\r\n    extensions: [\'.wasm\', \'.mjs\', \'.js\', \'.json\', \'css\'], // 将来引入文件时，不需要添加后缀的文件\r\n    alias: {\r\n        \'@\': path.resolve(__dirname, \"src\") // 给src路径设置一个别名\r\n    }\r\n  },\r\n  // 在生产环境（mode: \'production\'）打包后，浏览器控制台可以显示错误信息\r\n  devtool: \'source-map\',\r\n  // 配置webpack的插件\r\n  plugins: [\r\n    // 注册组件，自动清除dist目录\r\n    new CleanWebpackPlugin([\'dist\']),\r\n    // 官网：https://github.com/jantimon/html-webpack-plugin\r\n    new HtmlWebpackPlugin({ // 使用插件自动在dist目录生成一个html文件，并自定引用js文件\r\n      title: \'Output Management\', // 生成html文件的标题\r\n      filename: \'index.html\', // 用来设置生成html文件的名称\r\n      template: path.resolve(__dirname, \"index.html\")\r\n    }),\r\n    // 注册热加载插件\r\n    new webpack.HotModuleReplacementPlugin()\r\n  ],\r\n  // 配置出口文件信息\r\n  output: {\r\n    // 配置将文件打包好的输出路径\r\n    // __dirname: 当前打包目录\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    // 将来打包好的文件名称\r\n    filename: \"bundle.js\"\r\n  },\r\n  // 配置当前webpack打包的文件\r\n  module: {\r\n    rules: [ // 打包规则\r\n      // 打包css\r\n      {\r\n        test: /\\.css$/, // 正则，打包以\".css\"结尾的文件\r\n        use: [\r\n          // 这里有先后顺序，从后向前\r\n          \'style-loader\', // 第二步：将打包好的css以style的形式放到html页面中\r\n          \'css-loader\' // 第一步：将main.js中引入的css进行打包进js文件中\r\n        ]\r\n      },\r\n      // 打包图片\r\n      {\r\n        test: /\\.(png|svg|jpg|fif)$/,\r\n        use: [\r\n          \'file-loader\'\r\n        ]\r\n      },\r\n      // 打包字体\r\n      // 可以npm i bootstrap@3.3.7 ,在main.js中引入bootstrap.css，这个css会包含字体\r\n      // import \'../node_modules/bootstrap/dist/css/bootstrap.css\';\r\n      {\r\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\r\n        use: [\r\n          \'file-loader\'\r\n        ]\r\n      },\r\n      // es6转es5\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /(node_modules|bower_components)/, // 排除这些文件夹不用转es5\r\n        use: {\r\n          loader: \'babel-loader\',\r\n          options: {\r\n            presets: [\'@babel/preset-env\']\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n### 打包各种资源\r\n打包js代码（webpack自带的功能）\r\n```\r\n- webpack打包过程会把node中的代码（如：require）打包为浏览器识别的代码。\r\n- 会以入口文件为主，将所有入口文件中引入的文件，打包到同一个js文件中。\r\n```\r\n打包css代码（这里指的css是指在main.js中引入的css）\r\n—— 默认webpack是不能打包css的，要打包css需要借助一下loader来打包\r\n—— 加载css需要借助：https://webpack.docschina.org/guides/asset-management\r\n```\r\nnpm install  style-loader css-loader // 加载css，需要安装两个第三方包\r\nnpm i file-loader // 加载图片，需要安装的第三方包\r\n```\r\n—— 配置webpack.config.js文件，添加`module`\r\n```\r\nmodule.exports = {\r\n  output: {...},\r\n  // 配置当前webpack打包的文件\r\n  module: { \r\n    rules: [ // 打包规则\r\n        // 加载css\r\n        {\r\n            test: /\\.css$/, // 正则，打包以\".css\"结尾的文件\r\n            use: [\r\n              // 这里有先后顺序，从后向前\r\n              \'style-loader\', // 第二步：将打包好的css以style的形式放到html页面中\r\n              \'css-loader\' // 第一步：将main.js中引入的css进行打包进js文件中\r\n            ]\r\n        },\r\n    ]\r\n  }\r\n}\r\n```\r\n### 自动生成index.html\r\n设定HtmlWebpackPlugin： https://webpack.docschina.org/guides/output-management/#%E8%AE%BE%E5%AE%9A-htmlwebpackplugin\r\n\r\n------------\r\n\r\n打包时将index.html拷贝到dist目录下（自动生成index.html） \r\n—— 第一步：下载 `html-webpack-plugin` 插件\r\n```\r\nnpm install html-webpack-plugin\r\n```\r\n—— 第二步：配置webpack.config.js文件，添加plugins （官网配置：https://github.com/jantimon/html-webpack-plugin）\r\n```\r\n// 1.0导入 HtmlWebpackPlugin模块\r\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\r\nmodule.exports = {\r\n  entry: {...},\r\n  // 配置webpack的插件\r\n  plugins: [    \r\n    new HtmlWebpackPlugin({ // 使用插件自动在dist目录生成一个html文件，并自定引用js文件\r\n      title: \'Output Management\', // 生成html文件的标题\r\n      filename: \'index.html\', // 用来设置生成html文件的名称\r\n      template: path.resolve(__dirname, \"index.html\")\r\n    })\r\n  ],\r\n  output: {...}\r\n};\r\n```\r\n### 自动清理dist目录\r\n需安装插件： clean-webpack-plugin  https://webpack.docschina.org/guides/output-management\r\n```\r\nnpm install clean-webpack-plugin\r\n```\r\n配置 webpack.config.js\r\n```\r\nconst CleanWebpackPlugin = require(\'clean-webpack-plugin\'); // 导入清理dist目录插件\r\nplugins: [ \r\n	new CleanWebpackPlugin([\'dist\']), // 注册插件\r\n	new HtmlWebpackPlugin({\r\n      title: \'Output Management\'\r\n    })\r\n],\r\n```\r\n### 开发工具webpack-dev-server\r\n`webpack-dev-server` 将网站以服务器的方式打开，修改代码后，无需重新打包即可查看效果\r\n官网：https://webpack.docschina.org/guides/development/#%E4%BD%BF%E7%94%A8-webpack-dev-server\r\n下载第三方包：`webpack-dev-server`\r\n```\r\nnpm install  webpack-dev-server\r\n```\r\n配置 webpack.config.js\r\n```\r\nmodule.exports = {\r\n  entry: \'./src/main.js\',\r\n  devServer: {\r\n    // 生成的网站目录为dist，其默认打开index.html，所以记得设置默认filename: \'index.html\'\r\n    contentBase: \'./dist\' \r\n  },\r\n  ...\r\n}\r\n```\r\n去package.json中配置\r\n```\r\n\"scripts\": {\r\n	\"dev\": \"webpack-dev-server --open\",  // 通过 npm run dev 来运行（默认打开index.html页面）\r\n}\r\n```\r\n### 模块热替换(HMR)\r\n模块热替换(Hot Module Replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。 （不过好像不怎么灵哦，有时间再研究吧）\r\n官网：https://webpack.docschina.org/guides/hot-module-replacement\r\n配置 `webpack.config.js`\r\n```\r\nconst webpack = require(\'webpack\'); // 第一步引入webpack \r\nmodule.exports = {\r\n  entry: \'./src/main.js\',\r\n  devServer: {\r\n    hot: true // 第二步设置热更新\r\n  },\r\n  plugins: [ \r\n	// 第三步注册热加载插件\r\n	new webpack.HotModuleReplacementPlugin()\r\n  ],\r\n  ...\r\n}\r\n```\r\n### vue生产环境部署\r\nvue生产环境部署：https://webpack.docschina.org/concepts/mode/\r\n开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句却没有用，反而会增加应用的体积。此外，有些警告检查还有一些小的运行时开销，这在生产环境模式下是可以避免的。 \r\n在 webpack 4+ 中，你可以使用 mode 选项：\r\n```\r\nmodule.exports = {\r\n  mode: \'production\' // development、production、none\r\n}\r\n```\r\n### 报错追踪source map\r\nsource map官网：https://webpack.docschina.org/guides/development/#%E4%BD%BF%E7%94%A8-source-map\r\n在生产环境中（mode: \'production\'），当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（`a.js`, `b.js` 和 `c.js`）打包到一个 bundle（`bundle.js`）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 `bundle.js`。\r\n例如在其中一个js文件中抛出一个异常\r\n```\r\nplus(num1, num2) {\r\n  // 抛出一个异常\r\n  throw new Error();\r\n  return Number(num1) + Number(num2);\r\n}\r\n```\r\n其报错为如下，这样就追踪不到错误的位置\r\n```\r\nUncaught Error\r\n    at Object.plus (bundle.js:1)\r\n    at HTMLInputElement.document.getElementById.onclick (bundle.js:1)\r\n```\r\n此时只需在 `webpack.config.js` 中配置 `devtool` 即可\r\n```\r\nmodule.exports = {\r\n  entry: {...},\r\n  // 在生产环境（mode: \'production\'）打包后，浏览器控制台可以显示错误信息\r\n  // devtool: \'inline-source-map\', // inline会把映射文件打包到bundle.js中去，使boundle.js过大\r\n  devtool: \'source-map\', // 不用inline选项，映射文件会单独打包出来，建议这种设置\r\n  ...\r\n}\r\n```\r\n### es6转es5(babel-laoder)\r\nbabel-loader官网：https://webpack.docschina.org/loaders/babel-loader\r\n为什么要转es5，因为：有些浏览器不支持es6，若不转，在webpack打包时，代码仍将是es6格式，会使无法识别es6的浏览器无法使用网站。\r\nbabel-loader是用来将es6转换成es5的插件，在打包时，会把es6的代码转换成es5的代码。\r\n下载安装\r\n```\r\nnpm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env\r\n```\r\n配置 `webpack.config.js` 文件\r\n```\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/,\r\n      exclude: /(node_modules|bower_components)/, // 排除这些文件夹不用转es5\r\n      use: {\r\n        loader: \'babel-loader\',\r\n        options: {\r\n          presets: [\'@babel/preset-env\']\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n### resolve\r\n官网： https://webpack.docschina.org/configuration/resolve/#resolve-extensions\r\n```\r\nmodule.exports = {\r\n  resolve: {\r\n    extensions: [\'.wasm\', \'.mjs\', \'.js\', \'.json\', \'css\'],//将来引入文件时，不需要添加后 缀的文件\r\n    alias: {\r\n        \'@\': path.resolve(__dirname, \"src\") // 给src路径设置一个别名\r\n    }\r\n  }\r\n};\r\n```\r\n### 打包.vue后缀的文件\r\n新建demo项目\r\n—— 为测试打包.vue文件，新建一个demo项目：vue-webpack-demo , 地址：\r\n—— 复制前面 webpack-demo  项目（地址：https://github.com/andy-love-coding/vue-webpack-demo） 中的三个文件package.json 、 package-lock.json 、webpack.config.js ，到新demo项目中vue-webpack-demo\r\n—— 初始化项目：npm i\r\n—— 安装vue： npm i vue\r\n使用vue-loader，官网：https://vue-loader.vuejs.org/zh\r\n下载vue-loader\r\n```\r\nnpm i vue-loader\r\n```\r\n配置 `webpack.config.js` 文件\r\n```\r\nconst VueLoaderPlugin = require(\'vue-loader/lib/plugin\'); // 用于打包.vue\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      // ... 其它规则\r\n      {\r\n        test: /\\.vue$/,\r\n        use: {\r\n          loader: \'vue-loader\'\r\n        } \r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    // 请确保引入这个插件！\r\n    new VueLoaderPlugin()\r\n  ]\r\n}\r\n```\r\n这样会报错\r\n```\r\n[vue-loader] vue-template-compiler must be installed as a peer dependency, or a compatible compiler implementation must be passed via options.\r\n```\r\n此时需安装vue模板编译器： `vue-template-compiler`\r\n```\r\nnpm i vue-template-compiler\r\n```\r\n接下来，浏览器报错，因为vue版本是vue.runtime.js ，它不认识 template: `<App />` \r\n```\r\nYou are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\r\n```\r\n此时一种解决方法为如下，不推荐这种\r\n```\r\n// 不需要编译器\r\nnew Vue({\r\n  el: \"#app\",\r\n  render (h) {\r\n    return h(App);\r\n  }\r\n})\r\n```\r\n另一种解决方法为配置 `webpack.config.js` 文件，推荐这种\r\n```\r\nmodule.exports = {\r\n  // ...\r\n  resolve: {\r\n    alias: {\r\n      \'vue$\': \'vue/dist/vue.esm.js\'\r\n    }\r\n  }\r\n}\r\n```\r\n### 自动浏览器打开项目\r\n在package.js文件中，dev属性中加上--open，那么在项目编译npm run dev结束后，会自动在浏览器中打开项目\r\n```\r\n\"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --open\",\r\n```',10,100,'2019-02-26 07:24:44','2019-02-26 08:33:38'),(150,'## 项目介绍\r\n项目名称：电商网站后台，https://github.com/andy-love-coding/my-app\r\n开发工具：vscode\r\n前端框架：vue，element等（主要开发前端）\r\n后端框架：nodejs、expess（后端接口已经写好，在“aip-server”项目中）https://github.com/andy-love-coding/api-server\r\n\r\n![V05y3G.png](https://t1.picb.cc/uploads/2019/03/26/V05y3G.png)',11,100,'2019-02-26 08:40:20','2019-04-06 13:12:05'),(151,'## 准备工作',11,100,'2019-02-26 08:41:45','2019-03-26 07:58:19'),(152,'### 安装服务器（api-server）\r\n#### 安装后台服务器\r\n```\r\ngit clone https://github.com/andy-love-coding/api-server.git vue-api-server\r\n```\r\n#### 服务器 bug 注意\r\n```\r\n当新增商品有图片时，有可能会导致服务器崩溃，原因是从github下载服务器（api-server）代码时，服务器缺少2个放图片的目录，补上即可。\r\n在服务器根目录创建2个文件夹：\r\nmkdir uploads\r\nmkdir uplaads/goodspics\r\n```\r\n#### 启动后台服务器\r\n1.0 在aip-server项目中将node_moduleds进行下载\r\n```\r\nnpm install\r\n```\r\n2.0 在config文件中找到default.json，修改数据的用户名和密码\r\n3.0 创建数据\r\n```\r\n- 打开navcat创建一个数据名称：itcast\r\n- 找到api-server中db目录，用编辑器打开mydb.sql，复制所有命令，在navcat中新建查询，粘贴命令，执行，即可创建项目所需的数据。\r\n```\r\n4.0 将后台服务器启动起来\r\n```\r\nnode  app.js\r\n```\r\n#### 测试项目接口\r\n找到后台服务器的接口文档\r\n1.0 将来如果请求接口，必须通过这段路径来请求：`http://localhost:8888/api/private/v1/login`\r\n> 若在虚拟机运行node.js服务器，在主机访问接口，那么在主机中用虚拟机的ip来访问即可：`192.168.10.10:8888/api/private/v1/login`\r\n【注意】：\r\n	**端口 (8888) ** 在 服务器项目（api-server）中的`app.js`中设置：`app.listen(8888);`\r\n	**基础URL** 在vue项目 (my-app) 中的 `src/js/myaxios.js` 插件中设置：`var instance = Axios.create({\r\n    baseURL: \'http://192.168.10.10:8888/api/private/v1/\'\r\n  });`\r\n\r\n2.0 测试两个接口\r\n**登录接口**\r\n—— 请求路径：login\r\n—— 请求方法：post\r\n—— 请求参数\r\n\r\n| 参数名      | 参数说明 | 备注   |\r\n| -------- | ---- | ---- |\r\n| username | 用户名  | 不能为空 |\r\n| password | 密码   | 不能为空 |\r\n\r\n—— 响应参数\r\n\r\n | 参数名      | 参数说明    | 备注         |\r\n | -------- | ------- | ---------- |\r\n | id       | 用户 ID   |            |\r\n | rid      | 用户角色 ID |            |\r\n | username | 用户名     |            |\r\n | mobile   | 手机号     |            |\r\n | email    | 邮箱      |            |\r\n | token    | 令牌      | 基于 jwt 的令牌 |\r\n\r\n—— 返回数据\r\n```\r\n{\r\n    \"data\": {\r\n        \"id\": 500,\r\n        \"rid\": 0,\r\n        \"username\": \"admin\",\r\n        \"mobile\": \"123\",\r\n        \"email\": \"123@qq.com\",\r\n        \"token\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM\"\r\n    },\r\n    \"meta\": {\r\n        \"msg\": \"登录成功\",\r\n        \"status\": 200\r\n    }\r\n}\r\n```\r\n**获取用户列表数据接口**\r\n—— 请求路径：users\r\n—— 请求方法：get\r\n—— 请求参数\r\n\r\n| 参数名      | 参数说明   | 备注   |\r\n| -------- | ------ | ---- |\r\n| query    | 查询参数   | 可以为空 |\r\n| pagenum  | 当前页码   | 不能为空 |\r\n| pagesize | 每页显示条数 | 不能为空 |\r\n\r\n—— 响应参数\r\n\r\n| 参数名       | 参数说明   | 备注   |\r\n| --------- | ------ | ---- |\r\n| totalpage | 总记录数   |      |\r\n| pagenum   | 当前页码   |      |\r\n| users     | 用户数据集合 |      |\r\n\r\n—— 响应数据\r\n```json\r\n{\r\n    \"data\": {\r\n        \"totalpage\": 5,\r\n        \"pagenum\": 4,\r\n        \"users\": [\r\n            {\r\n                \"id\": 25,\r\n                \"username\": \"tige117\",\r\n                \"mobile\": \"18616358651\",\r\n                \"type\": 1,\r\n                \"openid\": \"\",\r\n                \"email\": \"tige112@163.com\",\r\n                \"create_time\": \"2017-11-09T20:36:26.000Z\",\r\n                \"modify_time\": null,\r\n                \"is_delete\": false,\r\n                \"is_active\": false\r\n            }\r\n        ]\r\n    },\r\n    \"meta\": {\r\n        \"msg\": \"获取成功\",\r\n        \"status\": 200\r\n    }\r\n}\r\n```\r\n#### API需授权登录 (token)\r\n—— 将来除了访问登录页面不需要这个token以外，其它页面请求都需要在请求头中加入token\r\n—— 即除登录api接口外，其他界都都需要API授权 ，必须在请求头中使用 Authorization 字段提供 token 令牌',11,100,'2019-02-26 08:50:11','2019-04-05 12:05:56'),(153,'### 安装前端项目（vue）\r\n#### 安装前端项目\r\n```\r\ngit clone https://github.com/andy-love-coding/my-app.git vue-demo\r\n```\r\n\r\n#### 若在虚拟机中运行 主机访问 需注意\r\n若vue项目运行在虚拟机中，而要在主机中访问，可以修改`config/index.js`文件中`host` `port`属性\r\n```\r\nhost: \'home.test\',  // 把默认值 localhost 改成指向虚拟机域名 home.test\r\nport: 8080,\r\n```\r\n#### 启动前端项目（初始化）\r\n```\r\n// 安装第三方包\r\nnpm install\r\n// 启动项目\r\nnpm run dev\r\n```\r\n#### 在浏览器中预览\r\n运行 npm run dev 后，得到开发环境的预览网址：http://localhost:8080 (这是默认网址)\r\n如果修改过了 `config/index.js`文件，可以得到自定义的网址，如：http://home.test:8080 (自定义网址)\r\n浏览效果如下：\r\n![V05y3G.png](https://t1.picb.cc/uploads/2019/03/26/V05y3G.png)\r\n\r\n至此，前后端安装完毕，可以参照安装好的前端项目，来重新写一遍前端项目。',11,100,'2019-02-26 08:50:59','2019-04-06 13:14:03'),(166,'## 公众号官网\r\n官方文档：https://mp.weixin.qq.com/wiki\r\n登录：https://mp.weixin.qq.com',12,100,'2019-02-26 09:26:19','2019-02-26 09:26:19'),(167,'### 公众号开发介绍\r\n公众号开发分两种模式，被动接收（与响应）、主动请求\r\n被动接收（与响应) 和 主动请求 的区别：\r\n—— 两者是相互独立的，可以分别单独工作\r\n```\r\n- 被动接收：靠Token计算匹配，一次接入成功后，会持续接收微信服务器的消息，并可响应消息；\r\n- 主动请求：靠appID，appsecret生成access_token，每次主动发起接口调用时带上access_token。\r\n```',12,100,'2019-02-26 09:27:37','2019-02-26 09:27:37'),(168,'#### 被动接收（与响应）\r\n被动接收（与响应），主要分为两大步，接入过程 与 响应过程\r\n—— **接入过程**：通过在公众号后台配置 URL （开发者服务器地址）、Token ；在微信后台点击提交配置按钮，微信服务器先是向上述URL发送带参get请求，然后开发者服务器根据Token计算匹配，若匹配成功则返回echostr字符串给微信服务器，接入生效。接入成功后，意味着微信服务器会向上述URL发送post请求，来向开发者推送各种消息。\r\n```\r\n<?php\r\n// 在微信公众号后台设置的token，不会在网络传输，只有微信和开发者自己知道\r\n$token = \"weixin\";\r\n\r\n// 获取签名参数\r\n$arr[\'token\'] = $token;\r\n$arr[\"timestamp\"] = $_GET[\"timestamp\"];\r\n$arr[\"nonce\"] = $_GET[\"nonce\"];\r\n\r\n// 对签名参数排序\r\nsort($arr, SORT_STRING);\r\n\r\n// 将签名参数拼接成字符串，并sha1加密\r\n$tmpStr = implode($arr);\r\n$tmpStr = sha1($tmpStr); // 最后加密计算得出的签名\r\n\r\n// 若本地计算的签名与微信传来的签名一致，则证明消息来源微信服务器，返回echostr，接入微信服务器生效\r\nif ($tmpStr = $_GET[\'signature\']) {\r\n  echo $_GET[\'echostr\'];\r\n}\r\n```\r\n**响应过程**：接入成功后，微信会给开发者填写的URL发送post请求推送消息，开发者接到post请求后，可以进行响应。\r\n```\r\n// 接入与响应并存\r\npublic function __construct()\r\n{\r\n	if (!isset($_GET[\"echostr\"])) {\r\n		$this->pdo = include \'db.php\'; // 先引入pdo\r\n		$this->responseMsg(); // 响应时：微信服务器发送post请求，没有echostr参数			\r\n	} else {\r\n		$this->valid(); // 接入时：微信服务器发送get请求，有echostr参数\r\n	}\r\n}\r\n\r\n// 被动接收消息，并响应,响应要求：3次5秒（即：在3次5秒内响应微信服务器，如无法保证，也应该回复空串，微信服务器会不做处理）\r\npublic function responseMsg()\r\n{\r\n	// 获取原生post数据：php5.5之后官方不建议使用,若使用会报一个警告，php7.0之后则会直接报致命错误\r\n	// $postStr = $GLOBALS[\"HTTP_RAW_POST_DATA\"];\r\n	// 接收原生post数据\r\n	$postStr = file_get_contents(\'php://input\');\r\n	// 记录接收日志\r\n	$this->writeLog($postStr);\r\n\r\n	if (!empty($postStr)) {\r\n		// 把接收的xml数据，转化成对象\r\n		$postObj = simplexml_load_string($postStr, \'SimpleXMLElement\', LIBXML_NOCDATA);\r\n		// 消息类型\r\n		$msgType = $postObj->MsgType;\r\n		$ret = \'\';\r\n		switch ($msgType) {\r\n			case \'text\': // 文本\r\n				echo $ret = $this->handleText($postObj); // 回复文本\r\n				break;\r\n			case \'image\': // 图片\r\n				echo $ret = $this->handleImage($postObj);  // 回复图片\r\n				break;\r\n			case \'voice\':\r\n				echo $ret = $this->handleVoice($postObj);\r\n				break;\r\n			case \'event\': // 事件\r\n				echo $ret = $this->handleEvent($postObj); // 处理事件，并回复文本\r\n				break;\r\n		}\r\n		// 记录发送日志\r\n		$this->writeLog($ret, 2);\r\n	}\r\n}\r\n```\r\n#### 主动请求\r\n主动请求两步：获取access_token  和 用access_token调用接口\r\n主动请求详见以下各个章节。',12,100,'2019-02-26 09:29:44','2019-02-26 09:29:44'),(169,'## natapp内网穿透 (windows)\r\n### natapp介绍\r\n官网：https://natapp.cn\r\n`natapp` 软件,它给我们提供一个外网的域名，通过此软件，把我们内网的IP和端口，映射到它自己的服务器上面，这样公众号服务器访问到他们的服务器上面，然后它在转发到我们的内网中，这样就实现了内网的穿透，即**本地局域网借助 natapp 连接到公网，从而穿透了内网，达到了用内网搭建服务器的目标。**\r\n### natapp注册\r\n注册\r\n实名认证\r\n购买隧道（个人有2个免费的隧道）\r\n—— 协议：web\r\n—— 端口：不要用80端口，尽量用大点的端口（5000端口以后），如：7000\r\n购买隧道完成后，得到隧道的authtoken，这个就是内网穿透的凭证\r\n配置apache多端口，监听隧道对应的端口（如上7000）\r\n—— 在配置文件中conf/httpd.conf，添加监听的端口\r\n```\r\nListen 80\r\nListen 7000\r\n```\r\n### 下载natapp客户端\r\n下载客户端：https://natapp.cn/#download\r\n加config.inf ：下载后，需要在与客户端同一目录下，加一个配置文件 config.ini（记得替换成自己的authotoken）\r\n—— config.ini\r\n```\r\n[default]\r\nauthtoken=后台所提供的authtoken值\r\nloglevel=DEBUG\r\n```\r\n### 运行natapp客户端\r\n加好配置文件后，用命令行运行 natapp.exe 即可，记得不是双击运行哦\r\ncmd下的运行命令\r\n```\r\n\\Users\\andy\\Desktop\\natapp>natapp.exe\r\n```\r\n运行成功\r\n```\r\nPowered By NATAPP       Please visit https://natapp.cn\r\nTunnel Status           Online\r\nVersion                 2.3.8\r\nForwarding              http://4fmv38.natappfree.cc -> 127.0.0.1:7000\r\nWeb Interface           http://127.0.0.1:4040\r\nTotal Connections       0\r\n```\r\n这样就可以用外网访问本地站点了：http://4fmv38.natappfree.cc/info.php (注意免费隧道，三级域名是动态分配的)\r\n调试页面：http://127.0.0.1:4040/http/in （这个相当于chrome的调试工具，对于公众号开发调试非常有用）\r\n运行错误（错误原因：可能是authotoken写错，或者是config.ini的字符集不对，可尝试更换字符集。）\r\n```\r\n认证错误 请登录 https://natapp.cn 查看相关信息 : errorCode :100 Msg:authtoken错误，请注意前后不得有空格等字符\r\n```',12,100,'2019-02-26 09:36:20','2019-02-26 09:36:20'),(170,'## 开始开发',12,100,'2019-02-26 09:39:04','2019-02-26 09:39:04'),(171,'### 接口测试号申请\r\n入口：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421137522\r\n填写 URL  Token ，点击 ”提交“ 接入，有时候要多点几次，才能成功。\r\n### 公众号接入说明\r\n官网>接入指南：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319\r\n下载接入的示例代码：https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318183&token=&lang=zh_CN\r\n自己也写了个简单的接入代码：\r\nvscode php格式化插件：PHP Intelephense ，安装即可使用\r\n### 获取access_token\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183\r\naccess_token是请求微信接口的唯一凭证\r\n有效期7200秒，一定要缓存起来；主动定时刷新；且提供被动（手动）刷新模式；新生成access_token后，老access_token还可以使用5分钟；一天请求次数限制2000次。因此access_token 要做缓存。\r\n用一个单独的服务单独管理，供全局使用，不要混在业务代码中\r\n示例代码\r\n```\r\n<?php\r\n// 获取access_token\r\n\r\nclass Token\r\n{\r\n  const APPID = \'wx4f9f7500f8bd7ac2\';\r\n  const APPSECRET = \'d1d86918105ce78a485de70bc70025c6\';\r\n\r\n  public function getAccessToken()\r\n  {\r\n    // 设置一个缓存文件存储access_token，实际工作中不会用文件，会存储在memcache或redis中\r\n    $cacheFile = __DIR__ . \'/\' . self::APPID . \'_accessToken.cache\';\r\n    if (is_file($cacheFile) && filemtime($cacheFile) + 7000 > time()) { // 条件：是文件&&没过期，则执行...\r\n      $accessToken = include $cacheFile;\r\n      return $accessToken;\r\n    }\r\n    // 否则，缓存过期了    \r\n    $surl = \'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=%s&secret=%s\';\r\n    $url = sprintf($surl, self::APPID, self::APPSECRET);\r\n    $json = $this->http_request($url);\r\n    $arr = json_decode($json, true);\r\n    if (empty($arr[\'errcode\'])) { // 错误为空（没有错误）\r\n      file_put_contents($cacheFile,$arr[\'access_token\']);\r\n      echo $arr[\'access_token\'];\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // curl请求方法\r\n  private function http_request(string $url, array $params = [], string $file = \'\')\r\n  {\r\n    if (!empty($file)) {\r\n      $params[\'media\'] = new CURLFile($file); // \'media\'这个索引名称随便起\r\n    }\r\n    // 1.0 初始化\r\n    $ch = curl_init($url); \r\n    // 2.0 设置选项\r\n    curl_setopt($ch, CURLOPT_URL, $url); // 设置请求的url地址\r\n    curl_setopt($ch, CURLOPT_HEADER, 0); // 不在终端中显示header头信息，其实默认就不显示\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // 不直接将请求结果显示在终端中，而是赋值给指定变量【重要】\r\n    curl_setopt($ch, CURLOPT_USERAGENT, \'msie\'); // 设置请求的浏览器型号（具体设置再聊），对于爬虫伪造浏览器请求，从而避免被屏蔽有用\r\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10); // 设置超时时间，单位秒\r\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); // 不进行https证书检查\r\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); // 不进行https证书检查\r\n\r\n    if (count($params) > 0) {\r\n      curl_setopt($ch, CURLOPT_POST, 1); // 设置请求方法为post\r\n      curl_setopt($ch, CURLOPT_POSTFIELDS, $params); // 设置post请求的参数\r\n    }  \r\n    // 3.0 执行\r\n    $data = curl_exec($ch); // 将成功请求的结果，赋值给指定的变量\r\n    $info = curl_getinfo($ch); // 执行后，得到请求结果相关信息\r\n    if ($info[\'http_code\'] !== 200) {\r\n      echo curl_error($ch); // 输出错误,若为https请求,且没有相关设置的话，则报错：SSL certificate problem: unable to get local issuer certificate\r\n      echo \'<br/>\' . \'请求失败，状态码：\' . $info[\'http_code\'];\r\n    }\r\n    // 4.0 关闭\r\n    curl_close($ch);\r\n    // 返回数据\r\n    return $data;\r\n  }\r\n}\r\n$wx = new Token();\r\n$wx->getAccessToken();\r\n```',12,100,'2019-02-26 09:42:03','2019-02-26 09:42:03'),(172,'## 客服消息\r\n### 接收普通消息（7大接口）\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140453 <br>\r\n接收微信服务消息（用户→微信服务器→开发者服务器），有7大接口，即：文本消息、图片消息、语音消息、视频消息、小视频消息、地理位置消息、链接消息。<br>\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140453<br>\r\n重点：微信服务器在**五秒**内收不到响应会断掉连接，并且重新发起请求，总共重试**三次**。假如服务器无法保证在五秒内处理并回复，可以直接**回复空串**，微信服务器不会对此作任何处理，并且不会发起重试<br>\r\n**接收语音识别结果**：于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要**24小时**生效。开发者可以重新关注此帐号进行测试 <br>\r\n语音识别开启：在接口权限列表中，找到`对话服务 > 接收消息 > 接收语音识别结果` 打开开关即可，开启后，用户发送语音是，在微信服务器发来的xml中，会多一个节点`<Recognition >`（语音识别结果为UTF8编码）\r\n\r\n### 被动回复用户消息\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140543\r\nxml格式化：http://www.bejson.com/otherformat/xml\r\n按官网文档格式返回一个xml数据即可\r\n### 图灵机器人聊天\r\n官网：http://www.tuling123.com\r\napi地址：https://www.kancloud.cn/turing/www-tuling123-com/718218\r\n接口官网：https://www.kancloud.cn/turing/www-tuling123-com/718227\r\n示例\r\n—— 接口地址，请求方式：post\r\n```\r\nhttp://openapi.tuling123.com/openapi/api/v2\r\n```\r\n—— 请求参数（userId自定义的，唯一标识即可）\r\n```\r\n{\r\n	\"reqType\":0,\r\n    \"perception\": {\r\n        \"inputText\": {\r\n            \"text\": \"上海天气\"\r\n         }\r\n     },\r\n    \"userInfo\": {\r\n        \"apiKey\": \"3bb44604cac946738f98836b13b9f9dc\",\r\n        \"userId\": \"123\"\r\n     }\r\n}\r\n```\r\n### 客服消息\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140547\r\n### 群发接口和原创校验\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1481187827_i0l21\r\n群发规则\r\n```\r\n- 群发接口请求限制：60次/分钟，可分组群发\r\n- 认证订阅号：对于一个用户来说，只能成功调用1次/天\r\n- 认证服务号：接口请求限制100次/天，用户只能收到4条/月\r\n```\r\nis_to_all\r\n```\r\n- 使用is_to_all为true，且成功群发，会使得此次群发进入历史消息列表。\r\n- 认证订阅号：一天内，只能使用is_to_all进行群发一次。（或者在公众平台官网群发一次，不管是分组还是全体）。以避免一天内有2条群发进入历史消息列表。\r\n- 认证服务号：一个月内，使用is_to_all为true群发的次数，加上公众平台官网群发（不管本次群发是对全体还是对某个分组）的次数，最多只能是4次。\r\n```\r\ntouser 根据openid列表群发，openid最少2个，最多10000个。\r\n根据标签进行群发(post)\r\n```\r\nhttps://api.weixin.qq.com/cgi-bin/message/mass/sendall?access_token=ACCESS_TOKEN\r\n// 图文\r\n{\r\n   \"filter\":{\r\n      \"is_to_all\":false,\r\n      \"tag_id\":2\r\n   },\r\n   \"mpnews\":{\r\n      \"media_id\":\"123dsdajkasd231jhksad\"\r\n   },\r\n    \"msgtype\":\"mpnews\",\r\n    \"send_ignore_reprint\":0\r\n}\r\n// 文本\r\n{\r\n   \"filter\":{\r\n      \"is_to_all\":false,\r\n      \"tag_id\":2\r\n   },\r\n   \"text\":{\r\n      \"content\":\"CONTENT\"\r\n   },\r\n    \"msgtype\":\"text\"\r\n}\r\n.....还有图片、视频等\r\n```\r\n根据OpenID列表群发(post)\r\n```\r\nhttps://api.weixin.qq.com/cgi-bin/message/mass/send?access_token=ACCESS_TOKEN\r\n// 图文\r\n{\r\n   \"touser\":[\r\n    \"OPENID1\",\r\n    \"OPENID2\"\r\n   ],\r\n   \"mpnews\":{\r\n      \"media_id\":\"123dsdajkasd231jhksad\"\r\n   },\r\n    \"msgtype\":\"mpnews\"，\r\n    \"send_ignore_reprint\":0\r\n}\r\n// 文本\r\n{\r\n   \"touser\":[\r\n    \"OPENID1\",\r\n    \"OPENID2\"\r\n   ],\r\n    \"msgtype\": \"text\",\r\n    \"text\": { \"content\": \"hello from boxer.\"}\r\n}\r\n......还有图片、视频等\r\n```',12,100,'2019-02-26 09:43:25','2019-02-26 12:25:49'),(173,'## 自定义菜单\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141013\r\n最多**3个**一级菜单，每个一级菜单最多**5个**二级菜单\r\n一级菜单最多**4个**汉字，二级菜单最多**7个**汉字，多出以\"...\"代替\r\n创建菜单后，菜单的刷新策略是：用户进入公众号会话页或公众号profile页，如果上一次拉取拉菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。<br>\r\n自定义菜单接口可实现**10种**类型的按钮，不过常用click、view。\r\n—— `view` 按钮想跳转到指定的URL，公众号**需要完成认证**。\r\n### 创建菜单接口\r\nhttp请求方式：POST（请使用https协议）\r\n```\r\nhttps://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN	\r\n```\r\n请求示例（post参数，格式为json格式）\r\n—— 带二级菜单的一级菜单最多16个字节，如：\"name\":\"菜单菜单aa12\"（汉字3字节，数字字母1字节）\r\n—— 二级菜单最多60个字节\r\n—— 不过：即使后可以传16个或60个字节，前台却展示不下16个或60个字节的长度，多余的以\"...\"代替\r\n```\r\n{\r\n     \"button\":[ \r\n     {    \r\n          \"type\":\"click\",\r\n          \"name\":\"今日歌曲aaaaa12345bbbbb\",\r\n          \"key\":\"V1001_TODAY_MUSIC\"\r\n      },\r\n      {\r\n           \"name\":\"菜单菜单aa12\",\r\n           \"sub_button\":[\r\n           {    \r\n               \"type\":\"view\",\r\n               \"name\":\"搜索\",\r\n               \"url\":\"http://www.soso.com/\"\r\n            },\r\n            {\r\n                 \"type\":\"miniprogram\",\r\n                 \"name\":\"wxa\",\r\n                 \"url\":\"http://mp.weixin.qq.com\",\r\n                 \"appid\":\"wx286b93c14bbf93aa\",\r\n                 \"pagepath\":\"pages/lunar/index\"\r\n             },\r\n            {\r\n               \"type\":\"click\",\r\n               \"name\":\"赞一下我们\",\r\n               \"key\":\"V1001_GOOD\"\r\n            }]\r\n       }]\r\n }\r\n```\r\n### 删除菜单接口\r\nhttp请求方式：GET\r\n```\r\nhttps://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN\r\n```\r\n### 自定义菜单事件推送\r\n点击自定义菜单，微信会给开发者推送事件，开发者可以在被动接收消息（事件）后，做出响应。\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141016',12,100,'2019-02-26 12:31:39','2019-02-26 12:31:39'),(174,'## 素材管理\r\n### 新增临时素材\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1444738726\r\n媒体文件在微信后台保存时间为3天，即3天后media_id失效。\r\n上传临时素材的格式、大小限制与公众平台官网一致。\r\n```\r\n- 图片（image）: 2M，支持PNG\\JPEG\\JPG\\GIF格式\r\n- 语音（voice）：2M，播放长度不超过60s，支持AMR\\MP3格式\r\n- 视频（video）：10MB，支持MP4格式\r\n- 缩略图（thumb）：64KB，支持JPG格式\r\n```\r\n返回值\r\n```\r\n{\"type\":\"voice\",\"media_id\":\"MEDIA_ID\",\"created_at\":123456789}  // 成功返回\r\n{\"errcode\":40004,\"errmsg\":\"invalid media type\"} // 失败返回\r\n```\r\n上传素材数据表结构\r\n```\r\nCREATE TABLE `material` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT \'主键ID\',\r\n  `is_forever` tinyint(4) unsigned NOT NULL DEFAULT \'0\' COMMENT \'0：临时；1：永久\',\r\n  `type` char(10) NOT NULL DEFAULT \'\' COMMENT \'素材类型\',\r\n  `media_id` varchar(255) NOT NULL DEFAULT \'\' COMMENT \'媒体id\',\r\n  `url` varchar(255) NOT NULL DEFAULT \'\' COMMENT \'永久素材url地址\',\r\n  `filepath` varchar(255) NOT NULL DEFAULT \'\' COMMENT \'素材路径\',\r\n  `created_at` int(10) unsigned NOT NULL COMMENT \'素材创建时间\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;\r\n```\r\n### 新增永久素材\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1472017492_58YV5\r\n最近更新：永久图片素材新增后，将带有URL返回给开发者，开发者可以在腾讯系域名内使用（腾讯系域名外使用，图片将被屏蔽）。\r\n公众号的素材库保存总数量有上限：图文消息素材、图片素材上限为5000，其他类型为1000。\r\n素材的格式大小等要求与公众平台官网一致。<br>\r\n新增其他类型永久素材\r\n—— http请求方式: POST，需使用https\r\n```\r\nhttps://api.weixin.qq.com/cgi-bin/material/add_material?access_token=ACCESS_TOKEN&type=TYPE\r\n```\r\n—— 新增永久 `图片（image）`、`语音（voice）` 、`缩略图（thumb）`  等素材post参数如下：\r\n```\r\n$params[\'media\'] = new CURLFile($filepath); // $filepath绝对路径\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\r\n```\r\n—— 新增永久 `视频（video)` 素材，还需要POST另一个表单，id为description，包含素材的描述信息，内容格式为JSON 。\r\n```\r\n$params[\'media\'] = new CURLFile($filepath);\r\n$params[\'description\'] = \'{\r\n    \"title\":\"我是视频标题\",\r\n    \"introduction\":\"我是视频介绍，我是视频介绍，我是视频介绍\"\r\n}\';\r\n\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\r\n```\r\n—— 新增永久 `图片（image）`、`缩略图（thumb）`  返回值\r\n```\r\n{  \"media_id\":MEDIA_ID,  \"url\":URL}\r\n```\r\n—— 新增永久 `语音（voice）` 、`视频（video) `返回值\r\n```\r\n{\r\n  \"media_id\":MEDIA_ID,\r\n}\r\n```',12,100,'2019-02-26 12:38:09','2019-02-26 12:38:43'),(175,'## 账号管理\r\n### 生成场景二维码\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1443433542\r\n请求接口\r\n```\r\n空空空\r\n```\r\n生成的这些场景二维码（不管是临时的，还是永久的），扫码分两种情形，得到的Event不同\r\n情形一：**未关注用户**，扫码关注，微信服务器推送的xml为\r\n```xml\r\n<xml><ToUserName><![CDATA[gh_43727da5a42b]]></ToUserName>\r\n<FromUserName><![CDATA[oakWY1FB8KevnCZqRiasgeInWOIE]]></FromUserName>\r\n<CreateTime>1540564314</CreateTime>\r\n<MsgType><![CDATA[event]]></MsgType>\r\n<Event><![CDATA[subscribe]]></Event>\r\n<EventKey><![CDATA[qrscene_456]]></EventKey>\r\n<Ticket><![CDATA[gQHg8DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyMGoxcWt0RzVlb2sxUWFYVjFyMTYAAgQK7tFbAwQAjScA]]></Ticket>\r\n</xml>\r\n```\r\n情形二：**已关注用户**，扫码后进入会话，微信服务器推送的xml为	\r\n```xml\r\n<xml><ToUserName><![CDATA[gh_43727da5a42b]]></ToUserName>\r\n<FromUserName><![CDATA[oakWY1FB8KevnCZqRiasgeInWOIE]]></FromUserName>\r\n<CreateTime>1540564371</CreateTime>\r\n<MsgType><![CDATA[event]]></MsgType>\r\n<Event><![CDATA[SCAN]]></Event>\r\n<EventKey><![CDATA[456]]></EventKey>\r\n<Ticket><![CDATA[gQHg8DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyMGoxcWt0RzVlb2sxUWFYVjFyMTYAAgQK7tFbAwQAjScA]]></Ticket>\r\n</xml>\r\n```',12,100,'2019-02-26 12:41:47','2019-02-26 12:42:06'),(176,'## 用户管理\r\n### 获取用户信息\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140839\r\n通过openid获取用户基本信息\r\n```\r\n- 对于 普通access_to 而言：如果用户取消关注后，便不能再通过此接口获取用户信息了。\r\n- 对于 网页授权access_token 而言：由于用户授权了，无需关注公众号，也可获得基本用户基本信息。\r\n  - 这种通过 网页授权access_token 得到用户用户信息，没有subcribe字段，要想知道这个用户是否关注了\r\n```\r\n### 获取用户地理位置\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140841\r\n在 `接口权限列表 > 获取用户地理位置` 开启开关，可选择“每5秒上报一次用户地理位置”\r\n接收用户地理位置说明：\r\n```\r\n- 当开启 获取用户地理位置 开关后，用户关注时（或已关注用户打开公众号时），会弹出“是允许公众号获取用户地理位置”的授权弹窗，这个弹窗只弹一次，只有当用户同意后才可以获取地理位置。\r\n- 只有当微信客户端活跃时，且用户在公众号里面，才会上报地理位置。按手机home键，或黑屏时，微信进入后台后，不会上报地理位置。\r\n- 问题：因为授权弹窗只弹一次，若用户拒绝后，如何再次唤起授权弹窗？\r\n```\r\n保存用户地理位置的数据表\r\n```sql\r\nCREATE TABLE `location` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `openid` varchar(255) NOT NULL DEFAULT \'\',\r\n  `longitude` decimal(16,6) NOT NULL DEFAULT \'0.000000\',\r\n  `latitude` decimal(15,6) NOT NULL DEFAULT \'0.000000\',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\r\n```\r\n获取的地理位置xml信息为\r\n```xml\r\n<xml><ToUserName><![CDATA[gh_43727da5a42b]]></ToUserName>\r\n<FromUserName><![CDATA[oakWY1FB8KevnCZqRiasgeInWOIE]]></FromUserName>\r\n<CreateTime>1540564752</CreateTime>\r\n<MsgType><![CDATA[event]]></MsgType>\r\n<Event><![CDATA[LOCATION]]></Event>\r\n<Latitude>31.297848</Latitude>\r\n<Longitude>121.155518</Longitude>\r\n<Precision>20.000000</Precision>\r\n</xml>\r\n```\r\n### 高德提供LBS服务\r\n基于高德开发平台：https://lbs.amap.com\r\n高德开发文档：https://lbs.amap.com/api\r\n周边搜索：https://lbs.amap.com/api/webservice/guide/api/search/#around\r\n在高德开发平台，创建一个应用，添加一个key（web服务）。\r\n调用 周边搜索 接口(get请求)\r\n```\r\nhttp://restapi.amap.com/v3/place/around?key=KEY&location=121.158760,31.293594&keywords=%E5%8A%A0%E6%B2%B9%E7%AB%99&types=010100&radius=2000&offset=20&page=1&extensions=all\r\n```',12,100,'2019-02-26 12:46:51','2019-02-26 12:47:50'),(177,'## 微信网页开发\r\n### 微信网页授权\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842\r\n`网页授权access_token` 和 `普通access_token` 的**区别**\r\n```\r\n  - 网页授权access_token ，是针对个人的，通过这个token调用接口，只能获取该用户基本信息\r\n    - 网页授权是通过OAuth2.0机制实现的\r\n  - 普通access_token ，是针对全局的，通过这个token调用接口，可以获取所有用户基本信息。（前提是用户关注了公众号，拿到openid）\r\n```\r\n\r\n1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）<br>\r\n\r\n2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。<br>\r\n\r\n3、用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户OpenID来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即openid）关注了公众号后，才能调用成功的。<br>\r\n\r\n对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。\r\n\r\n------------\r\n\r\n**准备**：设置网页授权回调域名\r\n```\r\n- 在 “开发 -> 接口权限 -> 网页服务 -> 网页帐号 -> 网页授权获取用户基本信息 ” 处，设置回调域名。\r\n```\r\n**第一步**：用户同意授权，获取code（有效期5分钟，只能使用一次）\r\n—— 构建授权页连接，这个连接是用来获取code的。\r\n```\r\nhttps://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect\r\n```\r\n—— 点开这个连接时，会以此进行如下判断\r\n```\r\n- 判断appid，必须是合格的appid\r\n- 判断redirect_uri，redirect_uri必须是上述准备的授权回调域名的网址。\r\n- 判断scope，必须是这2个值\r\n	- snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），\r\n	- snsapi_userinfo （弹出授权页面，即使在未关注的情况下，只要用户授权，也能获取其信息）\r\n```\r\n—— 注意：如果是测试号的话，点击这个授权页面链接，必须先关注测试号，否则会10006的错。<br>\r\n**第二步**：用 code (有效期5分钟) 换取 网页授权access_token （有效期2小时）<br>\r\n**第三步**：如果access_token过期，则用refresh_token (第二步获取的，有效期30天)换取access_token<br>\r\n**第四步**：拉取用户信息(需scope为 snsapi_userinfo)<br>\r\n检验：检验授权凭证是否有效\r\n```\r\nhttps://api.weixin.qq.com/sns/auth?access_token=ACCESS_TOKEN&openid=OPENID\r\n```\r\n### 网页授权开发注意\r\n对于用户来说，已经授权的页面，在一定时间内，再次进入页面，会（免授权）自动登录。<br>\r\n对于用户来说，用户每次由授权页跳转到着陆页时，带过去的`code`每次都不同，换取的`access_token refresh_token`每次也不同。<br>\r\n对于开发者来说，获取用户最新的（即用户最后一次跳转时）`access_token refresh_token`，把它们存起来，当`access_token` 2小时过期后，可以用`refresh_token` （30天有效）来刷新 `access_token`，因此在用户最后一次跳转进入页面后，开发者在30天内，可以通过`access_token`来获取用户信息。\r\n### 微信开发者工具调试网页授权时遇bug\r\n在使用微信开发者工具调试网页授权时，遇到一个bug：控制台报错，一个头像资源没有请求到（https://open.weixin.qq.com/0  404 (Not Found)），导致无法点击“确认登录”的按钮。此时，不断尝试点击按钮上方的区域，能解决此问题。',12,100,'2019-02-26 12:58:07','2019-02-26 12:58:07'),(178,'## 微信JS-SDK\r\n官网：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115\r\n### JS_SDK使用步骤\r\n`1.0绑定域名` → `2.0引入JS文件` → `3.0通过config接口注入权限验证配置` → `4.0通过ready接口处理成功验证` → `5.0通过error接口处理失败验证`\r\n```javascript\r\n<script src=\"http://res.wx.qq.com/open/js/jweixin-1.4.0.js\"></script>\r\n<script>\r\nwx.config({\r\n  debug: true,// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\r\n  appId: \'<?php echo $signPackage[\"appId\"]; ?>\',\r\n  timestamp: <?php echo $signPackage[\"timestamp\"]; ?>,\r\n  nonceStr: \'<?php echo $signPackage[\"nonceStr\"]; ?>\',\r\n  signature: \'<?php echo $signPackage[\"signature\"]; ?>\',\r\n  jsApiList: [\r\n    // 所有要调用的 API 都要加到这个列表中\r\n    \'onMenuShareAppMessage\', // 分享给朋友\r\n    \'onMenuShareTimeline\', // 分享到朋友圈\r\n    \'chooseImage\' // 拍照或从手机相册中选图\r\n  ]\r\n});\r\n\r\nwx.ready(function(){\r\n    // 分享给朋友 （即将废弃）\r\n    wx.onMenuShareAppMessage({\r\n        title: \'我帅不帅\', // 分享标题\r\n        desc: \'你臭不要脸呀\', // 分享描述\r\n        link: \'http://6ayzbj.natappfree.cc/web_auth/go.php\', // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致\r\n        imgUrl: \'https://www.baidu.com/img/bd_logo1.png\', // 分享图标\r\n        type: \'link\', // 分享类型,music、video或link，不填默认为link\r\n        dataUrl: \'\', // 如果type是music或video，则要提供数据链接，默认为空\r\n        success: function () {\r\n            // 用户点击了分享后执行的回调函数\r\n            alert(\"分享给朋友成功啦！\");\r\n        }\r\n    });\r\n});\r\n\r\n// 拍照或从手机相册中选图接口\r\nfunction chooseImage() {\r\n  wx.chooseImage({\r\n    count: 1, // 默认9，表示最多可以选中几张图片\r\n    sizeType: [\'original\', \'compressed\'], // 可以指定是原图还是压缩图，默认二者都有\r\n    sourceType: [\'album\', \'camera\'], // 可以指定来源是相册还是相机，默认二者都有\r\n    success: function (res) {\r\n      var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片\r\n      document.querySelector(\'#img\').src = localIds;\r\n    }\r\n  });\r\n}\r\n</script>\r\n```\r\n### JS_SDK签名的计算\r\n详解第3步中的config需要的签名，JS_SDK 的 signature 的获取步骤如下\r\n—— `用普通 access_token 换取 ticket` → `通过noncestr、jsapi_ticket、timestamp、url等计算出signature` → `返回签名数据包，即JS-SDK所需要的config参数`\r\n注意：获取jsApiTicket (接口请求次数有限，要做缓存) ，ticket有效期2小时\r\n```php\r\n// 计算出js-SDK签名\r\npublic function getSignPackage() {\r\n    $jsapiTicket = $this->getjsapiTicket();\r\n    $nonceStr = $this->createNonceStr();\r\n    $timestamp = time();\r\n    $url = $this->getCurrentUrl();\r\n\r\n    // 这里参数的顺序要按照 key 值 ASCII 码升序排序\r\n    $string = \"jsapi_ticket=$jsapiTicket&noncestr=$nonceStr&timestamp=$timestamp&url=$url\";\r\n\r\n    $signature = sha1($string);\r\n\r\n    $signPackage = array(\r\n        \"appId\"     => $this->appId,\r\n        \"nonceStr\"  => $nonceStr,\r\n        \"timestamp\" => $timestamp,\r\n        \"url\"       => $url,\r\n        \"signature\" => $signature,\r\n        \"rawString\" => $string\r\n    );\r\n    return $signPackage; \r\n}\r\n```',12,100,'2019-02-26 13:02:25','2019-02-26 13:02:53'),(179,'## 待办\r\nformdata表单上传\r\n明天把curl上传封装的函数改一下：$param[\'media\']，这个不应该封装，应该放在外面\r\n微信开发，接口调用要用https，用https请求时，curl的配置如下。**微信https的部署待完成**\r\n```php\r\nprivate function httpGet($url) {\r\n    $curl = curl_init();\r\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\r\n    curl_setopt($curl, CURLOPT_TIMEOUT, 500);\r\n    // 为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。\r\n    // 如果在部署过程中代码在此处验证失败，请到 http://curl.haxx.se/ca/cacert.pem 下载新的证书判别文件。\r\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true); // https证书校验\r\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, true); // https证书校验\r\n    curl_setopt($curl, CURLOPT_URL, $url);\r\n\r\n    $res = curl_exec($curl);\r\n    curl_close($curl);\r\n\r\n    return $res;\r\n}\r\n```',12,100,'2019-02-26 13:06:42','2019-02-26 13:06:42'),(180,'## 起步\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/#\r\n开发工具：vscode，用vscode需要安装如下2个插件，安装后可以用vscode开发小程序，但是调试还是需要用微信开发者工具。\r\n—— Miniapp（微信小程序标签、属性的智能补全（同时支持原生小程序、mpvue 和 wepy 框架，并提供 snippets）\r\n—— 小程序助手（解析小程序样式）\r\n小程序构成\r\n```\r\njs		页面逻辑\r\nwxml	页面结构\r\nwxss	页面样式表\r\njson	页面配置\r\n```',13,100,'2019-02-27 00:51:31','2019-02-27 00:51:31'),(181,'## 框架/配置\r\n### 全局配置app.json\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE\r\napp.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。\r\napp.json 中不能添加任何注释，否则会报错。\r\n`pages`：页面路径列表，第一个代表起始页，小程序中新增/减少页面，都需要对pages数组进行修改。\r\n`window`：全局的默认窗口表现\r\n`tabBar`：底部 tab 栏的表现\r\n`timeout`：设置超时时间，单位毫秒\r\n`debug`：是否开启调试\r\n`其他`：参考官网\r\n```json\r\n{\r\n  \"pages\":[\r\n    \"pages/index/index\",\r\n    \"pages/logs/logs\"\r\n  ], \r\n  \"window\":{\r\n    \"backgroundTextStyle\":\"light\", // 下拉 loading 的样式，仅支持 dark / light\r\n    \"navigationBarBackgroundColor\": \"#fff\", // 导航背景色\r\n    \"navigationBarTitleText\": \"WeChat\", // 导航标题文字\r\n    \"navigationBarTextStyle\":\"black\", // 导航标题样式，仅支持：black、white\r\n    \"navigationStyle\":\"custom\" // 自定义导航栏，留海屏时用这个设置，只对全局有效\r\n  },\r\n  \"tabBar\": {\r\n    \"color\":\"#0000ff\", // 用十六进制表示颜色，否则真机上无法显示\r\n    \"selectedColor\":\"#ff0000\",\r\n    \"position\": \"bottom\",\r\n    \"backgroundColor\":\"#fff\",\r\n    \"list\": [\r\n      {\r\n        \"pagePath\": \"pages/user/user\",\r\n        \"text\": \"用户\",\r\n        \"iconPath\": \"/images/icon_me@3x.png\",\r\n        \"selectedIconPath\": \"/images/icon_me_active@3x.png\"\r\n      },\r\n      {\r\n        \"pagePath\": \"pages/index/index\",\r\n        \"text\": \"首页\",\r\n        \"iconPath\":\"/images/icon_component.png\",\r\n        \"selectedIconPath\":\"/images/icon_component_active.png\"\r\n      }\r\n    ]\r\n  }\r\n  \"networkTimeout\": {\r\n    \"request\": 10000,\r\n    \"downloadFile\": 10000\r\n  },\r\n  \"debug\": true\r\n}\r\n```',13,100,'2019-02-27 00:54:47','2019-02-27 00:54:47'),(182,'## 框架/逻辑层\r\n### 生命周期\r\n`onLoad(Object query)` （页面加载时第1个执行）\r\n—— 页面加载时触发。\r\n—— 一个页面只会调用一次，query 是当前页面路径中的参数（json对象格式 ）\r\n`onShow() `（页面加载时第2个执行）\r\n—— 页面显示/切入前台时触发。\r\n—— 注意onShow()在onReady()之前执行\r\n`onReady()` （页面加载时第3个执行）\r\n—— 页面初次渲染完成时触发。\r\n—— 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。\r\n`onHide()`\r\n—— 页面隐藏/切入后台时触发。\r\n—— 当navigator的open-type为空时，会触发onHide页面隐藏，这种跳转后可以后退返回。\r\n`onUnload()`\r\n—— 页面卸载时触发。 \r\n—— 当navigator的open-type为redirect时，会触发onUnload页面卸载，这种跳转会导致无法后退返回。\r\n### 页面事件处理函数\r\n`onPullDownRefresh()`\r\n—— 监听页面下拉动作，实践中不用这个（因为不准确），用组件来实现\r\n`onReachBottom()`\r\n—— 页面上拉触底，实践中不用这个（因为不准确），用组件来实现\r\n`()**`\r\n—— 用户点击右上角分享\r\n### setData 更新数据\r\nhttps://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#pageprototypesetdataobject-data-function-callback\r\n直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。\r\n仅支持设置可 JSON 化的数据。\r\n单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。\r\n请不要把 data 中任何一项的 value 设为 undefined ，否则这一项将不被设置并可能遗留一些潜在问题。',13,100,'2019-02-27 00:58:43','2019-02-27 01:00:00'),(183,'## 框架/视图层\r\n### 数据绑定\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/data.html\r\n组件属性(需要在双引号之内)\r\n```\r\n<view id=\"item-{ {id} }\"> </view>\r\n```\r\n```\r\nPage({\r\n  data: {\r\n    id: 0\r\n  }\r\n})\r\n```\r\n组合，也可以在 Mustache 内直接进行组合，构成新的对象或者数组。\r\n—— 数组\r\n```\r\n<view wx:for=\"{ {[zero, 1, 2, 3, 4]} }\"> { {item} } </view>\r\n```\r\n```\r\nPage({\r\n  data: {\r\n    zero: 0\r\n  }\r\n})\r\n```\r\n最终组合成数组 `[0, 1, 2, 3, 4]`\r\n\r\n------------\r\n\r\n—— 对象\r\n```\r\n<template is=\"objectCombine\" data=\"{ {...obj1, ...obj2, e: 5} }\"></template>\r\n```\r\n```\r\nPage({\r\n  data: {\r\n    obj1: {\r\n      a: 1,\r\n      b: 2\r\n    },\r\n    obj2: {\r\n      c: 3,\r\n      d: 4\r\n    }\r\n  }\r\n})\r\n```\r\n最终组合成的对象是 `{a: 1, b: 2, c: 3, d: 4, e: 5}`',13,100,'2019-02-27 01:04:06','2019-02-27 01:04:06'),(184,'### wx:for列表渲染\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html\r\n`wx:key` 的作用类似于vue框架中的`v-for中key`的作用：http://note.test/categories/4/articles/10#v-for%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8\r\n`wx:key` 的值以两种形式提供，如下：\r\n—— 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。\r\n—— 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字\r\n```\r\n<!--wxml-->\r\n<view wx:for=\"{ {objectArray} }\" wx:key=\"unique\" >\r\n    { {index} }----{ {item.id} }\r\n</view>\r\n<view wx:for=\"{ {objectArray} }\" wx:for-index=\"key\" wx:for-item=\"val\" wx:key=\"unique\">\r\n	{ {key} }----{ {val.id} }\r\n</view>\r\n<view wx:for=\"{ {numberArray} }\" wx:key=\"*this\">\r\n    { {index} }----{ {item} }\r\n</view>\r\n<!--保持view干净的写法-->\r\n<block wx:for=\"{ {objectArray} }\" wx:key=\"unique\">\r\n	<view>{ {index} }----{ {item.id} }</view>\r\n</block>\r\n<!--js-->\r\nPage({\r\n  data: {\r\n    objectArray: [\r\n      {id: 5, unique: \'unique_5\'},\r\n      {id: 4, unique: \'unique_4\'},\r\n      {id: 3, unique: \'unique_3\'},\r\n      {id: 2, unique: \'unique_2\'},\r\n      {id: 1, unique: \'unique_1\'},\r\n      {id: 0, unique: \'unique_0\'},\r\n    ],\r\n    numberArray: [1, 2, 3, 4]\r\n  } \r\n})\r\n```\r\n注意\r\n—— 当 wx:for 的值为字符串时，会将字符串解析成字符串数组\r\n```\r\n<view wx:for=\"array\">\r\n  { {item} }\r\n  </view>\r\n```\r\n—— 等同于\r\n```\r\n<view wx:for=\"{ {[\'a\',\'r\',\'r\',\'a\',\'y\']} }\">\r\n  { {item} }\r\n</view>\r\n```\r\n\r\n------------\r\n\r\n—— 花括号和引号之间如果有空格，将最终被解析成为字符串\r\n```\r\n<view wx:for=\"{ {[1,2,3]} } \">\r\n  { {item} }\r\n</view>\r\n```\r\n—— 等同于\r\n```\r\n<view wx:for=\"{ {[1,2,3] + \' \'} }\" >\r\n  { {item} }\r\n</view>\r\n```',13,100,'2019-02-27 01:09:49','2019-02-27 01:18:44'),(185,'### wx:if条件渲染\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html\r\n```\r\n<view wx:if=\"{ {length > 5} }\"> 1 </view>\r\n<view wx:elif=\"{ {length > 2} }\"> 2 </view>\r\n<view wx:else> 3 </view>\r\n```\r\n`wx:if` vs `hidden` 比较：\r\n\r\n------------\r\n\r\n因为 `wx:if` 之中的模板也可能包含数据绑定，所以当 `wx:if` 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。\r\n\r\n------------\r\n\r\n同时 `wx:if` 也是惰性的，如果在初始渲染条件为 `false`，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。\r\n\r\n------------\r\n\r\n相比之下，`hidden` 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。\r\n\r\n------------\r\n\r\n一般来说，`wx:if` 有更高的切换消耗而 `hidden` 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 `hidden` 更好，如果在运行时条件不大可能改变则 `wx:if` 较好。',13,100,'2019-02-27 01:21:42','2019-02-27 01:22:48'),(186,'### template模板\r\nWXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。\r\n—— 定义模板：使用 name 属性定义模板名称\r\n```\r\n<template name=\"msgItem\">\r\n  <view>\r\n    <text> { {index} }: { {msg} } </text>\r\n    <text> Time: { {time} } </text>\r\n  </view>\r\n</template>\r\n```\r\n使用模板：使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入 \r\n```\r\n<template is=\"msgItem\" data=\"{ {...item} }\"/>\r\n```\r\n```\r\nPage({\r\n  data: {\r\n    item: {\r\n      index: 0,\r\n      msg: \'this is a template\',\r\n      time: \'2016-09-15\'\r\n    }\r\n  }\r\n})\r\n```',13,100,'2019-02-28 05:48:04','2019-02-28 05:48:20'),(187,'### 引用（import与include）\r\n`import` 可以在该文件中使用目标文件定义的 `template `\r\n—— 在 item.wxml 中定义了一个叫`item`的`template` ：\r\n```\r\n<!-- item.wxml -->\r\n<template name=\"item\">\r\n  <text>{ {text} }</text>\r\n</template>\r\n```\r\n在 index.wxml 中引用了 item.wxml，就可以使用`item`模板 ：\r\n```\r\n<import src=\"item.wxml\"/>\r\n<template is=\"item\" data=\"{ {text: \'forbar\'} }\"/>\r\n```\r\n`import`作用域\r\n—— C import B，B import A，在C中可以使用B定义的 template，在B中可以使用A定义的 template，但是C不能使用A定义的 template。\r\n`include` 可以将目标文件除了` <template/>` `<wxs/>` 外的整个代码引入，相当于是拷贝到 `include` 位置，如：\r\n```\r\n<!-- index.wxml -->\r\n<include src=\"header.wxml\"/>`\r\n<view> body </view>\r\n<include src=\"footer.wxml\"/>\r\n```\r\n```\r\n  <!-- header.wxml -->\r\n  <view> header </view>\r\n```\r\n```\r\n<!-- footer.wxml -->\r\n<view> footer </view>\r\n```',13,100,'2019-02-28 05:53:59','2019-02-28 05:56:43'),(188,'### 事件\r\n框架官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html\r\n指南官网：https://developers.weixin.qq.com/ebook?action=get_post_info&docid=000846df9a03909b0086a50025180a\r\n#### 事件类型 (小程序指南)\r\n\r\n| 类型                 | 触发条件                                     |\r\n| ------------------ | ---------------------------------------- |\r\n| touchstart         | 手指触摸动作开始                                 |\r\n| touchmove          | 手指触摸后移动                                  |\r\n| touchcancel        | 手指触摸动作被打断，如来电提醒，弹窗                       |\r\n| touchend           | 手指触摸动作结束                                 |\r\n| tap                | 手指触摸后马上离开                                |\r\n| longpress          | 手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发 |\r\n| longtap            | 手指触摸后，超过350ms再离开（推荐使用longpress事件代替）      |\r\n| transitionend      | 会在 WXSS transition 或 wx.createAnimation 动画结束后触发 |\r\n| animationstart     | 会在一个 WXSS animation 动画开始时触发              |\r\n| animationiteration | 会在一个 WXSS animation 一次迭代结束时触发            |\r\n| animationend       | 会在一个 WXSS animation 动画完成时触发              |\r\n\r\n#### 事件绑定和冒泡\r\n`bind`事件绑定不会阻止冒泡事件向上冒泡，`catch`事件绑定可以阻止冒泡事件向上冒泡。\r\n如在下边这个例子中，点击 inner view 会先后调用`handleTap3`和`handleTap2`(因为tap事件会冒泡到 middle view，而 middle view 阻止了 tap 事件冒泡，不再向父节点传递)，点击 middle view 会触发`handleTap2`，点击 outer view 会触发`handleTap1`。\r\n注意：绑定的事件名称不需要括号。\r\n```\r\n<view id=\"outer\" bindtap=\"handleTap1\">\r\n  outer view\r\n  <view id=\"middle\" catchtap=\"handleTap2\">\r\n    middle view\r\n    <view id=\"inner\" bindtap=\"handleTap3\">\r\n      inner view\r\n    </view>\r\n  </view>\r\n</view>\r\n```\r\n#### 事件的捕获阶段\r\n自基础库版本 1.5.0 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反。需要在捕获阶段监听事件时，可以采用capture-bind、capture-catch关键字，后者将中断捕获阶段和取消冒泡阶段。 \r\n在下面的代码中，点击 inner view 会先后调用`handleTap2`、`handleTap4`、`handleTap3`、`handleTap1`。\r\n```\r\n<view id=\"outer\" bind:touchstart=\"handleTap1\" capture-bind:touchstart=\"handleTap2\">\r\n  outer view\r\n  <view id=\"inner\" bind:touchstart=\"handleTap3\" capture-bind:touchstart=\"handleTap4\">\r\n    inner view\r\n  </view>\r\n</view>\r\n```\r\n如果将上面代码中的第一个capture-bind改为capture-catch，将只触发`handleTap2`。\r\n```\r\n<view id=\"outer\" bind:touchstart=\"handleTap1\" capture-catch:touchstart=\"handleTap2\">\r\n  outer view\r\n  <view id=\"inner\" bind:touchstart=\"handleTap3\" capture-bind:touchstart=\"handleTap4\">\r\n    inner view\r\n  </view>\r\n</view>\r\n```\r\n#### 事件对象\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html\r\n如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。\r\n#### target 与 currentTarget\r\n参考网页：https://www.cnblogs.com/yewenxiang/p/6171411.html\r\n`target` 触发事件的源组件。(对于点击事件来说：也就是点击的那个组件，target就是那个组件)\r\n`currentTarget` 事件绑定的组件。\r\n\r\n| 属性                                       | 类型     | 说明                       |\r\n| ---------------------------------------- | ------ | ------------------------ |\r\n| id                                       | String | 当前组件的id                  |\r\n| tagName                                  | String | 当前组件的类型                  |\r\n| [dataset](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset) | Object | 组件上由`data-`开头的自定义属性组成的集合 |\r\n\r\n说明：点击 inner view 时，\r\n`handleTap3` 收到的事件对象 target 和 currentTarget 都是 inner\r\n`handleTap2` 收到的事件对象 target 就是 inner，currentTarget 就是 middle\r\n```\r\n<view id=\"outer\" bindtap=\"handleTap1\">\r\n  outer view\r\n  <view id=\"middle\" catchtap=\"handleTap2\">\r\n    middle view\r\n    <view id=\"inner\" bindtap=\"handleTap3\">\r\n      inner view\r\n    </view>\r\n  </view>\r\n</view>\r\n```\r\n`detail` 属性：自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入。\r\n如 `swiper` 组件的 `bindchange` 属性绑定一个事件，current 改变时会触发 change 事件，此时：\r\n```\r\nevent.detail = {current: 0, currentItemId: \"0\", source: \"autoplay\"}\r\n```\r\n如 scroll-view 组件的 bindscroll 属性绑定一个数据，滚动时触发scroll事件，此时：\r\n```\r\nevent.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}\r\n```\r\n#### 事件传参\r\n小程序绑定事件时不能有括号，也就不能通过括号传参，即不支持下列传参形式\r\n```\r\n<!-- 不支持括号传参 -->\r\n<view bindtap=\"fn(username)\"></view>\r\n```\r\n小程序给我们的传参方式是通过：事件对象 来传参\r\n```\r\n<!-- 通过事件对象来传参 -->\r\n<view bindtap=\"fn\" data-username=\"zhangsan\"></view>\r\n```\r\n那么在事件对象的currentTarget(绑定的组件)中的dataset属性中，可以获得数据\r\n```\r\nfunction fn(event){\r\n    console.log(event.currentTarget.dataset); // {username:\"zhangsan\"}\r\n    let { username } = event.currrentTarget.dataset;\r\n    console.log(username); // zhangsan\r\n}\r\n```',13,100,'2019-02-28 06:27:22','2019-04-18 12:13:32'),(189,'## 样式WXSS\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html\r\n尺寸单位： rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则`750rpx = 375px = 750物理像素`，\r\n—— **1rpx = 0.5px = 1物理像素**\r\nstyle：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。\r\n```\r\n<view style=\"color:{ {color} };\" />\r\n```\r\nclass：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上`.`，样式类名之间用空格分隔。\r\n```\r\n<view class=\"normal_view\" />\r\n```\r\n微信样式只支持部分css样式。\r\n样式导入\r\n—— 使用 @import 语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。\r\n```\r\n/** app.wxss **/\r\n@import \"common.wxss\";\r\n.middle-p {\r\n  padding:15px;\r\n}\r\n```',13,100,'2019-02-28 06:39:38','2019-02-28 06:42:02'),(190,'### flex布局\r\n设置Flex布局后，子元素的float、clear和vertical-align属性将失效\r\n在小程序中使用felx布局不用考虑布局兼容性问题，但在浏览器环境下，flex布局需要考虑兼容性问题。',13,100,'2019-02-28 06:44:23','2019-02-28 06:44:23'),(191,'## WXS\r\n### 模块module\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/01wxs-module.html\r\n每一个 .wxs 文件和 `<wxs>` 标签都是一个单独的模块。\r\n—— 当为.wxs文件时：文件名就是模块名\r\n—— 当为 `<wxs>` 标签时：module 属性值就是模块名\r\n```\r\n<!--wxml:模块名为foo-->\r\n<wxs module=\"foo\">\r\n  var some_msg = \"hello world\";\r\n  module.exports = {\r\n      msg : some_msg,\r\n  }\r\n</wxs>\r\n<view> { {foo.msg} } </view>\r\n```\r\n`wxs` 引用` wxs` 用 **require**，`wxml` 引用 `wxs` 用 **src**\r\nrequire 和 src 必须使用相对路径\r\n```\r\n// /pages/tools.wxs\r\n\r\nvar foo = \"\'hello world\' from tools.wxs\";\r\nvar bar = function (d) {\r\n  return d;\r\n}\r\nmodule.exports = {\r\n  FOO: foo,\r\n  bar: bar,\r\n};\r\nmodule.exports.msg = \"some msg\";\r\n```\r\n```\r\n// /pages/logic.wxs\r\n\r\nvar tools = require(\"./tools.wxs\");\r\n\r\nconsole.log(tools.FOO);\r\nconsole.log(tools.bar(\"logic.wxs\"));\r\nconsole.log(tools.msg);\r\n```\r\n```\r\n<!-- /page/index/index.wxml -->\r\n<!-- 引入.wxs文件，文件名就是模块名，模块名logic -->\r\n<wxs src=\"./../logic.wxs\" module=\"logic\" />\r\n```\r\nwxs 模块均为单例，wxs 模块在第一次被引用时，会自动初始化为单例对象。多个页面，多个地方，多次引用，使用的都是同一个 wxs 模块对象。\r\n如果一个 wxs 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。\r\n控制台输出：\r\n```\r\n\'hello world\' from tools.wxs\r\nlogic.wxs\r\nsome msg\r\n```',13,100,'2019-02-28 06:48:12','2019-02-28 06:48:54'),(192,'### 支持es6对js文件的导出与导入',13,100,'2019-02-28 07:04:10','2019-02-28 07:04:10'),(193,'## 快捷键\r\n`ctr + p` ：查找文件\r\n`alt + shift + ↑`：复制一行\r\n`alt+ ↑` ： 向上移动一行（向下移动同理）\r\n`ctr + shift + k`：删除一行',13,100,'2019-02-28 07:04:53','2019-02-28 07:04:53'),(194,'## 组件/组件的属性\r\n### 共同的属性\r\n`id`  `class`  `style`  `hidden`  `data-*`  `bind*/cathc*`\r\n### 特殊的属性\r\n几乎所有组件都有其自定义的属性，可以对该组件的功能或样式进行修饰。',13,100,'2019-02-28 07:06:57','2019-02-28 07:06:57'),(195,'## 组件/视图组件\r\n### view 视图容器\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/component/view.html\r\nhover-class：此属性指定按下去的样式类，即点击态，默认none\r\nhover-stop-propagetion：此属性指定是否阻止本节点的祖先出现点击态，默认false\r\n```\r\n<view hover-class=\"bg_red\">\r\n  outer view\r\n  <view hover-stop-propagation=true>\r\n    inner view\r\n  </view>\r\n</view>\r\n```\r\n### swiper滑块视图容器\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html\r\n```\r\n<!-- demo.wxml -->\r\n<swiper class=\"box\" indicator-dots=\"{ {true} }\" current-item-id=\'4\' bindchange=\"change\" interval=\'5000\' autoplay=\"{ {false} }\" circular=\"{ {true} }\">\r\n  <block wx:for=\"{ {imgUrls} }\" wx:key=\"*this\">\r\n    <swiper-item item-id=\"{ {index} }\">\r\n      <image src=\"{ {item} }\" />\r\n    </swiper-item>\r\n  </block>\r\n</swiper>\r\n```\r\n```\r\n/* demo.wxss */\r\n.box {\r\n  width: 750rpx;\r\n  height: 340rpx;\r\n  background-color: aqua;\r\n}\r\n.box image {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n```\r\n```\r\n// demo.js\r\nPage({\r\n  data: {\r\n    imgUrls: [\r\n      \"/images/banner1.png\",\r\n      \"/images/banner2.png\",\r\n      \"/images/banner3.png\",\r\n      \"/images/banner4.png\",\r\n      \"/images/banner5.png\"\r\n    ]\r\n  },\r\n  // swiper改变事件\r\n  change(e) {\r\n    console.log(e)\r\n  }\r\n})\r\n```\r\n### scroll-view滚动组件\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\r\n上滑加载更多\r\n```\r\n<!-- wxml -->\r\n<scroll-view class=\"scroll-view-box\" scroll-y=\"{ {true} }\" bindscrolltolower=\"more\">\r\n  <block wx:for=\"{ {list} }\" wx:key=\"item.id\">\r\n    <view calss=\"scroll-view-item\">\r\n      { { item.name } }\r\n    </view>\r\n  </block>\r\n</scroll-view>\r\n```\r\n```\r\n/* wxss */\r\n.scroll-view-box {\r\n  height: 300rpx;\r\n  background-color: aqua;\r\n}\r\n```\r\n```\r\n// demo.js\r\nPage({\r\n  data: {\r\n   list:[\r\n     {id:1,name:\'张三\'},\r\n     {id:1,name:\'李四\'},\r\n     {id:1,name:\'王五\'},\r\n     {id:1,name:\'赵六\'},\r\n     {id:1,name:\'王麻子\'},\r\n     {id:1,name:\'aaa\'},\r\n     {id:1,name:\'bbb\'},\r\n     {id:1,name:\'ccc\'},\r\n   ]\r\n  },\r\n  more() {\r\n    let additon = [\r\n      { id: 1, name: \'张三\' },\r\n      { id: 1, name: \'李四\' },\r\n      { id: 1, name: \'王五\' }\r\n    ]\r\n    this.setData({\r\n      list: this.data.list.concat(additon)\r\n    })    \r\n  }\r\n})\r\n```',13,100,'2019-02-28 07:09:45','2019-02-28 07:14:23'),(196,'## 组件/基础内容\r\n### icon/text/rich-text/progress\r\nhttps://developers.weixin.qq.com/miniprogram/dev/component/icon.html',13,100,'2019-02-28 08:08:23','2019-02-28 08:08:23'),(197,'## 组件/表单\r\n### form\r\nform：https://developers.weixin.qq.com/miniprogram/dev/component/form.html\r\n```html\r\n<!--  wxml -->\r\n<form class=\'box\' bindsubmit=\'sub\'>\r\n  <view>\r\n    <input class=\"box-input\" placeholder=\'请输入用户名\' name=\'username\' />\r\n  </view>\r\n  <view>\r\n    <input class=\"box-input\" placeholder=\'请输入用密码\' name=\'password\' password=\'{ {true} }\'/>\r\n  </view>\r\n  <view>\r\n    <button  type=\'primary\' form-type=\'submit\'>点击登录</button>\r\n  </view>\r\n</form>\r\n```\r\n```css\r\n/* wxss */\r\n.box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background: #eee;\r\n}\r\n.box .box-input {\r\n  width: 700rpx;\r\n  height: 80rpx;\r\n  line-height: 80rpx;\r\n  border-bottom: 2rpx solid black;\r\n  margin-bottom: 10rpx;\r\n}\r\n```\r\n```javascript\r\n// js\r\nPage({\r\n  data: {\r\n    name:\'\',\r\n    pwd: \'\'\r\n  },\r\n  sub(e) {\r\n    this.setData({\r\n      name: e.detail.value.username,\r\n      pwd: e.detail.value.password\r\n    })\r\n  }\r\n})\r\n```',13,100,'2019-02-28 08:09:41','2019-02-28 08:25:17'),(198,'### button\r\nbutton：https://developers.weixin.qq.com/miniprogram/dev/component/button.html\r\n```\r\n<!-- wxml -->\r\n<view class=\"form-box\">\r\n  <!-- 点击事件 -->\r\n  <button type=\'primary\' bind:tap=\"click \">我是按钮</button>\r\n  <!-- 开放能力：打开客服会话 -->\r\n  <button type=\'primary\' open-type=\'contact\'>在线客服</button>\r\n  <!-- 开放能力：分享 -->\r\n  <button type=\'primary\' open-type=\'share\' send-message-title=\'分享标题呀\'>分享</button>\r\n</view>\r\n```\r\n```\r\n/* wxss */\r\n.form-box {\r\n  display: flex;\r\n  margin-top: 10rpx;\r\n}\r\n```',13,100,'2019-02-28 08:14:19','2019-02-28 08:56:13'),(199,'### input\r\ninput： https://developers.weixin.qq.com/miniprogram/dev/component/input.html\r\n```\r\n<!--  wxml -->\r\n<view class=\'box\'>\r\n  <view>\r\n    <input class=\"box-input\" placeholder=\'请输入用户名\' bindblur=\'blur\' focus />\r\n  </view>\r\n  <view>\r\n    <button type=\'primary\'>点击登录</button>\r\n  </view>\r\n</view>\r\n```\r\n```\r\n/* wxss */\r\n.box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background: #eee;\r\n}\r\n.box .box-input {\r\n  width: 700rpx;\r\n  height: 80rpx;\r\n  line-height: 80rpx;\r\n  border-bottom: 2rpx solid black;\r\n  margin-bottom: 10rpx;\r\n}\r\n```\r\n```\r\n// js\r\nPage({\r\n  data: {\r\n    text:\'\'\r\n  },\r\n  blur(e) {\r\n    this.setData({text: e.detail.value})\r\n  }\r\n})\r\n```',13,100,'2019-02-28 08:24:26','2019-02-28 08:24:26'),(200,'## 组件/导航\r\n### navigator\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\r\n```\r\n<!--  wxml -->\r\n<navigator url=\'/pages/logs/logs\' open-type=\'navigate\'>有回退</navigator>\r\n<navigator url=\'/pages/logs/logs\' open-type=\'redirect\'>无回退</navigator>\r\n<!--  跳转tabBar页面使用一定要用switchTab，用navigate会无效 -->\r\n<navigator url=\'/pages/index/index\' open-type=\'switchTab\'>跳转到指定的tabBar页面</navigator>\r\n\r\n<!--  在目标页用onLoad(query)接收参数 -->\r\n<navigator url=\'/pages/logs/logs?id=110&name=andy\' open-type=\'navigate\'>传参数</navigator>\r\n```',13,100,'2019-02-28 08:26:38','2019-02-28 08:26:38'),(201,'## Api/发起请求 wx.request\r\n### 概述\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html\r\n域名设置：小程序发起请求，需要在小程序后台 ”设置“ > \"开发设置\" > \"服务器域名\" 中设置合法的request域名。\r\n调试：小程序只支持https请求，如需要本地http调试，设置小程序开发工具即可：\r\n```\r\n打开开发工具右上角的\"详情\" > 勾选\"不校验合法域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书\"\r\n```\r\nwx.request并发数：**5个**\r\n### 用Promise封装请求&加载更多\r\n用Promise封装wx.resquest请求，并上滑触底，加载更多\r\n```\r\n<!--pages/request/request.wxml-->\r\n<scroll-view class=\'box\' scroll-y=\'{ {true} }\' bindscrolltolower=\"req_more\">\r\n  <block wx:for=\"{ {list} }\" wx:key=\"id\">\r\n    <view>{ {item.body } }</view>\r\n  </block>\r\n</scroll-view>\r\n```\r\n```\r\n/* pages/request/request.wxss */\r\n.box {\r\n  height: 200rpx;\r\n  background: gray;\r\n}\r\n```\r\n```\r\n// pages/request/request.js\r\nPage({\r\n  data: {\r\n    list: [],\r\n    offset: 0,\r\n    limit: 5\r\n  },\r\n  onLoad: function (options) {\r\n    this.req_more();\r\n  },\r\n  // 发送封装过的wx请求\r\n  req_more() {\r\n    let params = {\r\n      url: \'http://api.com/api/v1/articles\',\r\n      method: \'GET\',\r\n      data: { offset: this.data.offset, limit: this.data.limit }\r\n    };\r\n    this.http(params).then(res => { // 调用微信接口成功（但：如果开发者服务器有问题，还是可能请求不到数据）\r\n      if (res.statusCode == 200) { // 请求开发者服务器成功\r\n        if (!(res.data.data.data.length === 0)) { // 当加载到的数据不为空时，则累加；\r\n          this.setData({\r\n            list: this.data.list.concat(res.data.data.data), // 数据累加\r\n            offset: this.data.offset + this.data.limit       // 偏移量累加\r\n          });\r\n        } else {\r\n          console.log(\'已没有更多数据！\');\r\n        }        \r\n      } else {\r\n        console.log(\'请求开发者服务器失败！\')\r\n      }\r\n    }).catch(res => { // 微信接口调用失败\r\n      console.log(res);\r\n    });\r\n  },\r\n  // 用Promise封装wx请求\r\n  http(params) {\r\n    return new Promise((resolve, reject) => {\r\n      wx.request({\r\n        ...params,\r\n        success: result => {\r\n          resolve(result);\r\n        },\r\n        fail: (result) => {\r\n          reject({ \'message\': \'微信接口调用失败\', \'result\': result });\r\n        },\r\n        complete: () => { }\r\n      });\r\n    });\r\n  }\r\n})\r\n```',13,100,'2019-02-28 08:32:42','2019-02-28 08:32:42'),(202,'## Api/WebSocket\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.closeSocket.html\r\n```\r\n<!--pages/websocket/websocket.wxml-->\r\n<button type=\"primary\" bind:tap=\"conn\">建立连接</button>\r\n<button type=\'warn\' bind:tap=\"send\">发送数据</button>\r\n<button type=\'default\' bind:tap=\"close\">关闭连接</button>\r\n```\r\n```\r\n// pages/websocket/websocket.js\r\nPage({\r\n\r\n  onLoad: function (options) {\r\n    this.listen();\r\n    this.closeStatus();\r\n  },\r\n\r\n  // 连接websocket\r\n  conn() {\r\n    var SocketTask = wx.connectSocket({\r\n      url: \'ws://localhost:3000\',\r\n      success: (e) => {\r\n        console.log(\'websocket 连接上了\');\r\n      },\r\n      fail: () => { },\r\n      complete: () => { }\r\n    });\r\n    SocketTask.onOpen(()=>{\r\n      SocketTask.send({ // 通过【SocketTask】发消息\r\n        data: \'连接建立时就发消息\'\r\n      }) \r\n    }) \r\n  },\r\n  // 发送数据\r\n  send() {\r\n    wx.sendSocketMessage({ // 通过api发消息\r\n      data: \'通过api发的消息\'\r\n    })\r\n  },\r\n  // 关闭websocket\r\n  close() {\r\n    wx.closeSocket()\r\n  },\r\n  // 监听服务器消息\r\n  listen() {\r\n    wx.onSocketMessage((msg) => {\r\n      console.log(msg);\r\n    });\r\n  },\r\n  // 监听websocket关闭了的状态\r\n  closeStatus() {\r\n    wx.onSocketClose(function (res) {\r\n      console.log(\'WebSocket 已关闭！\')\r\n    })\r\n  }\r\n})\r\n```',13,100,'2019-02-28 08:43:56','2019-02-28 08:43:56'),(203,'## Api/数据缓存\r\n官网：https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html',13,100,'2019-02-28 09:07:34','2019-02-28 09:07:34'),(204,'## 其他\r\n### 小程序中【类】的应用（es6范畴）\r\n```\r\n// js\r\n// es6中的声明类\r\nclass User {\r\n  constructor(name = \'\', pwd = \'\') { // 构造器，类实例化时最先执行\r\n    this.username = name\r\n    this.password = pwd\r\n  }\r\n  showUserInfo() {\r\n    console.log(this.username, this.password)\r\n  }\r\n}\r\n// new一个用户对象\r\nvar userObj = new User(\'andy\', \'123456\')\r\n\r\n// 继承类\r\nclass Vip extends User {\r\n  constructor(name=\'\',pwd=\'\',vip=1) {\r\n    super(name, pwd) // 【必须】继承父类构造函数\r\n    this.vip = vip\r\n  }\r\n  showVip() {\r\n    console.log(`${this.username}的vip等级是：${this.vip}`)\r\n  }\r\n}\r\n\r\nPage({\r\n  data: {\r\n    name: \'\',\r\n    pwd: \'\'\r\n  },\r\n  show: function () {\r\n    userObj.showUserInfo();\r\n    // new 再new一个用户对象\r\n    var userObj2 = new User(\'mary\', \'987654\')\r\n    userObj2.showUserInfo()\r\n  },\r\n  onLoad() {\r\n    this.show() // 输出用户\r\n    var vip = new Vip(\'jack\',\'000000\',3) \r\n    vip.showVip() // 输出vip\r\n  }\r\n})\r\n```',13,100,'2019-02-28 09:08:54','2019-02-28 09:08:54'),(205,'### promise 封装\r\n参考网址（廖雪峰）：https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000',13,100,'2019-02-28 09:09:28','2019-02-28 09:09:28'),(206,'## xwParse插件\r\nwxParse-微信小程序富文本解析自定义组件，支持HTML及markdown解析\r\n官网：https://github.com/icindy/wxParse',14,100,'2019-02-28 09:19:57','2019-02-28 09:19:57'),(207,'## 社交\r\n### 位置社交\r\n```\r\n位置社交：通过位置分享，通过算法匹配附近的有缘人，产品取名“擦肩而过”\r\n```',15,100,'2019-03-01 02:29:20','2019-03-01 02:30:34'),(208,'## 创意平台&协作平台\r\n```\r\n做一个idea的平台：各种idea的产品在这里实验、试错、成长，\r\n平台提供基础能力：U盘式的人力支持、众筹式的融资支持、基于算法的大众咨询、测试服务、平台用户流量支持idea产品、idea产品为平台带流量\r\n\r\n```\r\n\r\n### 贡献确认机制\r\n```\r\n积分等级，升级打怪\r\n区块链价值确认：发虚拟股份币，确认贡献者贡献的份额，与整体项目价值正相关。\r\n长短期利益结合。\r\n```\r\n### 激励机制（名和利）\r\n```\r\n名：头衔、荣誉、徽章、学位、登记、认证\r\n利：金钱、机会\r\n```\r\n```\r\n创作心理活动：当自己有干货时，如果没有预期的回报，就没有公开发表的动力。所以，发表干货的动力（动机）包括：物质回报，虚荣心回报，江湖地位回报，行业职业地位回报，帮助他人的满足感。\r\n\r\n因此所需的配套制度为：\r\n—— 及时反馈（用户对干货的反馈，对作者激励很大），\r\n—— 长期回报（回报不断的累计，对作者一次创作，长期受益，也是很大的激励），\r\n——等级与物质奖励\r\n```\r\n### 利益代表协作机制\r\n```\r\n选能力强者为利益代表: 众人支持这一人，捆绑这种利益关系，发行bi，有成果一起分享，有损失一起承担，一损俱损，一荣俱荣。支持者可动态增持减持“支持”。每个代表背后捆绑一定的利益关系，对于代表，即是支持，也是监督。\r\n```\r\n### 技术顾问团 （稳定服务）\r\n```\r\n通过团队服务的方式，来提供稳定的服务。一个队员有问题，立马有其他队员补充。提高服务的稳定性，也降低对队员的依赖性。\r\n以团队的形式，提供教学或咨询服务，团队成员临时组成，满足成员兼职需求，同时团队的形式保证用户得到稳定的服务。对于不满意的服务，用户可以更换服务人员。\r\n```\r\n### 分群评价\r\n```\r\n个人进行消费后，以群的名义进行评价，避免个人主观建议太强，同时社群还能提高个人归宿感，安全感。\r\n```\r\n### 众创模式之：文章众创。\r\n```\r\n选题→立项→脑暴→初稿→修改→终稿。前置条件：利益分配制度。\r\n```',15,100,'2019-03-01 02:31:52','2019-03-01 05:06:30'),(209,'## 知识进化（话题讨论）\r\n```\r\n众筹话题：当一个人有1个问题时，可以以众筹的方式提出来，当问题被回答了或解决了，所有参与众筹的人共同承担成本，并且享有该问题的后续收益分红。\r\n一个话题，就是一个知识，不但完善，进化\r\n```\r\n### 讨论机制：话题评论\r\n每个人手里都有节点（票），对有用的评论，进行打点（投票）。为了防止刷点（刷票），所谓【打点】（投票），就是点的转移，从一个人手中，转移到另一个人手中。\r\n看有价值的话题或评论，需要付费，然后对有用的评价进行打点（等于投票点赞），那么将来就根据点数，来分确定贡献者的收入。\r\n【节点】就是用来记录社区成员的贡献的，根据贡献份额，来分配社区的收入。\r\n### 话题维护编辑团队\r\n话题需要有团队来维护，以团队的形式，可以稳定的提供劳动力，维护编辑话题。\r\n团队工作实行积分制，\r\n```\r\n评论需要付钱，\r\n```\r\n### 程序员问答平台\r\n```\r\n需求多，且强，引入第三方review提高问答质量，以问题为切入点，切入教学，实践，兼职，社交，招人等领域。\r\n```',15,100,'2019-03-01 03:01:28','2019-03-07 15:26:30'),(210,'## 产品设计\r\n### 好奇心的应用\r\n```\r\n比如投票应用，用户想要看到投票结果，需先进行投票互动才可以看到其他人的结果。\r\n```\r\n```\r\n再比如类似like或dislike的点赞应用，开始看不到别人的like或dislike数据，鼓励用户独立判断，这不仅可以反映用户真实的情感，还可以可以利用用户的好奇心（想看看别人是怎么评价的），来增加用户的互动率。\r\n\r\n由此，还能以用户真实的情感为基础，算出用户真实的偏好，做到人以群分，为社交匹配打下基础。\r\n```',15,100,'2019-03-01 03:19:54','2019-03-01 03:19:54'),(211,'### 知识产品化\r\n```\r\n将知识的传播，从文字书本等形式，升级为产品形式，游戏体验的形式，真正学以致用，简单、趣味、好学、好记。\r\n学习是痛快的，知识产品化将使学习不再痛苦。\r\n```',15,100,'2019-03-01 03:23:42','2019-03-01 03:23:42'),(212,'## 营销\r\n### 报我名 or 报口令\r\n```\r\n报我名，可打折；报我名，领优惠券\r\n或者 报口令\r\n```\r\n### 语音口令(喊广告语)\r\n```\r\n语音口令:先上传服务器，后客户端使用。比如: 拼多多 拼着买就是便宜\r\n```\r\n### 头像营销\r\n```\r\n头像：用代码生成头像，病毒营销。类似当年圣诞帽头像\r\n```\r\n### 学习或兼职平台软文\r\n```\r\n恐吓式营销 :你什么都没错，只是老了\r\n```',15,100,'2019-03-01 03:41:34','2019-03-01 04:30:19'),(213,'## FD修改订单价格',16,100,'2019-03-01 03:58:54','2019-03-01 03:58:54'),(215,'## 项目或关键词\r\n### 外包撮合平台\r\n### 导师制度\r\n### 推荐：用过后才可以推荐\r\n### 合作币 股份币 贡献币 节操币\r\n### 火花值 碰撞 影响力 感染力\r\n### 活跃值 贡献值 分享值\r\n### 惩罚延缓 快乐延时\r\n### 评论促进自我成长\r\n```\r\n匿名评论，唯被评人自己可见，帮助自知，又不在公众场合伤害被评人\r\n```\r\n### 读给你听\r\n### 知识课程众筹\r\n### 那时博物馆\r\n```\r\n记录人生，一个月一次记录机会，缅怀过去，仪式感\r\n```\r\n### 共享会员卡\r\n```\r\n共享会员卡，社交拉新，共享会员资格，共担责任与义务\r\n```\r\n### 借书读书会书评\r\n### 约饭\r\n约饭版的返利网\r\n【返利网的两条重要逻辑】1.为商家带去流量，这个流量与商家原有的流量重叠不太大，基本是增量；2.以返利形式保护品牌价格\r\n新人奖励：新人返利 （判断是否为新人的办法：顾客现场用手机扫店家新人二维码，判断是新人，则给予返利）\r\n【线下实体店新人奖励，逻辑不成立】因为线上的流量与线下商家自有流量很难区分开，一旦线上有奖励，线下自有流量也会上线领取奖励，所以没法区分增量。\r\n旧人奖励：带新人返利 \r\n【新人奖励不成立，旧带新，也就不成立了】\r\n低峰时段就餐：低峰红包\r\n【也不成立，商家可以自行定价，低峰时段自动打折，根本不需要第三方平台介入，返什么利和红包】\r\n【对于餐饮业来说】拉新营销并不最重要，因为通过门店降价自然就可以很好拉新了。最关键在于菜品老客回头率，那么核心竞争力就是菜品管理和CRM运营了。餐饮的供应能力有限，餐饮业的核心不在于怎么拉新，而在于怎么留得住。\r\n### 雕塑工作室\r\n漫画自画像：适合自嗨、纪念、社交炫耀等场景，朋友圈传播，小程序下单定制。\r\n雕塑工作室：适合结婚、纪念、送礼等场景，朋友圈传播，小程序下单定制。\r\n特点：个性化、定制化，去中心化。\r\n商业模式：\r\n```\r\n搭建小程序平台\r\n对于B端：招募绘画家、雕塑工作室等B端商家，提供生产能力。\r\n对于C端：小程序下单，B端生产、交付。\r\n平台内容策略：C同意在平台展示其作品，并转发朋友圈积攒，给予一定的奖励\r\n\r\n```',15,100,'2019-03-01 04:05:21','2019-03-18 04:32:18'),(216,'## 原则\r\n### 责任到人\r\n```\r\n巴黎烧了吗，肖尔铁磁，善良靠什么维护，责任: 把组织的责任转到个人身上\r\n防止个人躲在组织后面做恶\r\n善良事靠每个人对自己负责维护到\r\n```\r\n### 信息筛选制度：好评率\r\n```\r\n喜欢和讨厌的数量进行对比，对比值决定信息曝光(或推荐)的概率\r\n```\r\n### 异步群\r\n```\r\n群的作用: 将来可能有用。同步群，骚扰严重，改善方式:异步群\r\n吸引力原则：将来可能有用哦\r\n```\r\n### 37%决策理论\r\n### 闲出来的创意\r\n```\r\n人闲了，就会想事情，想着想着就想出创意来了，这就闲出来的创意\r\n```\r\n### 弱关系定义\r\n```\r\n这关系将来可能用得着。人的精力有限，有强关系，也有弱关系。弱关系管理很重要，在关系刚建立时，如果彼此吸引力不对等，强势方精力有限通常反应冷淡，那么弱势方就会有失落感，失落感会危及弱关系。弱关系管理产品，就是要用产品机制来给强势方找反应冷淡的不可抗力原因，从而消除弱势方的失落感，使弱关系长期存在并有机会慢慢变强。\r\n```',15,100,'2019-03-01 04:35:04','2019-03-01 04:59:05'),(217,'## 流程图\r\nhttps://www.processon.com/view/link/5c7a5257e4b043f594ced2bc\r\n交互：https://free.modao.cc/workspace/apps/p5B12AE63131551423202669\r\n## 熟人互评需要的场景\r\n### 熟人社交货币（社交借口）\r\n熟人或半熟人间需要社交货币，即社交借口来撮合社交场景，增进感情\r\n```\r\n// 半熟人场景1：邀约\r\nA男 刚认识了个漂亮的 B女，A 想约 B 出来玩。\r\nA：我有一张拼券，拼着吃/玩，更便宜，一起来吧。\r\n```\r\n### 熟人碰撞的动力\r\n刷好评率\r\n一起碰撞做某事\r\n## 产品命名\r\n### 点币 或 碰点 或 节点\r\n### 节点分裂 火花值\r\n### 靠谱值\r\n命名要低调，避免不必要的监管审查麻烦\r\n最好不要允许购买币了，第一需要文网文，监管麻烦；第二ios（或ios小程序）关于虚拟支付受限制',17,100,'2019-03-02 09:47:16','2019-03-08 16:45:57'),(218,'## 核心价值观\r\n### 塑造更好的自己\r\n#### 让自己变得更包容\r\n```\r\n实现方法\r\n//  (评价是服务发送后，评价应该立马见效)1.延迟愤怒：当要差评时，系统给出一个最低缓冲时间，让愤怒冷静一会，即最低6个小时后，才能评价。策略：延时时间原则上长一点好，时间足够长，头脑月冷静，但产品早期延时短一点好，用户对产品还缺乏信任，需要尽早落袋为安。\r\n2.【可修改评价】：评价做出后，立即返还，从30%开始返还，此时双方不知道对方的评分；24小时后，返还剩余的（如果有剩余的话），在24小时内用户可以秘密的改评价（可改高改低）。24小时为冷静包容培养期。24小时揭晓评分后，2天内，双方仍然可以改评分（揭晓后可能双方沟通消除了误会，所以有改分需求）。\r\n【产品迭代策略】评分由高改低，已经返还的JCB不退回。\r\n1期：评价后，立马揭晓评分，立马全部返还，立竿见影，但是保留2天内可以改分的能力。\r\n2期：评价后，评分暂时不揭晓，立马返还30%，24小时候后，揭晓评分，返还剩下的（如果有剩下的话），24小时内用户可以秘密改分。24小时候的2天内，双方仍然可以改评分。\r\n```\r\n### 成就更好的关系\r\n```\r\n增加社交网络正能量，简称“社交能量”，它是一个指数，计算方法为：【？？？？】\r\n让关系变得更好，更紧密，就是要增加好的【社交场景】，发送好的关系，那么社交网络的正能量就会增加。\r\n```\r\n#### 设计好的社交场景\r\n1.一起吃喝玩乐\r\n2.学习上的交流帮助\r\n3.工作上的交流帮助\r\n4.服务上的交流帮助，比如：法律咨询、导游服务等。\r\n#### 动态定价\r\n动态定价，可以与信用等级挂钩，信用越高，眼光越高，可信度越高，价格话语权越大。',17,100,'2019-03-02 10:37:30','2019-03-04 08:58:15'),(219,'## 推广碰撞防止恶意报复\r\n应对策略：批量碰撞推广时，设置个人最大接碰的数量。',17,100,'2019-03-02 11:44:01','2019-03-02 11:44:01'),(220,'## 碰撞口令的营销作用\r\n1.凭口令享优惠\r\n2.评价的威慑：保证质量\r\n### 预售场景（口令优惠券）\r\n商家预售一批口令，消费者提前拿到优惠（口令就是优惠券）\r\n商家营销宣传海报示例：\r\n```\r\n预售一千份口令，口令就是优惠券，凭口令享受满 1000 减 200 优惠\r\nps：此优惠券具有的特征优势：\r\n1.用户花了成本得到此优惠券，使用率高\r\n2.因为用户有评价威慑力，商家不敢玩套路，用户相信优惠券会诚意满满，因此优惠券的公信力高，用户领券率高\r\n```\r\n于商家，扩大销售\r\n于用户，质保有优惠\r\n于平台，多碰撞，多佣金\r\n\r\n用户怎么领券（口令）：通过推广令，来领取口令。\r\n<br>\r\n### 推广令场景（口令优惠券）\r\n商户发行推荐令（相当于推广码），中介（或自己）领取推荐令【怎么领？】，中介公开传播推荐令（因此推广令永远不能重复），用户根据推荐令来接碰，生成碰撞令（相当于推荐码换取优惠券）（碰撞令可以可以重复使用，为了简单好记好输入）。\r\n用户去商户处消费，拿出碰撞令（碰撞令可以是商户自己的券码），享受优惠商家优惠\r\n#### 技术要求\r\n[碰撞令=券码]的情况，需要商户生成推荐令时导入券码，即推荐令绑定了券码（碰撞令）。\r\n#### 商家发现推广令的动力\r\n推广令需要jcb购买，这些jcb直接构成中介的佣金，中介有动力帮助推广；吸引来用户消费后，若是羊毛恶意用户，商家可以差评惩罚，确保用户优质。\r\n#### 推广计划\r\n推广令实行预算制度，商家新建[推广计划]，计划明确预算（付给平台预算），一个计划规定最多多少个推广令，每个推广令共享总预算，预算用完及止。推广计划页面中，商户可以点击预先生成推广令，然后将这些推广令在微信以外的平台进行传播。\r\n#### 领取推广令需要门槛吗？\r\n如果无门槛，可能会有人站着茅坑不拉屎。所以需要领取门槛，领取推广令，相当于进货，这样就比较有推广动力。领取门槛，在商家新建推广计划时确定，门槛是：购买推广令，推广令价格由商家来定，完成多个推广后，可返还购买款；若没完成推广任务，则不返还购买款。（为了防止商家把推广令价格定得太高，坑了推广员，推广令最高限价500jcb）\r\n#### 中介或自己怎么领取推广令\r\n新建时选择自己推荐，还是给推荐员 > 转发推广令领取页面，或直接发给朋友  推荐令(待推荐员认领)，推荐员认领推荐令 > 推荐令生效，公开传播，可以接碰了\r\n### 推广计划页面&推荐令接碰页面\r\n在平台上为商家生成推荐令领取页面=推广计划页面，商家会转发此页面（商家其实也帮助平台做了推广）来招募自己的推荐员。\r\n推荐员领取推荐令后（可以通过转发的页面领取，也可以通过输入推荐令领取），生成推荐令接碰页面，推荐员转发推荐令接碰页面给消费者，消费者在推荐令接碰页面完成接碰（消费者也可以输入推荐令来完成接碰）。\r\n\r\n### 营销所得的出口\r\n虚拟货币指通过法币购买的货币，不能再兑换成法币，也不能流通，不能购买实物商品，不能转让。\r\n所以，虚拟货币，不能有出口。\r\n\r\n只有不需要用金钱购买的积分，才可以有出口。',17,100,'2019-03-02 11:53:51','2019-03-05 14:01:03'),(222,'## 需求列表\r\n1.数量公开透明化：口令数量公开可视化\r\n2.支持导入：系统支持导入口令（券码），导入商家券码\r\n3.支持后缀：口令是优惠券的券名，后缀是优惠券的券码，如：A123_1\r\n//(有打赏后，不必自定义出资比例) 4.支持自定义碰撞合体比例：比如商家出80 JCB，用户出 20 JCB。（主要用于土豪对屌丝的让步，以最大诚意来撮合）\r\n5.评价分配比例：以bc各自出资的本金，按比例各自返还。（按出资比例各自返还，可减轻用户计算负担）\r\n6.评分时，注意美化用词，减轻差评的心理负担，培养用户适应接受中评的习惯。如：10、9分超越预期，8分 非常满意  7分 满意，6分 一般 ，5-1分 不满意\r\n7.支持打赏需求：打赏【有利于币流动，币需求量增大】、【有利于促进碰撞达成】。打赏的分配：分给被赏人和平台，被赏人所得比例与评分返还比例相同。\r\n8.等级（优越感）什么时候推出【？？？】\r\n// 9.子账号（参数）要不要？不需要，评价还是有BC完成，而不是PC完成，通过推广令也能实现P管理B，P既能得到佣金，也能看到B的评价，只是不必代替B来评价。\r\n9.支持好评率：即使有了评分，还要统计好评率，因为好评率是个统计百分数，与分数的绝对值不一样的。分为给出好评率、得到好评率，一个人一天最多算一次好评。\r\n10.支持最近一个月差评数展示：展示最近一个月的差评数量。（展示差评数量，而不是差评率，是为了防止故意刷好评而美化差评率）\r\n11.小程序审核风险太大，暂时不做小程序，先做公众号，web网站\r\n### 产品节奏\r\n#### 1期\r\n```\r\n1.碰撞：只有双方都评分时，才公布最终的评分\r\n2.好评率，更多的是象征意义\r\n3.交易可信度\r\n4.最近一个月的差评（数）\r\n\r\n```\r\n#### 2期\r\n```\r\n1.打赏\r\n```\r\n#### 3期\r\n```\r\n1.推广（导入券码）\r\n```\r\n#### 待排期',17,100,'2019-03-02 12:55:10','2019-03-07 15:53:06'),(223,'## 场景检查\r\n检查尽可能多的场景情况，看看产品是否在某些场景上有漏洞\r\n## 漏洞检查\r\n检查产品逻辑是否存在漏洞，是否有被薅羊毛、钻空子等作弊的可能',18,100,'2019-03-04 06:34:42','2019-03-04 06:34:42'),(224,'## 概念\r\n积分是债务\r\n神奇的QQ等级是基本没有任何实质出口也能获得大量用户追捧的案例外',19,100,'2019-03-04 09:54:34','2019-03-04 09:56:34'),(225,'## 用虚拟货币，还是直接法币碰撞？\r\n用虚拟币的话，虚拟币只能在平台消耗掉，不能兑换流通。如果想要回馈用户的话，如充值虚拟币送积分，那么这种积分性质上是虚拟币的折扣，这种积分的本质还是虚拟币，因此这种积分也不能兑换流通。\r\n### 虚拟货币的魔咒\r\n所以只要按用虚拟币，就不能兑换流通，也不能以某种方式回馈用户。\r\n证照风险：发行虚拟币需要《网络文化经营许可证》\r\n### 选择法币\r\n【需要等级】因为最终是要建成信用平台，用户的等级、信用是最大的资产。\r\n【需要回馈】担保是一个小需求，平台初期的拉新、和活跃，会比较艰难，所以需要一套拉新促活的激励机制，也就是是需要用真金白银回馈用户。\r\n【回馈的方式】根据用户的等级和积分，来回馈用户，这种积分必定不能与虚拟币一样，不能用法币购买获得。可建立积分商城，兑换各种物品。\r\n### 等级逻辑\r\n等级对应特权。等级是歧视性的。可以现有等级，而没有特权。\r\n等级的逻辑：等级高=有钱（或者花钱的潜力很高）且nice\r\n等级的行为：交易次数、交易金额、打赏金额\r\n### 积分逻辑\r\n积分对应回报。积分是非歧视性的。有积分，就要有回报，就会产生成本。\r\n【积分的成本逻辑】：积分与实物的汇率保持稳定，每天发放积分的总成本由总收益决定。\r\n【奖励的逻辑】奖励等级高的有钱人或者勤奋的穷人。\r\n【行为与节点】：根据用户行为，奖励节点，节点代表用户的贡献份额。等级越高获得节点是速度越快。有钱人奖励得快，穷人奖励得多。\r\n【节点的货币价值】：根据用户行为奖励节点，比如签到奖励5个节点，希望签到的成为为0.1-1元，那么1节点的货币价值是0.02-0.2元（2分-2毛）。\r\n【积分的货币价值】：1个节点=1.2毛（2分-2毛），希望 10积分 = 1节点 = 1.2毛（2分-2毛），1积分=1.2分\r\n【10元碰撞奖励1个节点】：10元的最少收益是1毛，奖励1个节点预期是1.2毛。\r\n【积分的获得】：根据要发放的总积分和每日的节点份额，就能确定积分与节点的汇率，每日自动完成汇兑。\r\n积分（节点）的行为：签到、交易、其他场景的劳务报酬。\r\n【节点和积分推出的时机】：在有丰富的积分场景行为时再推出，否则就有点像：耗钱→返钱  的简单循环游戏，舆论影响会不好。\r\n【节点的称谓】节点也可以叫成：元素、能量、火花（值）',17,100,'2019-03-05 14:32:11','2019-03-05 16:26:06'),(226,'## 风控\r\n### 对手恶意差评栽赃\r\n### 非法应用场景风险：赌博、色情等。\r\n### 监管风险',17,100,'2019-03-07 05:56:43','2019-03-07 06:38:24'),(227,'## 碰撞激励悖论\r\n如果要用等级积分等回馈用户，奖励用户，那么应该奖励那些贡献多的用户，而鼓励贡用户多贡献，就是鼓励差评，鼓励差评用户流失平台失去价值。\r\n激励用户→贡献多的用户→鼓励用户多贡献→鼓励差评→用户流失\r\n### 积分等级回馈不成立\r\n所以，原则上等级只能做参考，积分不能做，回馈不能做。\r\n### 能做的是什么？\r\n```\r\n能做的是：净赚碰撞收益\r\n将来面对竞争对手的策略是：迅速建立碰撞的场景，场景就是护城河。\r\n【场景类型】：主观感受型的非标准服务，如：咨询、培训、知识付费、开发外包、服务外包、策划服务等\r\n```\r\n#### 节点租房\r\n以豆瓣个人租房信息例，植入碰撞场景\r\n#### 节点知识\r\n节点知识，知识进化，碰撞出思想的火花\r\n#### 节点付费咨询（动态定价）\r\n#### 节点开发（开发外包）\r\n产品、运营、技术的社区，动态定价式的外包\r\n#### 付费论坛\r\n看帖收费，发帖收费，有用帖子返还发帖费用，甚至有奖励。\r\n### 最后的杀招\r\n做出社会企业，全部公开透明，回馈社会。取之于民，提高效率，用之于民，造福社会。\r\n或者回馈社区里的人，要求面部识别，一定的活跃等，才可以获得回馈资格。回馈人人平等，所以不存在鼓励差评。',17,100,'2019-03-07 13:53:17','2019-03-08 07:59:15'),(228,'## Lavarel 开发环境\r\n### Mac环境安装\r\n参考网址: https://learnku.com/docs/laravel-development-environment/5.5/development-environment-macos/937\r\n#### Homestead.yaml 配置文件\r\n```\r\nsubl ~/Homestead/Homestead.yaml\r\n```\r\n```\r\nip: \"192.168.10.10\"\r\nmemory: 2048\r\ncpus: 1\r\nprovider: virtualbox\r\n\r\nauthorize: ~/.ssh/id_rsa.pub\r\n\r\nkeys:\r\n    - ~/.ssh/id_rsa\r\n    - ~/.ssh/id_rsa.pub\r\n\r\nfolders:\r\n    - map: ~/Code\r\n      to: /home/vagrant/Code\r\n\r\nsites:\r\n    - map: homestead.test\r\n      to: /home/vagrant/Code/Laravel/public\r\n    - map: sample.test\r\n      to: /home/vagrant/Code/sample/public\r\n    - map: sample1.test\r\n      to: /home/vagrant/Code/sample1/public\r\n    - map: larabbs.test\r\n      to: /home/vagrant/Code/larabbs/public\r\n    - map: laraapi.test\r\n      to: /home/vagrant/Code/laraapi/public\r\n    - map: note.test\r\n      to: /home/vagrant/Code/note/public\r\n    - map: note.backup.test\r\n      to: /home/vagrant/Code/note_backup/public\r\n\r\ndatabases:\r\n    - homestead\r\n    - sample\r\n    - sample1\r\n    - larabbs\r\n    - laraapi\r\n    - note\r\n    - note_backup\r\n\r\nvariable:\r\n    - key: APP_ENV\r\n      value: local\r\n```\r\n\r\n#### 站点配置\r\n```\r\nsubl /etc/hosts\r\n```\r\n```\r\n127.0.0.1	localhost\r\n255.255.255.255	broadcasthost\r\n::1             localhost\r\n\r\n127.0.0.1	liujin.com\r\n127.0.0.1	www.liujin.com\r\n192.168.10.10   homestead.test\r\n192.168.10.10   sample.test sample1.test\r\n192.168.10.10	larabbs.test\r\n192.168.10.10	laraapi.test\r\n192.168.10.10	note.test\r\n192.168.10.10	note.backup.test\r\n```\r\n#### vagrant 命令\r\n\r\n| 命令行  | 说明 |\r\n| ------------ | ------------ |\r\n| vagrant init  | 初始化 vagrant  |\r\n| vagrant up  | 启动 vagrant  |\r\n| vagrant halt  | 关闭 vagrant  |\r\n| vagrant ssh  | 通过 SSH 登录 vagrant（需要先启动 vagrant）  |\r\n| vagrant provision  | 重新应用更改 vagrant 配置  |\r\n| vagrant reload  | 是重启虚拟机 |\r\n| vagrant destroy  | 删除 vagrant  |\r\n\r\n修改配置且重启虚拟机\r\n```php\r\n// vagrant provision 是命令 Vagrant 重新加载 Homestead.yaml 配置；\r\n// vagrant reload 是重启虚拟机使更改生效。\r\ncd ~/Homestead && vagrant provision && vagrant reload\r\n```',20,100,'2019-03-08 17:05:19','2019-03-10 09:37:48'),(229,'## Composer 加速\r\n在创建项目之前，我们先在虚拟机中运行以下命令来实现 Composer 安装加速 ：\r\n```\r\n$ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/\r\n```',21,100,'2019-03-10 09:22:33','2019-11-01 13:52:03'),(230,'## 安装一个Laravel项目\r\n```\r\n$ cd ~/Code\r\n$ git clone git@github.com:<username>/larabbs.git\r\n$ cd larabbs\r\n$ composer install\r\n$ cp .env.example .env\r\n```',21,100,'2019-03-10 09:24:02','2019-03-10 09:24:02'),(231,'## artisan 命令\r\n#### 重置数据与填充数据1\r\n```\r\nphp artisan migrate:refresh // 重置数据库\r\nphp artisan db:seed // 执行数据填充\r\n\r\nphp artisan db:seed --class=UsersTableSeeder // 单独指定填充文件，进行数据填充\r\nphp artisan migrate:refresh --seed // 重置与填充一起来\r\n```\r\n#### 其他常用artisan命令\r\n创建表\r\n```\r\nphp artisan make:migration create_statuses_table --create=\"statuses\"\r\n```\r\n增加表字段\r\n```\r\nphp artisan make:migration add_is_admin_to_users_table --table=users\r\n```\r\n新增模型model\r\n```\r\nphp artisan make:model Models\\Status\r\n```\r\n新增模型工厂\r\n```\r\nphp artisan make:factory StatusFactory\r\n```\r\n新增填充文件\r\n```\r\nphp artisan make:seeder StatusesTableSeeder\r\n```\r\n创建控制器\r\n```\r\nphp artisan make:controller StatusesController\r\n```\r\n创建模型策略\r\n```\r\nphp artisan make:policy StatusPolicy\r\n```\r\n监听队列\r\n```\r\nphp artisan queue:listen\r\n```\r\n#### 查看所有 artisan 命令\r\n```\r\nartisan list\r\n```\r\n```\r\nOptions:\r\n  -h, --help            Display this help message\r\n  -q, --quiet           Do not output any message\r\n  -V, --version         Display this application version\r\n      --ansi            Force ANSI output\r\n      --no-ansi         Disable ANSI output\r\n  -n, --no-interaction  Do not ask any interactive question\r\n      --env[=ENV]       The environment the command should run under\r\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\r\n\r\nAvailable commands:\r\n  clear-compiled       Remove the compiled class file\r\n  down                 Put the application into maintenance mode\r\n  env                  Display the current framework environment\r\n  help                 Displays help for a command\r\n  inspire              Display an inspiring quote\r\n  list                 Lists commands\r\n  migrate              Run the database migrations\r\n  optimize             Optimize the framework for better performance (deprecated)\r\n  preset               Swap the front-end scaffolding for the application\r\n  serve                Serve the application on the PHP development server\r\n  tinker               Interact with your application\r\n  up                   Bring the application out of maintenance mode\r\n app\r\n  app:name             Set the application namespace\r\n auth\r\n  auth:clear-resets    Flush expired password reset tokens\r\n cache\r\n  cache:clear          Flush the application cache\r\n  cache:forget         Remove an item from the cache\r\n  cache:table          Create a migration for the cache database table\r\n config\r\n  config:cache         Create a cache file for faster configuration loading\r\n  config:clear         Remove the configuration cache file\r\n db\r\n  db:seed              Seed the database with records\r\n event\r\n  event:generate       Generate the missing events and listeners based on registration\r\n key\r\n  key:generate         Set the application key\r\n lang\r\n  lang:publish         publish language files to resources directory.\r\n make\r\n  make:auth            Scaffold basic login and registration views and routes\r\n  make:command         Create a new Artisan command\r\n  make:controller      Create a new controller class\r\n  make:event           Create a new event class\r\n  make:exception       Create a new custom exception class\r\n  make:factory         Create a new model factory\r\n  make:job             Create a new job class\r\n  make:listener        Create a new event listener class\r\n  make:mail            Create a new email class\r\n  make:middleware      Create a new middleware class\r\n  make:migration       Create a new migration file\r\n  make:model           Create a new Eloquent model class\r\n  make:notification    Create a new notification class\r\n  make:policy          Create a new policy class\r\n  make:provider        Create a new service provider class\r\n  make:request         Create a new form request class\r\n  make:resource        Create a new resource\r\n  make:rule            Create a new validation rule\r\n  make:seeder          Create a new seeder class\r\n  make:test            Create a new test class\r\n migrate\r\n  migrate:fresh        Drop all tables and re-run all migrations\r\n  migrate:install      Create the migration repository\r\n  migrate:refresh      Reset and re-run all migrations\r\n  migrate:reset        Rollback all database migrations\r\n  migrate:rollback     Rollback the last database migration\r\n  migrate:status       Show the status of each migration\r\n notifications\r\n  notifications:table  Create a migration for the notifications table\r\n package\r\n  package:discover     Rebuild the cached package manifest\r\n queue\r\n  queue:failed         List all of the failed queue jobs\r\n  queue:failed-table   Create a migration for the failed queue jobs database table\r\n  queue:flush          Flush all of the failed queue jobs\r\n  queue:forget         Delete a failed queue job\r\n  queue:listen         Listen to a given queue\r\n  queue:restart        Restart queue worker daemons after their current job\r\n  queue:retry          Retry a failed queue job\r\n  queue:table          Create a migration for the queue jobs database table\r\n  queue:work           Start processing jobs on the queue as a daemon\r\n route\r\n  route:cache          Create a route cache file for faster route registration\r\n  route:clear          Remove the route cache file\r\n  route:list           List all registered routes\r\n schedule\r\n  schedule:run         Run the scheduled commands\r\n session\r\n  session:table        Create a migration for the session database table\r\n storage\r\n  storage:link         Create a symbolic link from \"public/storage\" to \"storage/app/public\"\r\n vendor\r\n  vendor:publish       Publish any publishable assets from vendor packages\r\n view\r\n  view:clear           Clear all compiled view files\r\n```',2,100,'2019-03-10 09:41:28','2020-01-27 03:03:33'),(232,'## 自用笔记本项目\r\n### 项目github地址\r\n网址:  https://github.com/andy-love-coding/note\r\nssh:  git clone git@github.com:andy-love-coding/note.git note_backup',22,100,'2019-03-10 09:50:19','2019-03-26 02:39:40'),(233,'### 安装项目\r\n#### 做好准备\r\n```\r\n> cd ~/Homestead && vagrant up\r\n> vagrant ssh\r\n```\r\n进入虚拟机Code文件夹\r\n```\r\ncd ~/Code\r\n```\r\n#### Composer 加速\r\n在创建项目之前，我们先在虚拟机中运行以下命令来实现 Composer 安装加速 ：\r\n```\r\n$ composer config -g repo.packagist composer https://packagist.phpcomposer.com\r\n```\r\n#### 安装 NOTE 应用\r\n```\r\n$ cd ~/Code\r\n$ git clone git@github.com:andy-love-coding/hello_laravel.git note_backup\r\n$ cd larabbs\r\n$ composer install\r\n$ cp .env.example .env\r\n```\r\n#### 修改 hosts\r\n```\r\n> subl /etc/hosts  // mac\r\n> subl C:/Windows/System32/Drivers/etc/hosts  // windows\r\n```\r\n在hosts文件中加入一行配置\r\n```\r\n192.168.10.10   note.backup.test\r\n```\r\n#### 新增站点\r\n```\r\n> subl ~/Homestead/Homestead.yaml\r\n```\r\n修改内容如下：\r\n```\r\nip: \"192.168.10.10\"\r\nmemory: 2048\r\ncpus: 1\r\nprovider: virtualbox\r\n\r\nauthorize: ~/.ssh/id_rsa.pub\r\n\r\nkeys:\r\n    - ~/.ssh/id_rsa\r\n\r\nfolders:\r\n    - map: ~/Code\r\n      to: /home/vagrant/Code\r\n\r\nsites:\r\n    - map: homestead.app\r\n      to: /home/vagrant/Code/Laravel/public\r\n    - map: note.backup.test # <--- 这里\r\n      to: /home/vagrant/Code/note_backup/public # <--- 这里\r\n\r\ndatabases:\r\n    - homestead\r\n    - note_backup # <--- 这里\r\n\r\nvariables:\r\n    - key: APP_ENV\r\n      value: local\r\n```\r\n#### 重启虚拟机\r\n在主机环境下\r\n```\r\n> cd ~/Homestead && vagrant provision && vagrant reload\r\n```\r\nvagrant provision 是命令 Vagrant 重新加载 Homestead.yaml 配置；\r\nvagrant reload 是重启虚拟机使更改生效\r\n\r\n#### .env 文件\r\n```\r\nDB_DATABASE=note_backup\r\n```\r\n#### 初始化项目命令\r\n生成APP_KEY\r\n```\r\n$ cd ~/Code/larabbs\r\n$ php artisan key:generate\r\n$ php artisan migrate --seed    // 这一命令，会将初始化数据库\r\n```\r\n#### 浏览项目\r\n地址栏打开：http://note.test',22,100,'2019-03-10 09:56:08','2019-03-26 03:12:13'),(234,'## 项目数据备份与还原\r\n### ubuntu系统中备份mysql\r\n[table1 table2]省略则备份所有表\r\n备份输出也可以指定路径\r\n```php\r\n$ mysqldump -uusername -p dbname [table1 table2] > BackupName.sql\r\n```\r\n### ubuntu系统中还原mysql\r\n记得要退出 mysql 登录，在操作系统中执行以下命令，可不要在mysql登录状态（即 mysql>）执行还原命令。\r\n```php\r\n$ mysql -uhomestead -p note_backup < Code/note.backup.sql;\r\n```',22,100,'2019-03-10 10:14:25','2019-03-10 10:14:25'),(235,'### js对象\r\n#### 对象添加属性的2种方法\r\n```\r\nvar obj = {};\r\n// 第一种：. 后直接加属性\r\nobj.name = \"jack\";\r\n// 第二种：[ ] 中加属性\r\nobj[\"age\"] = 19;\r\n// 最后 obj = { name: \"jack\", age: 19}\r\n```\r\n#### 遍历对象\r\n```\r\nvar form = {\r\n	username: \' \',\r\n	password: \' \',\r\n	email: \' \',\r\n	mobile: \' \'\r\n}\r\n// 清空表单内容（特别注意：此处for循环遍历对象，key前面要加var声明，否则报错）\r\nfor (var key in form) {\r\n	form[key] = \' \'\r\n}\r\n```\r\n#### 判断对象为空的方法\r\n```\r\nvar d = {};\r\nvar e = {id:111};\r\nif(d.id){ console.log(8);}\r\nif(e.id){ console.log(9);}\r\n结果为：9\r\n```',8,100,'2019-03-10 11:50:14','2019-04-17 14:20:36'),(236,'## 前端学习资源\r\n前端常用技术栈：https://www.awesomes.cn/\r\n## 选择器回顾练习\r\n![VQ3N3a.png](https://t1.picb.cc/uploads/2019/03/12/VQ3N3a.png)\r\n```\r\n需求：\r\n\r\n1. 属性diff值为red的li元素文字红色\r\n\r\n2. 选中第三个li元素文字红色\r\n\r\n3. 选中第二列所有的li元素文字绿色\r\n\r\n4. 选中倒数的四个li元素为粉色\r\n\r\n5. 鼠标经过第10个li元素旋转360度动画2s\r\n\r\n6. 第20个li元素背景颜色做周期4s的（白到蓝）渐变动画不停止，鼠标经过停止\r\n```\r\n代码：http://note.test/articles/25#%E9%80%89%E6%8B%A9%E5%99%A8%E5%9B%9E%E9%A1%BE%E7%BB%83%E4%B9%A0',24,100,'2019-03-11 06:57:04','2019-03-19 08:43:30'),(237,'## 选择器回顾练习\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n\r\n        ul {\r\n            list-style: none;\r\n            margin: 0;\r\n            padding: 0;\r\n            border-top: 1px solid #ccc;\r\n            border-left: 1px solid #ccc;\r\n            width: 480px;\r\n            height: 400px;\r\n        }\r\n\r\n        li {\r\n            width: 80px;\r\n            height: 80px;\r\n            float: left;\r\n            border-bottom: 1px solid #ccc;\r\n            border-right: 1px solid #ccc;\r\n            box-sizing: border-box;\r\n            text-align: center;\r\n            line-height: 80px;\r\n        }\r\n\r\n        /*1. 属性diff值为red的li元素文字红色*/\r\n        /*CSS3选择器  属性选择器*/\r\n        li[diff=\"red\"]{\r\n            color: red;\r\n        }\r\n        /*[attrName] 选中属性名称为attrName的元素*/\r\n        /*[attrName=attrValue] 选中属性名称为attrName且属性值为attrValue的元素*/\r\n        /*[attrName^=attrValue] 选中属性名称为attrName且属性值以attrValue开头的元素*/\r\n        /*[attrName$=attrValue] 选中属性名称为attrName且属性值以attrValue结尾的元素*/\r\n        /*[attrName*=attrValue] 选中属性名称为attrName且属性值包含attrValue的元素*/\r\n        /*注意：css不支持的选择器  但是jquery支持 提供了扩展*/\r\n        /*[attrName!=attrValue] 选中属性名称为attrName且属性值包含attrValue的元素*/\r\n\r\n\r\n        /*2. 选中第三个li元素文字红色*/\r\n        li:nth-child(3){\r\n            color: red;\r\n        }\r\n        /*CSS3选择器  伪类序号选择器*/\r\n        /*步骤：*/\r\n        /*1. li去找到父元素*/\r\n        /*2. 再去找到所有的子元素*/\r\n        /*3. 再去找到第三个子元素*/\r\n        /*4. 判断是否是li元素*/\r\n        /*5. 如果是 选中即可*/\r\n        /*6. 如果不是 无效选择器*/\r\n        /*注意：子元素中不能有其他类型的元素*/\r\n\r\n        /*E:first-child*/\r\n        /*E:last-child*/\r\n        /*E:nth-child(n) 括号内终止的值的取值范围：正整数*/\r\n        /*E:nth-child(公式) 例如 2n+1  n取值范围：自然数 0  1 2 3 */\r\n        /*E:nth-last-child()*/\r\n\r\n        /*3. 选中第二列所有的li元素文字绿色*/\r\n        /*注意：公式必须 N 提前*/\r\n        li:nth-child(6n-4){\r\n            color: green;\r\n        }\r\n        /*odd even*/\r\n        /*li:nth-child(even){\r\n            color: red;\r\n        }*/\r\n\r\n        /*4. 选中倒数四个li元素为粉色*/\r\n        li:nth-last-child(-n + 4){\r\n            color: pink;\r\n        }\r\n\r\n        /*5. 鼠标经过第10个li元素旋转360度动画2s*/\r\n        li:nth-child(10):hover{\r\n            /*转换属性*/ /*转换的方式*/\r\n            transform: rotate(360deg);\r\n            /*width: 200px;*/\r\n            /*过渡属性*/\r\n            /*transition: all 2s ease 0s;*/\r\n            transition-property: transform;\r\n            transition-duration: 2s;\r\n            transition-timing-function: cubic-bezier(0.25, 0.1, 0.21, 1.04);\r\n            transition-delay:0s;\r\n        }\r\n\r\n        /*转换*/\r\n        /*属性名称：transform*/\r\n        /*转换的方式：rotate() 2d旋转  单位deg*/\r\n        /*转换的方式：scale(1.5)  scale(1,1.5) x轴方向的缩放 y轴方向的缩放  2d缩放*/\r\n        /*转换的方式：translate(100px,100px) x轴正方向的位移 y轴正方向的位移 */\r\n        /*转换的方式：skew(x,y) x轴正方向的倾斜  y轴正方向的倾斜 单位deg*/\r\n        /*以上都是特殊的转换方式  四个转换的方式已经够用*/\r\n        /*基于matrix矩阵 公式*/\r\n\r\n        /*过渡*/\r\n        /*属性名称：transition*/\r\n        /*属性值：需要过渡的属性 过渡执行的时间 过渡的动画函数 延时的时间*/\r\n        /*组合写法：transition: all 2s ease 0s*/\r\n        /*拆分写法：*/\r\n        /*需要过渡的属性：transition-property:all*/\r\n        /*过渡执行的时间 transition-duration: 2s;*/\r\n        /*过渡的动画函数 transition-timing-function: ease;*/\r\n        /*延时的时间 transition-delay:0s;*/\r\n        /*注意：all 所有的属性可以做过渡  指定特定的属性*/\r\n        /*注意：ease 默认的动画速度 linear ease-in ease-out ease-in-out */\r\n        /*其他的速度表达公式：贝塞尔曲线 */\r\n\r\n        /*6. 第20个li元素背景颜色做周期4s的（白到蓝）渐变动画不停止，鼠标经过停止*/\r\n        li:nth-child(20){\r\n            /*调用*/\r\n            /*animation: colorChange 4s ease 0s infinite alternate running;*/\r\n            animation-name: colorChange;\r\n            animation-duration: 4s;\r\n            animation-timing-function: steps(4);\r\n            animation-delay: 0s;\r\n            animation-iteration-count: infinite;\r\n            animation-direction: alternate;\r\n            animation-play-state: running;\r\n            /*动画结束后的状态*/\r\n            animation-fill-mode: forwards;\r\n        }\r\n        li:nth-child(20):hover{\r\n            animation-play-state: paused;\r\n        }\r\n        /*动画*/\r\n        /*动画属性：animation*/\r\n        /*组合写法: animation: colorChange 4s ease 0s infinite alternate running;*/\r\n        /*拆分写法：*/\r\n        /*动画序列的名字：animation-name*/\r\n        /*动画执行的时间：animation-duration*/\r\n        /*动画执行速度：animation-timing-function*/\r\n        /*动画延时：animation-delay*/\r\n        /*动画的执行次数：animation-iteration-count  infinite 无穷次*/\r\n        /*动画播放的方向：animation-direction 默认正方形播放 alternate 方向交替的播放（运行逆播放）*/\r\n        /*动画播放状态： animation-play-state 默认running 暂停 paused*/\r\n        /*动画结束状态：保持结束状态 forwards  回到起始状态 backwards 默认*/\r\n\r\n        /*注意：*/\r\n        /*1. 逆播放也算在播放次数内 */\r\n        /*2. steps(4) 分步去执行  但是没有动画  也是一种动画的函数 */\r\n\r\n        /*动画序列：*/\r\n        /*@keyframes 动画序列的名称 {\r\n            !*定义节点*!\r\n            from{} 0%{}\r\n            50%{}\r\n            to{}  100%{}\r\n        }*/\r\n        @keyframes colorChange {\r\n            from{\r\n                background: white;\r\n            }\r\n            to{\r\n                background: blue;\r\n            }\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n<ul>\r\n    <li>第1个li</li>\r\n    <li>第2个li</li>\r\n    <li>第3个li</li>\r\n    <li>第4个li</li>\r\n    <li>第5个li</li>\r\n    <li>第6个li</li>\r\n    <li>第7个li</li>\r\n    <li>第8个li</li>\r\n    <li>第9个li</li>\r\n    <li>第10个li</li>\r\n    <li>第11个li</li>\r\n    <li>第12个li</li>\r\n    <li>第13个li</li>\r\n    <li>第14个li</li>\r\n    <li>第15个li</li>\r\n    <li>第16个li</li>\r\n    <li>第17个li</li>\r\n    <li>第18个li</li>\r\n    <li>第19个li</li>\r\n    <li>第20个li</li>\r\n    <li>第21个li</li>\r\n    <li>第22个li</li>\r\n    <li>第23个li</li>\r\n    <li diff=\"red\">第24个li</li>\r\n    <li>第25个li</li>\r\n    <li>第26个li</li>\r\n    <li>第27个li</li>\r\n    <li>第28个li</li>\r\n    <li>第29个li</li>\r\n    <li>第30个li</li>\r\n</ul>\r\n<p>需求：</p>\r\n<p>1. 属性diff值为red的li元素文字红色</p>\r\n<p>2. 选中第三个li元素文字红色</p>\r\n<p>3. 选中第二列所有的li元素文字绿色</p>\r\n<p>4. 选中倒数三个li元素为粉色</p>\r\n<p>5. 鼠标经过第10个li元素旋转360度动画2s</p>\r\n<p>6. 第20个li元素背景颜色做周期4s的（白到蓝）渐变动画不停止，鼠标经过停止</p>\r\n</body>\r\n</html>\r\n```',25,100,'2019-03-11 06:58:46','2019-03-11 07:29:31'),(238,'## H5的新特新\r\nH5开发，泛指html、css、js方向上的技术提升，提高开发效率。\r\n\r\n------------\r\n\r\n### html 更新\r\n#### 新增语义标签 （html5shiv）\r\n	1.跟div一样的，只是带有语言\r\n	2.并对seo友好\r\n	3.页面结构清晰，阅读性好\r\n	4.不支持IE低版本浏览器（IE 6 7 8）, 不支持的原因是：它把这些块级元素当做了普通的行内元素\r\n	5.解决IE低版本兼容问题：用插件来时IE低版本支持h5语义标签\r\n	6.h5语义标签兼容IE低版本插件下载地址：https://github.com/aFarkas/html5shiv\r\n	7.html5shiv 插件的使用\r\n```\r\n// 必须在页面头部引入 html5shiv 的js文件，这样就就可以兼容IE低版本支持语义标签了\r\n<!--[if lt IE 9]>\r\n	<script src=\"html5shiv.min.js\"></script>\r\n<![endif]-->\r\n```\r\n语义标签列举如下：\r\n```\r\n<!--[if lt IE 9]>\r\n	<h1>您的浏览器版本过低，请升级</h1>\r\n<![endif]-->\r\n<header>\r\n	<nav><nav>\r\n</header>\r\n<section>\r\n	<aside></aside>\r\n	<article></article>\r\n</section>\r\n<footer></footer>\r\n```\r\n#### 条件注释\r\n上面的语义标签兼容IE低版本时，用到了条件注释\r\n```\r\n// 当小于 IE 9 版本时，加载插件。lt 小于，gt 大于，lte 小于等于，gte 大于等于\r\n<!--[if lt IE 9]>\r\n	<script src=\"html5shiv.min.js\"></script>\r\n<![endif]-->\r\n```\r\n#### 表单类型更新\r\n```\r\n<input tpye=\"text\">\r\n<input tpye=\"password\">\r\n<input tpye=\"button\">\r\n<input tpye=\"reset\">\r\n<input tpye=\"submit\">\r\n<input tpye=\"text\">\r\n<input tpye=\"checkbox\">\r\n<input tpye=\"radio\">\r\n<input tpye=\"hidden\">\r\n<input tpye=\"image\">\r\n<input tpye=\"file\">\r\n<!-- 以上是以前的，以下是更新后的 -->\r\n<input tpye=\"email\">\r\n<input tpye=\"number\">\r\n<input tpye=\"tel\">\r\n<input tpye=\"search\">\r\n<input tpye=\"url\">\r\n// 以上几个新类型，在移动端换气软键盘时，会出现相适应的键盘，使得输入体验更好。比如：<input tpye=\"number\"> 会唤起数字键盘。\r\n<input tpye=\"date\">\r\n<input tpye=\"month\">\r\n<input tpye=\"week\">\r\n<input tpye=\"day\">\r\n<input tpye=\"color\">\r\n\r\n```\r\n#### 表单元素（新增datalist，输入联想）\r\n![VQaN3s.png](https://t1.picb.cc/uploads/2019/03/12/VQaN3s.png)\r\n新增datalist，用来存储数据，将其与input结合，可以实现输入联想功能，即在下拉选择框中选择时，能够输入联想，当数据较多是，可以快速选中想要的。\r\n```\r\n<input type=\"text\" list=\"list\">\r\n<datalist id=\"list\">\r\n	<option value=\"java\">java</option>\r\n	<option value=\"javascript\">javascript</option>\r\n	<option value=\"c++\">c++</option>\r\n	<option value=\"web\">web</option>\r\n</datalist>\r\n```\r\n#### 表单属性（required/form）\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<form id=\"form1\" action=\"http://www.baidu.com\" method=\"get\"  novalidate>\r\n    <input name=\"username\"  type=\"text\" required autocomplete=\"off\">\r\n    <input name=\"email\"  type=\"email\">\r\n    <input type=\"submit\" value=\"提交\">\r\n</form>\r\n<input type=\"text\" name=\"other\" form=\"form1\">\r\n<!--\r\n1. form表单属性\r\n1.1 action  提交地址\r\n1.2 自动完成功能 autocomplete off|on  控制整个表单内的元素\r\n1.3 novalidate 忽略自身的H5方式的检验，因为每个浏览器数据校验的提示UI不尽相同，如果要自定义校验提示UI，就要关闭表单数据校验功能\r\n\r\n2. 表单元素属性\r\n2.1 required H5的检验  必填校验\r\n2.2 自动完成功能 autocomplete off|on，控制单个表单元素\r\n2.3 form 属性用来关联一个表单，这个表单提交时，就能把这个表单元素的内容一块进行提交了。\r\n-->\r\n</body>\r\n</html>\r\n```\r\n------------\r\n\r\n`css`更新：选择器、转换、过渡、动画、圆角、阴影、渐变\r\n`圆角` 以前做圆角，只能通过切图，现在H5直接可以做圆角\r\n\r\n------------\r\n\r\n### js更新（dom扩展）\r\n本地存储(cookie)、历史记录、自定义播放器、拖拽上传、canvas画图\r\n#### H5获取元素\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<section>\r\n    <div id=\"box\" class=\"box\">我是一个div 1</div>\r\n    <div  id=\"box\" class=\"box\">我是一个div 2</div>\r\n</section>\r\n<script>\r\n    // 原生获取元素\r\n    var div = document.getElementsByTagName(\'div\')[0];\r\n    var box = document.getElementsByClassName(\'box\')[0];\r\n    var box = document.getElementById(\'box\');\r\n	\r\n    //jquery  $(\'选择器\')\r\n	var div = $(\'#box\')[0];\r\n	var div = $(\'.box\')[0];\r\n	var div = $(\'div\')[0];\r\n	\r\n	//  H5  querySelector(\'选择器\') querySelectorAll(\'选择器\') 【在移动端支持很好，可以放心使用，pc端可能有兼容问题】\r\n\r\n   var div = document.querySelector(\'#box\');\r\n   var div = document.querySelector(\'.box\');\r\n   var div = document.querySelector(\'div\');\r\n\r\n    //querySelector 只能获取一个 符合条件的第一个元素\r\n    //querySelectorAll 获取所有符合条件的元素\r\n    var div2 = document.querySelector(\'div:last-child\'); // eq last first visible hidden jquery扩展选择器是css中不支持， 只能使用 css 有效选择器\r\n    /* Failed to execute \'querySelector\' on \'Document\': \'div:eq(1)\' is not a valid selector*/\r\n    console.log(div2);\r\n\r\n    var divList = document.querySelectorAll(\'div\');\r\n    console.log(divList);\r\n\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n#### H5操作类名\r\nclassList 操作类名不能链式调用。\r\n常用方法：add、remove、toggle、contains\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .bg {\r\n            background: green;\r\n        }\r\n\r\n        .color {\r\n            color: red;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"bg color\">我是DIV</div>\r\n<button class=\"btn1\">删除类bg</button>\r\n<button class=\"btn2\">添加类bg</button>\r\n<button class=\"btn3\">切换类bg</button>\r\n<button class=\"btn4\">判断是否类bg</button>\r\n<script>\r\n    var div = document.querySelector(\'div\');\r\n    /*jquery 操作类的方法*/\r\n    /*addClass() removeClass() toggleClass() hasClass()*/\r\n\r\n	// H5 用dom元素的 classList 对象的原生链方法来操作 元素的类名。\r\n	// classList 对象  包含信息  class属性的值 value   0:bg 1:color 描述使用了几个类型\r\n    // add() remove() toggle() contains()\r\n\r\n    document.querySelector(\'.btn1\').onclick = function (ev) {\r\n        div.classList.remove(\'bg\');\r\n    }\r\n    document.querySelector(\'.btn2\').onclick = function (ev) {\r\n        div.classList.add(\'bg\');\r\n    }\r\n    document.querySelector(\'.btn3\').onclick = function (ev) {\r\n        div.classList.toggle(\'bg\');\r\n    }\r\n    document.querySelector(\'.btn4\').onclick = function (ev) {\r\n        console.log(div.classList.contains(\'bg\'));\r\n    }\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n#### H5自定义属性\r\njQuery获取自定义属性：`$(\".box\").data(\"userName\");`\r\n原生dom获取自定义属性：`document.querySelector(\'.box\').dataset.userName;`\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>abc</title>\r\n</head>\r\n<body>\r\n<div class=\"box\" title=\"box element\" abc data-user-name=\"tony\" data-age=\"10\" data-pass-word=\"123456\">box</div>\r\n<srcipt>\r\n	var box = document.querySelector(\'.box\');\r\n	console.log(box.dataset.userName);\r\n	box.dataset.userName = \'andy\';\r\n</script>\r\n<!--自定义属性：-->\r\n<!--1. 什么是自定义属性？ 自己瞎写的就是自定义属性-->\r\n<!--2. 非标准属性（不是 class type name title ... ）  就是自定义属性-->\r\n<!--以前-->\r\n<!--H5对自定义属性有了新的规范-->\r\n<!--1. data-开始的属性 才是自定义属性-->\r\n<!--2. 操作自定义属性  box.dataset 获取所有的自定义属性 返回的是一个集合 对象-->\r\n<!--3. 获取(box.dataset.userName|[\'属性名称\'])还是设置(box.dataset.userName|[\'属性名称\']=\'tom\') , 规则 遵循驼峰命名-->\r\n<!--4. 注意：不支持大小  即使写了也转成小写-->\r\n<!--5. 操作了自定义属性 其实就操作了dom元素-->\r\n</body>\r\n</html>\r\n```\r\n#### H5案例（导航或Tab切换）\r\n![VQxTOJ.png](https://t1.picb.cc/uploads/2019/03/13/VQxTOJ.png)\r\n##### 入口函数\r\n第一种： 等所有的资源加载完成\r\n```\r\nwindow.onload = function (ev) {}\r\n```\r\n第二种：等html结构加载完成（需要jQquery）\r\n```\r\n$(function(){})\r\n$(document).ready(function(){}); \r\n```\r\n第三种：等html结构加载完成 ( H5特性，在移动端没问题，pc端有兼容问题 在IE低版本浏览器不支持)\r\n```\r\ndocument.addEventListener(\'DOMContentLoaded\',function (evt) {}\r\n```\r\nH5案例（导航或Tab切换）代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .tab{\r\n            width: 400px;\r\n            height: 400px;\r\n            margin: 100px auto;\r\n        }\r\n        .tab nav{\r\n            width: 100%;\r\n            height: 50px;\r\n            line-height: 50px;\r\n            text-align: center;\r\n        }\r\n        .tab nav a{\r\n            float: left;\r\n            width: 25%;\r\n            height: 100%;\r\n            background: green;\r\n            color: #fff;\r\n            text-decoration: none;\r\n        }\r\n        .tab nav a.now{\r\n            background: hotpink;\r\n        }\r\n        .tab section{\r\n            width: 100%;\r\n            height: 350px;\r\n            background: #ccc;\r\n            display: none;\r\n        }\r\n        .tab section.active{\r\n            display: block;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"tab\">\r\n    <nav>\r\n        <a href=\"javascript:;\" data-id=\"sports\">体育新闻</a>\r\n        <a href=\"javascript:;\" data-id=\"china\">国内新闻</a>\r\n        <a href=\"javascript:;\" data-id=\"hot\">热点新闻</a>\r\n        <a href=\"javascript:;\" data-id=\"funny\">娱乐新闻</a>\r\n    </nav>\r\n    <section id=\"sports\">1体育新闻</section>\r\n    <section id=\"hot\">3热点新闻</section>\r\n    <section id=\"funny\">4娱乐新闻</section>\r\n    <section id=\"china\">2国内新闻</section>\r\n</div>\r\n<script>\r\n    /*1. 入口函数*/\r\n    /*window.onload = function (ev) {} 等所有的资源加载完成*/\r\n    /*$(function(){}) $(document).ready(function(){}); 等html结构加载完成*/\r\n    //DOMContentLoaded兼容问题 在IE低版本浏览器不支持  等html结构加载完成\r\n    document.addEventListener(\'DOMContentLoaded\',function (evt) {\r\n        var nav = document.querySelector(\'nav\');\r\n        /*2. 默认选中页签和对应的内容显示  第2个*/\r\n        var tabIndex = 1;//第2个\r\n        var initTab = nav.querySelectorAll(\'a\')[tabIndex];\r\n        //选中\r\n        initTab.classList.add(\'now\');\r\n        //对应的内容显示\r\n        var initContentId = initTab.dataset.id;\r\n        var initContent = document.querySelector(\'#\'+initContentId);\r\n        initContent.classList.add(\'active\');\r\n\r\n        /*3. 点击页签的是 切换当前样式  切换对应的内容显示隐藏*/\r\n        nav.onclick = function (e) {\r\n            /*获取当前点击的元素*/\r\n            var nowTab = e.target; //事件触发源\r\n            /*如果当前已经选中 终止程序的执行*/\r\n            if(nowTab.classList.contains(\'now\')) return;\r\n            /*如果没有选项*/\r\n            /*1. 去掉之前的选中的页签的now*/\r\n            var oldTab = nav.querySelector(\'a.now\');\r\n            oldTab.classList.remove(\'now\');\r\n            /*2. 给自己自己加上now*/\r\n            nowTab.classList.add(\'now\');\r\n            /*3. 隐藏之前的内容*/\r\n            var oldContentId = oldTab.dataset.id;\r\n            var oldContent = document.querySelector(\'#\'+oldContentId);\r\n            oldContent.classList.remove(\'active\');\r\n            /*4. 显示当前对应的内容*/\r\n            var nowContentId = nowTab.dataset.id;\r\n            var nowContent = document.querySelector(\'#\'+nowContentId);\r\n            nowContent.classList.add(\'active\');\r\n        }\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n### js更新（drag）\r\n#### drag 拖拽事件\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        div{\r\n            width: 100px;\r\n            height: 100px;\r\n            background: red;\r\n        }\r\n        .box2{\r\n            width: 200px;\r\n            height: 200px;\r\n            background: green;\r\n            position: absolute;\r\n            left: 150px;\r\n            top: 150px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- draggable=\"true\" 允许不能拖拽的元素可以拖拽-->\r\n<!-- 发现：拖拽的过程当中  禁止 符号  浏览器默认不允许你拖拽的元素放下-->\r\n<div class=\"box1\" draggable=\"true\">当前元素(拖拽的元素)</div>\r\n<div class=\"box2\">目标元素(目标盒子)</div>\r\n<script>\r\n    var div = document.querySelector(\'.box1\');\r\n    var div2 = document.querySelector(\'.box2\');\r\n    /*当前元素拖拽相关事件*/\r\n    div.addEventListener(\'drag\',function (ev) {\r\n        //console.log(\'当前元素：拖拽中...\');\r\n    });\r\n    div.addEventListener(\'dragstart\',function (ev) {\r\n        console.log(\'当前元素：拖拽开始\');\r\n    });\r\n    div.addEventListener(\'dragend\',function (ev) {\r\n        //console.log(\'当前元素：拖拽结束\');\r\n    });\r\n    div.addEventListener(\'dragleave\',function (ev) {\r\n        //console.log(\'当前元素：鼠标拖拽离开当前元素\');\r\n    });\r\n    /*目标元素拖拽相关事件*/\r\n    div2.addEventListener(\'dragenter\',function (ev) {\r\n        //console.log(\'目标元素：鼠标进入目标元素\')\r\n        ev.preventDefault();\r\n    });\r\n    div2.addEventListener(\'dragleave\',function (ev) {\r\n        //console.log(\'目标元素：鼠标离开目标元素\')\r\n    });\r\n    div2.addEventListener(\'dragover\',function (ev) {\r\n        //console.log(\'目标元素：鼠标目标元素移动\')\r\n        ev.preventDefault();\r\n    });\r\n    div2.addEventListener(\'drop\',function (ev) {\r\n        /*阻止浏览器默认行为(即不允许你放下拖拽的元素的行为)，并且在放下之前的事件(dragenter、dragover)中也要阻止浏览器默认行为*/\r\n        ev.preventDefault();\r\n        console.log(\'目标元素：松手投入\')\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n#### drag 拖拽上传\r\n![VQxsGd.png](https://t1.picb.cc/uploads/2019/03/13/VQxsGd.png)\r\nhtml文件\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box {\r\n            width: 200px;\r\n            height: 200px;\r\n            border: 5px dashed #ccc;\r\n            text-align: center;\r\n            line-height: 300px;\r\n            font-size: 20px;\r\n            color: #666;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!--文件数据名字：pic-->\r\n<!--同步上传-->\r\n<!--<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\r\n    <input type=\"file\" name=\"pic\">\r\n    <input type=\"submit\" value=\"UPLOAD\">\r\n</form>-->\r\n\r\n<!--异步上传-->\r\n<div class=\"box\">\r\n    拖拽到此处上传\r\n</div>\r\n<script>\r\n    var box = document.querySelector(\'.box\');\r\n    box.addEventListener(\'dragenter\',function (ev) {\r\n        ev.preventDefault();\r\n    });\r\n    box.addEventListener(\'dragover\',function (ev) {\r\n        ev.preventDefault();\r\n    });\r\n    box.addEventListener(\'drop\',function (ev) {\r\n        ev.preventDefault();\r\n\r\n        /*enctype=\"multipart/form-data\"*/\r\n        var formData = new FormData();\r\n        formData.append(\'pic\',ev.dataTransfer.files[0]);\r\n\r\n        /*开始上传*/\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\'post\',\'upload.php\');\r\n        //xhr.setRequestHeader(\'Content-Type\',\'application/x-www-form-urlencoded\');\r\n        xhr.send(formData);\r\n        /*xhr.onreadystatechange = function () {\r\n            if(xhr.readyState === 4){\r\n                if(xhr.status === 200){\r\n                    /!*监听上传成功*!/\r\n                }\r\n            }\r\n        }*/\r\n        // 监听上传成功，注意IE低版本不兼容此方法\r\n        xhr.onload = function () {\r\n            console.log(xhr.responseText);\r\n            //预览\r\n            var img = document.createElement(\'img\');\r\n            img.src = xhr.responseText;\r\n            document.querySelector(\'body\').appendChild(img);\r\n        }\r\n    });\r\n    /*注意*/\r\n    /*1. 异步提交文件数据的时候 需要formData格式*/\r\n    /*2. 不需要设置 请求头中的 类型*/\r\n    /*3. xhr.onload  监听请求成功的事件*/\r\n</script>\r\n</body>\r\n</html>\r\n```\r\nphp文件：upload.php\r\n```php\r\n<?php\r\n    $pic = $_FILES[\'pic\'];\r\n    //保存在服务端\r\n    //上传文件的临时路径  存放的路径\r\n    move_uploaded_file($pic[\'tmp_name\'],$pic[\'name\']);\r\n    echo $pic[\'name\'];\r\n```\r\n### 3D转换透视\r\n![VQ3Qsu.png](https://t1.picb.cc/uploads/2019/03/12/VQ3Qsu.png)\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box{\r\n            width: 200px;\r\n            height: 200px;\r\n            margin: 100px auto;\r\n            background: green;\r\n            position: relative;\r\n\r\n            /*注意：在开发当中 辅助观察3D效果*/\r\n            /*perspective: 200px;*/\r\n            /*真正意义的3D呈现*/\r\n            transform-style: preserve-3d;\r\n        }\r\n        .box > div{\r\n            width: 100%;\r\n            height: 100%;\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n        }\r\n        .front{\r\n            background: red;\r\n        }\r\n        .back{\r\n            background: green;\r\n            transform: rotateX(45deg) skew(-45deg,0);\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"box\">\r\n    <div class=\"front\"></div>\r\n    <div class=\"back\"></div>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n### 立方体\r\n![VQ3b6D.png](https://t1.picb.cc/uploads/2019/03/12/VQ3b6D.png)\r\n\r\n[![VQ3hd1.png](https://t1.picb.cc/uploads/2019/03/12/VQ3hd1.png)](https://www.picb.cc/image/VQ3hd1)\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <!--\r\n        需要构建一个正面朝外的立方体\r\n        1. 旋转的角度和旋转的方向的关系(对着轴的正方向看  顺时针旋转正角度 逆时针旋转负角度)\r\n        2. 旋转过后坐标轴也会发生旋转\r\n        3. z轴的正方向永远和正面一个方向\r\n    -->\r\n    <style>\r\n        .box{\r\n            width: 200px;\r\n            height: 200px;\r\n            margin: 100px auto;\r\n            position: relative;\r\n\r\n            /*perspective: 300px;*/\r\n            transform-style: preserve-3d;\r\n            /*为了观察*/\r\n            transform: rotateX(30deg) rotateY(-30deg);\r\n        }\r\n        .box > div{\r\n            width: 100%;\r\n            height: 100%;\r\n            position: absolute;\r\n            left: 0;\r\n            right: 0;\r\n            /*opacity: 0.5;*/\r\n            text-align: center;\r\n            line-height: 200px;\r\n        }\r\n        .box > div.front{\r\n            background: red;\r\n            transform: translateZ(100px);\r\n        }\r\n        .box > div.back{\r\n            background: green;\r\n            transform: rotateY(180deg) translateZ(100px);\r\n        }\r\n        .box > div.left{\r\n            background: blue;\r\n           /* transform: perspective(300px) rotateY(-45deg);\r\n            transition: all 4s;*/\r\n            transform: rotateY(-90deg) translateZ(100px);\r\n        }\r\n        .box > div.right{\r\n            background: pink;\r\n            transform: rotateY(90deg) translateZ(100px);\r\n        }\r\n        .box > div.top{\r\n            background: yellow;\r\n            transform: rotateX(90deg) translateZ(100px);\r\n        }\r\n        .box > div.bottom{\r\n            background: purple;\r\n            transform: rotateX(-90deg) translateZ(100px);\r\n        }\r\n        /*1.定义动画序列*/\r\n        @keyframes rotateAnimation {\r\n            from{}\r\n            to{\r\n                transform: rotateX(30deg) rotateY(-390deg);\r\n            }\r\n        }\r\n        /*2.调用动画序列*/\r\n        .animated{\r\n            animation: rotateAnimation 5s linear;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"box animated\">\r\n        <div class=\"front\">front</div>\r\n        <div class=\"back\">back</div>\r\n        <div class=\"left\">left</div>\r\n        <div class=\"right\">right</div>\r\n        <div class=\"top\">top</div>\r\n        <div class=\"bottom\">bottom</div>\r\n    </div>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-11 07:48:20','2019-04-18 13:02:52'),(239,'### 全屏切换插件 fullpage\r\ngithub下载地址：https://github.com/alvarotrigo/fullPage.js\r\n示例代码\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <link rel=\"stylesheet\" href=\"js/jquery.fullpage.min.css\">\r\n</head>\r\n<body>\r\n<!--1.引入 基于jquery-->\r\n<!--2.遵循约定 HTML section纵向滚动的容器  slide横向滚动的容器 active显示当前页-->\r\n<!--3.初始化-->\r\n<div class=\"container\">\r\n    <div class=\"section\">1</div>\r\n    <div class=\"section active\">2</div>\r\n    <div class=\"section\">3</div>\r\n    <div class=\"section\">4</div>\r\n    <div class=\"section\">5</div>\r\n</div>\r\n<script src=\"js/jquery.min.js\"></script>\r\n<script src=\"js/jquery.fullpage.min.js\"></script>\r\n<script>\r\n    $(function () {\r\n        $(\'.container\').fullpage();\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-11 09:35:01','2019-03-12 05:27:51'),(240,'## jquery\r\n### jQuery api 在线文档\r\n在线文档：http://jquery.cuishifeng.cn/',8,100,'2019-03-11 09:45:23','2019-03-12 05:42:25'),(241,'### 封装 jQuery 插件\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<img src=\"images/1.jpg\" alt=\"\">\r\n<script src=\"js/jquery.min.js\"></script>\r\n<!--\r\nattr是jquery本身支持的方法\r\nsrc 如果你实现了src方法  src可以认为是插件方法\r\n-->\r\n<script>\r\n    //$.fn 这是jquery提高的插件方法扩展入口\r\n    //extend 扩展的意思  传参 对象\r\n    // $.fn.extend({\r\n    //     src:function () {\r\n    //         //this 当前调用src方法的jquery对象\r\n    //         return this.attr(\'src\');\r\n    //     },\r\n    //     say:function () {\r\n    //         console.log(\'你好\');\r\n    //     }\r\n    // });\r\n    $.fn.src = function () {\r\n        return this.attr(\'src\');\r\n    }\r\n    $.fn.say = function () {\r\n        console.log(\'你好\');\r\n    }\r\n	\r\n	$(\'img\').src();\r\n	$(\'img\').say();\r\n</script>\r\n</body>\r\n</html>\r\n```',8,100,'2019-03-11 09:46:24','2019-03-11 09:47:32'),(242,'### 360 fullpage 案例\r\ngithub地址：https://github.com/andy-love-coding/360fullpage\r\ncss动画代码：https://github.com/andy-love-coding/360fullpage/blob/master/css/index.css\r\n\r\n**fullpage 配置选项**\r\n参考网址：http://www.jq22.com/jquery-info1124\r\n\r\njs代码如下：\r\n```\r\n$(function () {\r\n    $(\'.container\').fullpage({\r\n        /*进行配置  不同的配置项可以配置不同的工具*/\r\n        /*是否垂直居中*/\r\n        verticalCentered:false,\r\n        /*配置背景*/\r\n        sectionsColor:[\'#0da5d6\', \'#2AB561\', \'#DE8910\', \'#16BA9D\', \'#0DA5D6\'],\r\n        /*监听页面切换完成*/\r\n        afterLoad:function (link,index) {\r\n            var _this = this;\r\n            /*当前的屏幕*/\r\n            //$(\'.section\').eq(index-1);\r\n            //去掉所有的now\r\n            $(\'.section\').removeClass(\'now\');\r\n            //给当前的加上 适当的延时一点时间去做动画\r\n            setTimeout(function () {\r\n                $(_this).addClass(\'now\');\r\n            },300);\r\n        }\r\n    });\r\n});\r\n/*1.实现动画*/\r\n/*1.1 什么时候做动画*/\r\n/*答：当页面加载完成 切换完成*/\r\n/*jquery animate(p,s,e,fn) p 做动画属性{} 动画执行时间200ms 动画的速度(swing默认|linear) 动画执行完成回调函数*/\r\n/*1.2 怎么去做这些动画  过渡 动画*/\r\n/*1.3 怎么去同时控制多个动画 加类  类包含做动画的属性*/\r\n/* 答: 通过加 now 类名 */\r\n```',24,100,'2019-03-12 05:16:14','2019-03-12 08:03:27'),(243,'### 全屏操作方法\r\n**全屏操作API**\r\nNode.requestFullScreen() 开启全屏显示\r\nNode.cancelFullScreen() 关闭全屏显示\r\n\r\n> 注意：cancelFullScreen() 的调用时document\r\n\r\n**h5的api兼容问题**\r\n由于其兼容性原因，不同浏览器需要添加前缀如：\r\n—— webkit内核浏览器：webkitRequestFullScreen、webkitCancelFullScreen，如chrome浏览器。\r\n—— Gecko内核浏览器：mozRequestFullScreen、mozCancelFullScreen，如火狐浏览器。\r\ndocument.isFullScreen检测当前是否处于全屏\r\n—— 不同浏览器需要添加前缀\r\n—— document.webkitIsFullScreen、document.mozIsFullScreen\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box {\r\n            width: 100px;\r\n            height: 100px;\r\n            background: red;\r\n            /*css3属性*/\r\n            /*私有前缀*/\r\n            /*好处：让更多的浏览器支持我们的属性*/\r\n            border-radius: 50%;\r\n            -webkit-border-radius: 50%;\r\n            -moz-border-radius: 50%;\r\n            -o-border-radius: 50%;\r\n            -ms-border-radius: 50%;\r\n        }\r\n        /*.btn2{\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            z-index: 10000000000 !important\r\n        }*/\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n    <div class=\"box\"></div>\r\n    <button class=\"btn1\">全屏操作</button>\r\n    <button class=\"btn2\">取消全屏</button>\r\n</div>\r\n<script>\r\n    var box = document.querySelector(\'.container\');\r\n    document.querySelector(\'.btn1\').onclick = function () {\r\n        //全屏\r\n        //1. requestFullScreen 使用不成功 （这个方法确实是全屏API）\r\n        //2. 私有前缀\r\n        //2.1 H5的一些api是最新更新的，不一定所有的浏览器都支持\r\n        //2.2 单是有一些激进（积极）的浏览器厂商  会带上自己的厂商的标识\r\n        //2.3 就是给方法前加上前缀 ---> 厂商的标识 (私有前缀)\r\n        //2.4 谷歌|safari webkit  火狐 moz 欧朋 o IE ms\r\n        //兼容处理\r\n        if(box.webkitRequestFullScreen){\r\n            box.webkitRequestFullScreen()\r\n        }else if(box.mozRequestFullScreen){\r\n            box.mozRequestFullScreen();\r\n        }\r\n    };\r\n    document.querySelector(\'.btn2\').onclick = function () {\r\n        //全屏操作后 起始就相当于有一个遮罩层 提高层级可看到其他内容\r\n        //注意：由于浏览器的安全处理机制  禁用其他内容的事件\r\n        //解决方案：放到一个容器内\r\n        console.log(\'ok\');\r\n        /*取消全屏*/\r\n        //注意：取消全屏操作 一律交给document去执行\r\n        document.webkitCancelFullScreen()\r\n    }\r\n</script>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-12 07:32:48','2019-03-13 14:05:11'),(244,'## 策略\r\n笔记本技术选型：采用SaaS架构。理由是：5G普及，网速越来越快，云端操作体验大幅提升，云端存储提取也更方便。\r\n\r\n公共笔记本：先展示知识（seo优化吸引用户），大家共同编辑知识。公共笔记本免费使用，靠广告挣钱。\r\n私有笔记本：用户公共笔记本培养用户使用习惯，并倒流到私有笔记本（增值服务）。私有笔记本，收会员使用费，也可以放点广告。\r\n\r\n竞争策略：这是一个用了就离不开的产品，很容易形成高的竞争壁垒或者很宽的护城河。',26,100,'2019-03-13 07:45:59','2019-03-13 07:45:59'),(245,'### H5自定义视频播放器\r\n这里H5自定义播放器，主要讲解自定义播放器控制栏的布局和功能实现。\r\n为何要自定义浏览器(控制栏)呢？原因如下：\r\n如果直接使用H5的`<video src=\"./media/fun.mp4\"></video>`，会出现各个浏览器在UI层面表现不一致的情况。\r\n\r\n**注意**：autoplay自动播放，必须配合muted=\"false\"(静音)才能生效，` <video src=\"player/media/fun.mp4\" autoplay muted=\"false\"></video>`，即这也是为了提升用户体验。\r\n#### H5自定义视频播放器案例\r\ngithub地址：https://github.com/andy-love-coding/h5VideoPlayer\r\nhtml + js 代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title>视频播放</title>\r\n    <!--字体图标文件-->\r\n    <link rel=\"stylesheet\" href=\"css/font-awesome.css\"/>\r\n    <!--修饰视频播放器样式-->\r\n    <link rel=\"stylesheet\" href=\"css/player.css\"/>\r\n</head>\r\n<body>\r\n<!--多媒体语义标签-->\r\n<figure>\r\n    <!--多媒体区域的标题解释-->\r\n    <figcaption>视频播放器</figcaption>\r\n    <div class=\"player\">\r\n        <!--一开始隐藏，此时显示播放器div(player)的背景图，即加载效果图；当video加载到可以播放时，才显示video元素-->\r\n        <video src=\"./media/fun.mp4\"></video>\r\n        <!--自定义控制栏-->\r\n        <div class=\"controls\">\r\n            <!-- 开始播放按钮  -->\r\n            <a href=\"javascript:;\" class=\"switch fa fa-play\"></a>\r\n            <!-- 进度显示区域 -->\r\n            <div class=\"progress\">\r\n                <!--进度显示条-->\r\n                <div class=\"line\"></div>\r\n                <!--默认的灰色进度条-->\r\n                <div class=\"bar\"></div>\r\n            </div>\r\n            <!--时间区域-->\r\n            <div class=\"timer\">\r\n                <span class=\"current\">00:00:00</span> / <span class=\"total\">00:00:00</span>\r\n            </div>\r\n            <!--全屏按钮 取消全屏按钮-->\r\n            <a href=\"javascript:;\" class=\"expand fa fa-arrows-alt\"></a>\r\n        </div>\r\n    </div>\r\n    <input type=\"text\" class=\"dm\">\r\n    <button class=\"send\">发射</button>\r\n</figure>\r\n<script src=\"js/jquery.min.js\"></script>\r\n<script>\r\n    $(function () {\r\n        //公用方法\r\n        var formatTime = function (time) {\r\n            var h = Math.floor(time / 3600); // 10  01\r\n            var m = Math.floor(time % 3600 / 60);\r\n            var s = Math.floor(time % 60);\r\n            return (h < 10 ? \'0\' + h : h) + \':\'+(m < 10 ? \'0\' + m : m)+\':\'+(s < 10 ? \'0\' + s : s);\r\n        };\r\n\r\n        var $player = $(\'.player\');\r\n\r\n        /*视频元素*/\r\n        var $video = $(\'video\');\r\n        //H5更新的api都是DOM元素使用的 原生的JS\r\n        var video = $video[0]; //转dom  $video.get(0)\r\n\r\n        /*1. 完成视频的加载效果 */\r\n        var $total = $(\'.total\');\r\n        video.oncanplay = function () {\r\n            //可以播放了\r\n            $video.show();\r\n            // video.play(); // 自动播放，有bug，不能自动播放，且报错了\r\n            /*6. 显示总播放时长*/\r\n            $total.html(formatTime(video.duration));\r\n        }\r\n\r\n        var $switch = $(\'.switch\');\r\n        /*2. 视频播放功能*/\r\n        /*3. 视频暂停功能*/\r\n        $switch.on(\'click\', function () {\r\n            if ($switch.hasClass(\'fa-play\')) {\r\n                video.play();\r\n                $switch.addClass(\'fa-pause\').removeClass(\'fa-play\');\r\n            } else {\r\n                video.pause();\r\n                $switch.removeClass(\'fa-pause\').addClass(\'fa-play\');\r\n            }\r\n        });\r\n\r\n        /*4. 当前播放的进度显示功能*/\r\n        /*进度=当前播放时间/总播放时间  进度条的宽度= 进度*100+‘%’ */\r\n        /*进度需要实时的展示给用户 */\r\n        var $line = $(\'.line\');\r\n        var $current = $(\'.current\');\r\n        video.ontimeupdate = function () {\r\n            //当前播放时间\r\n            var currentTime = video.currentTime;\r\n            //总的时间\r\n            var duration = video.duration;\r\n            var width = currentTime / duration * 100 + \'%\';\r\n            $line.css(\'width\', width);\r\n            /*5. 显示当前播放时间*/\r\n            /*转换成 时 分 标  4000 =>（01:06:40）*/\r\n            $current.html(formatTime(currentTime));\r\n        };\r\n\r\n        /*7. 全屏操作*//*8. 取消全屏操作*/\r\n        var $expand = $(\'.expand\');\r\n        $expand.on(\'click\',function () {\r\n            console.log(\'ok\');\r\n            if($expand.hasClass(\'fa-arrows-alt\')){\r\n                $player[0].webkitRequestFullScreen();\r\n                $expand.removeClass(\'fa-arrows-alt\').addClass(\'fa-compress\');\r\n            }else{\r\n                document.webkitCancelFullScreen();\r\n                $expand.addClass(\'fa-arrows-alt\').removeClass(\'fa-compress\');\r\n            }\r\n        });\r\n        //按下esc键也可以退出全屏 ，但是控制栏“全屏icon”还没有改变，需要继续操作来改变icon\r\n        //由于浏览器的安全处理机制  禁用按键esc事件，以下键盘监听事件无法执行\r\n        /*document.addEventListener(\'keydown\',function (ev) {\r\n            console.log(ev.keyCode);\r\n        });*/\r\n        /*那么换一种思路：监听页面发生尺寸改变  全屏变到非全屏*/\r\n        window.addEventListener(\'resize\',function (ev) {\r\n            /*全屏变到非全屏*/\r\n           /* console.log(document.webkitIsFullScreen);*/\r\n            if(!document.webkitIsFullScreen){\r\n                //监听到了按下ESC\r\n                $expand.addClass(\'fa-arrows-alt\').removeClass(\'fa-compress\');\r\n            }\r\n        });\r\n\r\n        /*9. 跃进功能*/\r\n        var $bar = $(\'.bar\');\r\n        /*点击进度条 根据点击的位置和进度条的宽度做比较  等到比例*/\r\n        /*通过比例可以计算  你要跳跃的哪个播放时间点= 比例 * 总时间 */\r\n        /*设置当前的播放时间*/\r\n        /*注意：file：// 视频加载完成*/\r\n        $bar.on(\'click\',function (e) {\r\n            var offsetX = e.offsetX;\r\n            var width = $bar.width();\r\n            var ratio = offsetX / width;\r\n            var currentTime = video.duration * ratio;\r\n            /*设置当前播放时间*/\r\n            video.currentTime = currentTime;\r\n        });\r\n\r\n        /*10. 播放结束重置*/\r\n        video.onended = function () {\r\n            //播放时间置为0\r\n            video.currentTime = 0;\r\n            $switch.removeClass(\'fa-pause\').addClass(\'fa-play\');\r\n        }\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```\r\ncss 代码：\r\n```\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: \'microsoft yahei\', \'Helvetica\', simhei, simsun, sans-serif;\r\n    background-color: #F7F7F7;\r\n}\r\na {\r\n    text-decoration: none;\r\n}\r\nfigcaption {\r\n    font-size: 24px;\r\n    text-align: center;\r\n    margin: 20px;\r\n}\r\n.player {\r\n    width: 720px;\r\n    height: 360px;\r\n    margin: 0 auto;\r\n    border-radius: 4px;\r\n    background: #000 url(../images/loading.gif) center/300px no-repeat;\r\n    position: relative;\r\n    text-align: center;\r\n    overflow: hidden;\r\n}\r\n.player:-webkit-full-screen{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\nvideo {\r\n    display: none;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n}\r\n/*全屏操作后  自带的控制栏会显示  在显示的时候隐藏*/\r\nvideo::-webkit-media-controls {\r\n    display: none !important;\r\n}\r\n.controls {\r\n    width: 700px;\r\n    height: 40px;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    border-radius: 4px;\r\n    position: absolute;\r\n    left: 50%;\r\n    margin-left: -350px;\r\n    bottom: 5px;\r\n    /*比全屏的状态下的视频元素高*/\r\n    z-index: 100000000000;\r\n    opacity: 1;\r\n}\r\n.player:hover .controls {\r\n    opacity: 1;\r\n}\r\n/*播放/暂停*/\r\n.controls .switch {\r\n    display: block;\r\n    width: 20px;\r\n    height: 20px;\r\n    font-size: 20px;\r\n    color: #FFF;\r\n    position: absolute;\r\n    top: 11px;\r\n    left: 11px;\r\n}\r\n/*全屏按钮*/\r\n.controls .expand {\r\n    display: block;\r\n    width: 20px;\r\n    height: 20px;\r\n    font-size: 20px;\r\n    color: #FFF;\r\n    position: absolute;\r\n    right: 11px;\r\n    top: 11px;\r\n}\r\n/*进度条*/\r\n.progress {\r\n    width: 430px;\r\n    height: 10px;\r\n    border-radius: 3px;\r\n    overflow: hidden;\r\n    background-color: #555;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 16px;\r\n    left: 45px;\r\n}\r\n/*下载进度*/\r\n.progress .loaded {\r\n    width: 0;\r\n    height: 100%;\r\n    background-color: #999;\r\n}\r\n/*播放进度*/\r\n.progress .line {\r\n    width: 0;\r\n    height: 100%;\r\n    background-color: #FFF;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n.progress .bar {\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 1;\r\n}\r\n/*时间*/\r\n.timer {\r\n    height: 20px;\r\n    line-height: 20px;\r\n    position: absolute;\r\n    left: 490px;\r\n    top: 11px;\r\n    color: #FFF;\r\n    font-size: 14px;\r\n}\r\n```\r\n#### H5多媒体API\r\n音频和视频API一致\r\n方法\r\n\r\n| 方法             | 描述                   |\r\n| -------------- | -------------------- |\r\n| addTextTrack() | 向音频/视频添加新的文本轨道       |\r\n| canPlayType()  | 检测浏览器是否能播放指定的音频/视频类型 |\r\n| load()         | 重新加载音频/视频元素          |\r\n| play()         | 开始播放音频/视频            |\r\n| pause()        | 暂停当前播放的音频/视频         |\r\n\r\n属性\r\n\r\n\r\n| 属性                  | 描述                                   |\r\n| ------------------- | ------------------------------------ |\r\n| audioTracks         | 返回表示可用音轨的 AudioTrackList 对象          |\r\n| autoplay            | 设置或返回是否在加载完成后随即播放音频/视频               |\r\n| buffered            | 返回表示音频/视频已缓冲部分的 TimeRanges 对象        |\r\n| controller          | 返回表示音频/视频当前媒体控制器的 MediaController 对象 |\r\n| controls            | 设置或返回音频/视频是否显示控件（比如播放/暂停等）           |\r\n| crossOrigin         | 设置或返回音频/视频的 CORS 设置                  |\r\n| currentSrc          | 返回当前音频/视频的 URL                       |\r\n| currentTime         | 设置或返回音频/视频中的当前播放位置（以秒计）              |\r\n| defaultMuted        | 设置或返回音频/视频默认是否静音                     |\r\n| defaultPlaybackRate | 设置或返回音频/视频的默认播放速度                    |\r\n| duration            | 返回当前音频/视频的长度（以秒计）                    |\r\n| ended               | 返回音频/视频的播放是否已结束                      |\r\n| error               | 返回表示音频/视频错误状态的 MediaError 对象         |\r\n| loop                | 设置或返回音频/视频是否应在结束时重新播放                |\r\n| mediaGroup          | 设置或返回音频/视频所属的组合（用于连接多个音频/视频元素）       |\r\n| muted               | 设置或返回音频/视频是否静音                       |\r\n| networkState        | 返回音频/视频的当前网络状态                       |\r\n| paused              | 设置或返回音频/视频是否暂停                       |\r\n| playbackRate        | 设置或返回音频/视频播放的速度                      |\r\n| played              | 返回表示音频/视频已播放部分的 TimeRanges 对象        |\r\n| preload             | 设置或返回音频/视频是否应该在页面加载后进行加载             |\r\n| readyState          | 返回音频/视频当前的就绪状态                       |\r\n| seekable            | 返回表示音频/视频可寻址部分的 TimeRanges 对象        |\r\n| seeking             | 返回用户是否正在音频/视频中进行查找                   |\r\n| src                 | 设置或返回音频/视频元素的当前来源                    |\r\n| startDate           | 返回表示当前时间偏移的 Date 对象                  |\r\n| textTracks          | 返回表示可用文本轨道的 TextTrackList 对象         |\r\n| videoTracks         | 返回表示可用视频轨道的 VideoTrackList 对象        |\r\n| volume              | 设置或返回音频/视频的音量                        |\r\n\r\n事件\r\n\r\n| 事件             | 描述                     |\r\n| -------------- | ---------------------- |\r\n| abort          | 当音频/视频的加载已放弃时          |\r\n| canplay        | 当浏览器可以播放音频/视频时         |\r\n| canplaythrough | 当浏览器可在不因缓冲而停顿的情况下进行播放时 |\r\n| durationchange | 当音频/视频的时长已更改时          |\r\n| emptied        | 当目前的播放列表为空时            |\r\n| ended          | 当目前的播放列表已结束时           |\r\n| error          | 当在音频/视频加载期间发生错误时       |\r\n| loadeddata     | 当浏览器已加载音频/视频的当前帧时      |\r\n| loadedmetadata | 当浏览器已加载音频/视频的元数据时      |\r\n| loadstart      | 当浏览器开始查找音频/视频时         |\r\n| pause          | 当音频/视频已暂停时             |\r\n| play           | 当音频/视频已开始或不再暂停时        |\r\n| playing        | 当音频/视频在已因缓冲而暂停或停止后已就绪时 |\r\n| progress       | 当浏览器正在下载音频/视频时         |\r\n| ratechange     | 当音频/视频的播放速度已更改时        |\r\n| seeked         | 当用户已移动/跳跃到音频/视频中的新位置时  |\r\n| seeking        | 当用户开始移动/跳跃到音频/视频中的新位置时 |\r\n| stalled        | 当浏览器尝试获取媒体数据，但数据不可用时   |\r\n| suspend        | 当浏览器刻意不获取媒体数据时         |\r\n| timeupdate     | 当目前的播放位置已更改时           |\r\n| volumechange   | 当音量已更改时                |\r\n| waiting        | 当视频由于需要缓冲下一帧而停止        |',24,100,'2019-03-13 08:07:57','2019-03-13 14:19:18'),(246,'### 客户端存储\r\n#### cookie\r\n存储量：4k左右\r\n有效期：未设置（关闭浏览器失效） 设置有效期（有效期后才失效）\r\n数据格式：只能存字符串 建议存json\r\n请求是否携带：会\r\n操作方式：\r\n```\r\n获取：document.cookie 返回是字符串\r\n设置：\r\ndocument.cookie = \'key=nihao\'  （关闭浏览器失效）\r\ndocument.cookie = \'username=xcc&key=abc;Expires=\'+new Date(\'2020-01-01\'); （有效期后才失效）\r\n```\r\n#### sessionStorage\r\n存储量：5MB左右\r\n有效期：关闭浏览器失效 (注意： 在同一个窗口（或页面）下才可以共享数据)\r\n数据格式：只能存字符串 建议存json\r\n请求是否携带：不会\r\n操作方式：\r\n```\r\n获取sessionStorage的长度：window.sessionStorage.length\r\n根据对应的索引去获取对应sessionStorage的key的值：window.sessionStorage.key(索引);\r\n获取：sessionStorage.getItem(\'key\');\r\n设置：sessionStorage.setItem(\'key\',\'nihao\');\r\n删除：sessionStorage.removeItem(\'key1\')\r\n清空：sessionStorage.clear()\r\n```\r\n#### localStorage\r\n存储量：20MB左右\r\n有效期：永久  除非主动删除（可以多窗口（或页面）共享数据）\r\n数据格式：只能存字符串 建议存json\r\n请求是否携带：不会\r\n操作方式：\r\n```\r\n获取localStorage的长度：window.localStorage.length\r\n根据对应的索引去获取对应localStorage的key的值：window.localStorage.key(索引);\r\n获取：localStorage.getItem(\'key\');\r\n设置：localStorage.setItem(\'key\',\'nihao\');\r\n删除：localStorage.removeItem(\'key1\')\r\n清空：localStorage.clear()\r\n```\r\n#### 案例：搜索记录\r\n[![VQEFwD.png](https://t1.picb.cc/uploads/2019/03/14/VQEFwD.png)](https://www.picb.cc/image/VQEFwD)\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title>首页</title>\r\n    <style>\r\n        *{\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n        body{\r\n            margin-left: 300px;\r\n        }\r\n        ul{\r\n            list-style: none;\r\n        }\r\n        ul li,div{\r\n            width: 250px;\r\n            padding: 10px 0;\r\n            margin-left: 10px;\r\n            border-bottom: 1px dashed #ccc;\r\n            height: 20px;\r\n        }\r\n        a{\r\n            float: right;\r\n        }\r\n        input{\r\n            padding: 5px;\r\n            margin: 10px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<input type=\"search\" placeholder=\"输入搜索关键字\"/>\r\n<input type=\"button\" value=\"搜索\"/>\r\n<div><a href=\"javascript:;\">清空搜索记录</a></div>\r\n<ul>\r\n    <!--<li>没有搜索记录</li>\r\n        <li><span>手机</span><a href=\"javascript:;\">删除</a></li>\r\n        <li><span>手机</span><a href=\"javascript:;\">删除</a></li>\r\n        <li><span>手机</span><a href=\"javascript:;\">删除</a></li>\r\n        <li><span>手机</span><a href=\"javascript:;\">删除</a></li>\r\n        <li><span>手机</span><a href=\"javascript:;\">删除</a></li>-->\r\n</ul>\r\n<script src=\"jquery.min.js\"></script>\r\n<script>\r\n    /*1. 页面初始化的时候  根据存储的数据渲染搜索记录列表*/\r\n    /*1.1 获取数据  约定KEY  fullStack6  值的数据格式json [\"电脑\",\"手机\"]*/\r\n    var KEY = \'fullStack6\';\r\n    var dataStr = localStorage.getItem(KEY);  //如果没有数据是null\r\n    /*1.2 转换成js能使用的数据*/ /*短路与dataStr&&\'[]\' 短路或dataStr||\'[]\'*/\r\n    /*if(dataStr){\r\n        [];\r\n    }*/\r\n    /*if(!datStr){\r\n        [];\r\n    }*/\r\n    var list = JSON.parse(dataStr||\'[]\'); //注意：默认给一个[]数据\r\n    var render = function(){\r\n        /*1.3 根据数据转换成HTML渲染当页面*/\r\n        var html = \'\';\r\n        /*Array对象提供给的API*/\r\n        /*list.forEach(function (item,i) {\r\n        });*/\r\n        /*jquery供给的API*/\r\n        $.each(list,function (i, item) {\r\n            html += \'<li><span>\'+item+\'</span><a data-index=\"\'+i+\'\" href=\"javascript:;\">删除</a></li>\';\r\n        });\r\n        //没有数据\r\n        if(!html){\r\n            html += \'<li>没有搜索记录</li>\';\r\n        }\r\n        $(\'ul\').html(html);\r\n    };\r\n    //初始化默认渲染一次\r\n    render();\r\n\r\n    /*2. 点击搜索 追加当前输入框中的关键字到之前的存储数据当中  重新渲染列表*/\r\n    $(\'[type=\"button\"]\').on(\'click\',function () {\r\n        var key = $.trim($(\'[type=\"search\"]\').val());\r\n        if(!key){\r\n            alert(\'请输入搜索关键字\');\r\n            return;\r\n        }\r\n        //内存\r\n        list.push(key);\r\n        //本地存储\r\n        localStorage.setItem(KEY,JSON.stringify(list));\r\n        //重新渲染列表\r\n        render();\r\n        $(\'[type=\"search\"]\').val(\'\');\r\n    });\r\n    /*3. 点击删除 能删除对应的记录的关键字 重新渲染列表*/\r\n    $(\'ul\').on(\'click\',\'a\',function () { // 事件委托\r\n        //获取当前数据对应的索引\r\n        var index = this.dataset.index;  // this指定的a元素\r\n        //内存删除\r\n        list.splice(index,1);\r\n        //本地存储\r\n        localStorage.setItem(KEY,JSON.stringify(list));\r\n        //重新渲染列表\r\n        render();\r\n    });\r\n    /*4. 清空历史搜索   重新渲染列表*/\r\n    $(\'div > a\').on(\'click\',function () {\r\n        list = [];\r\n        //localStorage.setItem(KEY,JSON.stringify(list));\r\n        localStorage.removeItem(KEY);\r\n        //localStorage.clear(); //可以  但是不建议\r\n        //重新渲染列表\r\n        render();\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-13 08:08:02','2019-03-13 16:14:28'),(247,'### 地址栏历史记录\r\n#### 历史记录API\r\n**H5之前的历史记录API**\r\nhistory.back()  回到上一个浏览历史\r\nhistory.forward() 前进下一个浏览历史\r\nhistory.go()  根据传参切换浏览历史  -1 回退  1 前进\r\n\r\n------------\r\n\r\n\r\n**H5更新的历史记录API**\r\n`history.pushState(null,null,\'新的浏览地址\') ` 追加历史浏览记录(只是在地址栏最后追加了新地址)，历史记录数量增加了1条\r\n```\r\n原地址：https://github.com/andy-love-coding\r\n追加：history.pushState(null,null,\'my-app\');  // 追加相对地址（即最后一个路由地址）\r\n新网址：https://github.com/andy-love-coding/my-app   // 注意：只是追加了历史记录（地址栏发生了变化而已），但并没有跳转到新网址\r\n\r\n------------\r\n原地址：https://github.com/andy-love-coding/my-app/commits/master\r\n追加：history.pushState(null,null,\'/andy-love-coding\');  // 追加绝对地址\r\n新网址：https://github.com/andy-love-coding   // 注意：只是追加了历史记录（地址栏发生了变化而已），但并没有跳转到新网址\r\n```\r\n`history.replaceState(null,null,\'新的浏览地址\'); ` 替换当前的历史浏览记录，只是替换当前的地址，历史记录数量没有增加\r\n```\r\n原地址：https://github.com/andy-love-coding/my-app/commits/master\r\n替换：history.replaceState(null,null,\'api\'); // 替换相对地址（即最后一个路由地址）\r\n新网址：https://github.com/andy-love-coding/my-app/commits/api // 注意：只是替换了历史记录（地址栏发生了变化而已），但并没有跳转到新网址\r\n------------\r\n原地址：https://github.com/andy-love-coding/my-app/commits/master\r\n替换：history.replaceState(null,null,\'/api\'); // 替换绝对地址\r\n新网址：https://github.com/api  // 注意：只是替换了历史记录（地址栏发生了变化而已），但并没有跳转到新网址\r\n```\r\n`window.onpopstate = function(){}` 监听浏览历史记录切换事件（地址栏发生变化）\r\n#### 案例分享：淘宝搜索（历史记录）\r\n1.点击搜索的时候  是异步加载\r\n2.点击搜索的时候  更改地址栏（追加了历史记录）\r\n3.点击\"筛选项\"(追加了历史记录)，当切换浏览记录的时候  根据地址栏的改变重新渲染了内容（发现是异步渲染，浏览器那个刷新按钮没有刷新）\r\n##### 异步渲染\r\n通过js（ajax）请求数据再改变dom内容来渲染的页面，是异步渲染。\r\n异步渲染：不满足SEO\r\n\r\n4.但是淘宝又要支持SEO的话，就要同时支持 同步渲染，来支持SEO （查看有没有同步渲染的方法：刷新点击“筛选项”后的地址，看看与异步渲染的结果是相同，相同则代表异步渲染的同时，也做了同步渲染）\r\n##### 同步渲染\r\n直接通过网址加载出来的页面，是同步渲染\r\n同步渲染：通过服务端渲染来实现，即在追加了历史记录后，服务直接把渲染好的结果，返回给浏览器。\r\n#### 案例：同步渲染和异步渲染一起应用\r\n**案例github地址**：https://github.com/andy-love-coding/search_demo\r\n\r\n[![VQYgkv.png](https://t1.picb.cc/uploads/2019/03/14/VQYgkv.png)](https://www.picb.cc/image/VQYgkv)\r\n\r\n\r\n------------\r\n##### html模板与数据库准备\r\nhtml模板：index.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>搜索</title>\r\n    <style>\r\n        nav a {\r\n            padding: 5px;\r\n            color: #333;\r\n            text-decoration: none;\r\n            font-size: 12px;\r\n            margin-right: 20px;\r\n        }\r\n\r\n        nav a.now, nav a:hover {\r\n            background: #fa0;\r\n            color: #fff;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<h4>筛选项：</h4>\r\n<nav>\r\n    <a href=\"?tag=thinkPad\" data-tag=\"thinkPad\" class=\"<?php echo $returnData[\'tag\']==\'thinkPad\'?\'now\':\'\' ?>\">thinkPad</a>\r\n    <a href=\"?tag=apple\" data-tag=\"apple\"  class=\"<?php echo $returnData[\'tag\']==\'apple\'?\'now\':\'\' ?>\">apple</a>\r\n    <a href=\"?tag=dell\" data-tag=\"dell\"  class=\"<?php echo $returnData[\'tag\']==\'dell\'?\'now\':\'\' ?>\">dell</a>\r\n</nav>\r\n<h4>搜索结果：</h4>\r\n<ul>\r\n    <?php forEach($returnData[\'list\'] as $i => $item){ ?>\r\n    <li>\r\n        <p>名称：<?php echo $item[\'name\']?></p>\r\n        <p>价格：<?php echo $item[\'price\']?></p>\r\n    </li>\r\n    <?php } ?>\r\n</ul>\r\n<script src=\"js/jquery.min.js\"></script>\r\n<script src=\"js/index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n模拟数据库：data/db.php\r\n```\r\n<?php \r\n    /*header(\'Content-Type:text/html;charset=utf-8\');*/\r\n    /*模拟数据库数据*/\r\n    $data = array(\r\n        \'thinkPad\'=>array(\r\n            \'tag\'=>\'thinkPad\',\r\n            \'list\'=>array(\r\n                array(\'name\'=>\'ThinkPad T480S超薄i7处理器\',\'price\'=>\'10010\'),\r\n                array(\'name\'=>\'ThinkPad T480S超薄i5处理器\',\'price\'=>\'10001\'),\r\n                array(\'name\'=>\'ThinkPad T480S超薄i3处理器\',\'price\'=>\'10001\'),\r\n                array(\'name\'=>\'ThinkPad T480S超薄i1处理器\',\'price\'=>\'10000\')\r\n            )\r\n        ),\r\n        \'apple\'=>array(\r\n            \'tag\'=>\'apple\',\r\n            \'list\'=>array(\r\n                array(\'name\'=>\'apple T480S超薄i7处理器\',\'price\'=>\'10010\'),\r\n                array(\'name\'=>\'apple T480S超薄i5处理器\',\'price\'=>\'10001\'),\r\n                array(\'name\'=>\'apple T480S超薄i3处理器\',\'price\'=>\'10001\')\r\n            )\r\n        ),\r\n        \'dell\'=>array(\r\n            \'tag\'=>\'dell\',\r\n            \'list\'=>array(\r\n                array(\'name\'=>\'dell T480S超薄i7处理器\',\'price\'=>\'10010\'),\r\n                array(\'name\'=>\'dell T480S超薄i5处理器\',\'price\'=>\'10001\'),\r\n                array(\'name\'=>\'dell T480S超薄i3处理器\',\'price\'=>\'10001\'),\r\n                array(\'name\'=>\'dell T480S超薄i1处理器\',\'price\'=>\'10000\')\r\n            )\r\n        ),\r\n    );\r\n    /*获取数据的方法 根据tag*/\r\n    function getData($tag=\'thinkPad\'){\r\n        global $data;\r\n        return $data[$tag];\r\n    }\r\n?>\r\n```\r\n##### 同步渲染案例代码\r\nindex.php。浏览器请求每一个tag地址（即一个独立页面），获取数据，生成页面，浏览器地址栏会刷新。\r\n```\r\n<?php \r\n    header(\'Content-Type:text/html;charset=utf-8\');\r\n    /*根据地址栏传参 tag 分别渲染三个不同的页面*/\r\n    /*1. 获取数据库数据  模拟数据*/\r\n    require \'data/db.php\';\r\n    /*2. 获取地址栏传参 tag */\r\n    $tag = \'thinkPad\';\r\n    if(array_key_exists(\'tag\',$_GET)){\r\n        $tag = $_GET[\'tag\'];\r\n    }\r\n    /*3. 根据tag去获取对应的数据*/\r\n    $returnData = getData($tag);\r\n    /*4. 根据数据去渲染页面*/\r\n    //var_dump($returnData);\r\n    include \'index.html\';\r\n?>\r\n\r\n\r\n```\r\n##### 异步渲染案例代码\r\napi接口：api/query.php\r\n```\r\n<?php \r\n    header(\'Content-Type:application/json;charset=utf-8\');\r\n    /*根据地址栏传参 tag 分别渲染三个不同的页面*/\r\n    /*1. 获取数据库数据  模拟数据*/\r\n    require \'../data/db.php\';\r\n    /*2. 获取地址栏传参 tag */\r\n    $tag = \'thinkPad\';\r\n    if(array_key_exists(\'tag\',$_GET)){\r\n        $tag = $_GET[\'tag\'];\r\n    }\r\n    /*3. 根据tag去获取对应的数据*/\r\n    $returnData = getData($tag);\r\n    /*4. 响应前端json数据*/\r\n    echo json_encode($returnData);\r\n?>\r\n```\r\n异步渲染页面：js/index.js。浏览器地址栏不刷新，通过js请求数据渲染页面，并且js增加历史记录，切换历史记录（地址栏改变）时重新js渲染页面\r\n```\r\n$(function () {\r\n    /*渲染业务*/\r\n    var render = function(data){\r\n        /*筛选项*/\r\n        $(\'nav a[data-tag=\"\'+data.tag+\'\"]\').addClass(\'now\').siblings().removeClass(\'now\');\r\n        /*商品列表*/\r\n        var html = \'\';\r\n        data.list.forEach(function (item,i) {\r\n            html += \'<li>\';\r\n            html += \'<p>名称：\'+item.name+\'</p>\';\r\n            html += \'<p>价格：\'+item.price+\'</p>\';\r\n            html += \'</li>\';\r\n        });\r\n        $(\'ul\').html(html);\r\n    };\r\n    $(\'nav a\').on(\'click\',function () {\r\n        var _this = this;\r\n        /*业务*/\r\n        var tag = this.dataset.tag;\r\n        /*异步*/\r\n        $.ajax({\r\n            type:\'get\',\r\n            url:\'api/query.php\',\r\n            data:{tag:tag},\r\n            //dataType:\'json\',//强制转换后台数据为json\r\n            success:function (data) {\r\n                render(data);\r\n                //追加历史\r\n                history.pushState(null,null,$(_this).attr(\'href\'));\r\n            }\r\n        });\r\n        return false;\r\n    });\r\n    /*切换历史重新异步渲染页面*/\r\n    window.onpopstate = function (ev) {\r\n        var tag = \'thinkPad\';\r\n        var search = location.search;//获取的是地址栏传参\r\n        if(search){\r\n            tag = search.substring(1,search.length).split(\'=\')[1];\r\n        }\r\n        $.ajax({\r\n            type:\'get\',\r\n            url:\'api/query.php\',\r\n            data:{tag:tag},\r\n            //dataType:\'json\',//强制转换后台数据为json\r\n            success:function (data) {\r\n                render(data);\r\n            }\r\n        });\r\n    }\r\n});\r\n```',24,100,'2019-03-13 08:08:07','2019-03-14 07:57:14'),(248,'## 布局\r\n### 流式布局\r\n\r\n流式布局,就是百分比布局,也称非固定像素布局。\r\n通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充，像流动的液体一样\r\n这样的布局方式,是【移动web开发】使用的最常用布局方式。\r\n#### 京东布局案例\r\n案例地址：\r\n关键代码：\r\n\r\n### flex 弹性布局（伸缩布局）\r\nCSS3引入了一种新的布局模式——Flexbox布局，即伸缩布局盒模型（Flexible Box），用来提供一个更加有效的方式制定、调整和分布一个容器里项目布局，即使它们的大小是未知或者动态的，这里简称为Flex。\r\nFlexbox布局常用于设计比较复杂的页面，可以轻松的实现屏幕和浏览器窗口大小发生变化时保持元素的相对位置和大小不变，同时减少了依赖于浮动布局实现元素位置的定义以及重置元素的大小。\r\n[![VQQM4J.png](https://t1.picb.cc/uploads/2019/03/12/VQQM4J.png)](https://www.picb.cc/image/VQQM4J)\r\n上下弹性布局，左右弹性布局\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>弹性布局</title>\r\n</head>\r\n<style type=\"text/css\">	\r\n	#box {\r\n		display: flex;\r\n		flex-direction: column; \r\n		/*  height:100vh 让div高度100%显示在浏览器上; 把浏览器视口横向分为100份，100vh就是100%高度;  */\r\n		/* 如果上方有个导航条，可以减去导航条高度,如：height:calc(100vh - 60px) */\r\n		/* 当然除了vh，还有vw，就是将视口纵向分 */\r\n		height:100vh;\r\n	}\r\n	.nav {\r\n		background: pink;\r\n		height: 60px;\r\n	}\r\n	.body {\r\n		flex: 1;\r\n		display: flex;\r\n	}\r\n	.left {\r\n		background: green;\r\n		width: 200px;\r\n	}\r\n	.main {\r\n		background: blue;\r\n		flex: 1;\r\n	}\r\n	.bottom {\r\n		background: yellow;\r\n		height: 60px;\r\n	}\r\n</style>\r\n<body>\r\n	<div id=\"box\">\r\n		<nav class=\"nav\">导航高度60px</nav>\r\n		<div class=\"body\">\r\n			<div class=\"left\">宽度固定200px</div>\r\n			<div class=\"main\">高度自适应(占满浏览器)、宽度自适应(占满浏览器)</div>			\r\n		</div>\r\n		<div class=\"bottom\">底部高度60px</div>\r\n	</div>\r\n</body>\r\n</html>\r\n```\r\n### 两栏自适应布局\r\n![VaN7Pt.png](https://t1.picb.cc/uploads/2019/03/16/VaN7Pt.png)\r\n一栏固定布局，左浮动，浮动的效果是：脱标不占位，但影响其他容器的内容布局\r\n> float 脱标不占位特性\r\n一旦盒子被标记为浮动，这个盒子就脱离了ＤＯＭ，父亲盒子的高度不会受浮动子盒子的影响。\r\n并且会影响其他容器的【内容】布局，其他内容会环绕这个浮动盒子。\r\n\r\n一栏宽度自适应，设置 overflow: hidden; 效果是：设置绝缘容器\r\n> 什么是绝缘容器：不受浮动影响\r\n容器内的内容不受其他浮动容器的影响\r\n容器内容的浮动也不会去影响其他容器的内容\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box {\r\n            width: 100px;\r\n            height: 100px;\r\n            float: left;\r\n            background: pink;\r\n        }\r\n        .box1 {\r\n			/* 设置绝缘容器效果 */\r\n            overflow: hidden;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <!--浮动的作用：脱标不占位，但是会影响其他容器的内容布局-->\r\n    <div class=\"box\"></div>\r\n    <div class=\"box1\">\r\n        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 内容内容内容内容内容内容内\r\n    </div>\r\n</body>\r\n\r\n</html>\r\n```\r\n### rem布局\r\nrem适配原理\r\n> rem 是相对于页面根源素 html 的字体大小的一个尺寸单位 (r指的是root的意思，代表根元素html)\r\nem 是相对于父容器的字体大小的一个尺寸单位\r\n\r\n#### rem适配原理\r\n页面内容可以使用rem为单位，那么html的字体大小就是一个控制尺寸的开关\r\n当设备改变的时候可以根据设备的宽度和原本设计稿的尺寸比例关系设置html的字体大小\r\n这样凡是以rem为单位的内容会根据设备做等比适配\r\n> 1.假设设计稿是750px\r\n2.假设这个时候html字体大小为100px\r\n3.那么在320px设备的时候  字体大小为 100/750*320\r\n4.只要根据这个比例在不同设备设置rem基准值(html字体大小)即可\r\n 5.改变rem基准值有两种方式：媒体查询或javascript\r\n\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <style>\r\n        html{\r\n            /*html元素的字体大小:rem基准值*/\r\n            font-size: 100px;\r\n        }\r\n        body{\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n        header{\r\n            width: 100%;\r\n            height: 1rem;\r\n            font-size: 0.48rem;\r\n            color: #fff;\r\n            background: green;\r\n            line-height: 1rem;\r\n            text-align: center;\r\n        }\r\n        /*1. 使用流失布局和伸缩布局  宽度自适应 高度固定*/\r\n        /*2. 使用rem布局  高宽都自适应  等比例适配*/\r\n        /*3. 通过去修改rem的基准值 让以rem为单位的容器等比缩放*/\r\n        /*4. 假设 设计稿的宽度为  640px  其中有一个元素的宽度  100px*100px */\r\n        /*5. 假设 320px设备  其中有一个元素的宽度  50px*50px */\r\n        /*6. 怎么根据不同的设备设置对应的基准值*/\r\n        /*7. 当前设备的基准值 = 当前设备的宽度/设计稿的宽度*在设计稿换算成rem的时候使用的基准值*/\r\n        /*8. 怎么样去当设备不同的时候设置不同的rem基准值*/\r\n    </style>\r\n</head>\r\n<body>\r\n<header>购物车</header>\r\n<!--1. 使用媒体查询-->\r\n<!--2. 使用js-->\r\n</body>\r\n</html>\r\n```\r\n#### 媒体查询 改变rem基准值\r\n媒体查询参考网址：http://www.runoob.com/cssref/css3-pr-mediaquery.html\r\n媒体查询语法：\r\n```\r\n@media mediatype and|not|only (media feature) {\r\n    CSS-Code;\r\n}\r\n```\r\n注意：媒体查询，默认是 screen and，因此`screen and`可以省略\r\n```\r\n/*假设的设备  320px(5/5s) 375px(6/7/8) 414px(6/7/8plus) 768px(ipad) 1024px(ipad pro)，图片按 16:9 显示*/\r\n@media screen and (min-width: 320px) {\r\n  .mint-swipe {\r\n    height: 180px;\r\n  }\r\n}\r\n@media (min-width: 375px) {\r\n  .mint-swipe {\r\n    height: 211px;\r\n  }\r\n}\r\n@media (min-width: 414px) {\r\n  .mint-swipe {\r\n    height: 233px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .mint-swipe {\r\n    height: 432px;\r\n  }\r\n}\r\n@media (min-width: 1024px) {\r\n  .mint-swipe {\r\n    height: 576px;\r\n  }\r\n}\r\n```\r\n#### js改变 rem 基准值\r\n自定义js代码设置设备的 rem 基准值\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box{\r\n            width: 100/64rem;\r\n            height: 100/64rem;\r\n            background: pink;\r\n        }\r\n    </style>\r\n    <script>\r\n        var psdWidth = 640; // 设计稿宽度\r\n        var fs = 100;			 // 设计稿基准值\r\n        //当前设备基准值\r\n        var rem = fs * window.innerWidth / psdWidth + \'px\';\r\n		\r\n        document.querySelector(\'html\').style.fontSize = rem;\r\n        //监听页面尺寸改变 重新修改rem的基准值，这个监听在浏览器中演示的时候使用\r\n        window.onresize = function (ev) {\r\n            var rem = window.innerWidth / psdWidth * fs + \'px\';\r\n            document.querySelector(\'html\').style.fontSize = rem;\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n<div class=\"box\"></div>\r\n\r\n</body>\r\n</html>\r\n```\r\n用 flexible.js 插件改变设备的 基准值\r\n> flexible.js 是手机淘宝团队做移动端适配的库\r\n我们使有它的目的只有一个根据设备设置rem基准值\r\n\r\n```\r\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=.0\">\r\n<script src=\"flexible.js\"></script>\r\n```',24,100,'2019-03-13 08:08:18','2019-04-12 11:02:57'),(249,'### jQquery与dom互转\r\njq对象转换为dom对象\r\n```\r\nvar domObj = $(\"#div\")[0];  // 方法一\r\nvar domObj = $(\"#div\").get(0);  // 方法二\r\n\r\ndomObj.innerHTML = \"将jq对象转化为dom对象后，可以调用dom的方法\";\r\n```\r\ndom对象转换为jq对象\r\n```\r\nvar domObj = document.getElementById(\"div\");\r\nvar $obj = $(domObj);\r\n$obj.html(\"dom对象转换为jq对象后，可以调用jq的方法\");\r\n```',8,100,'2019-03-13 10:38:54','2019-03-13 10:43:33'),(250,'## 移动端开发',24,100,'2019-03-14 09:40:55','2019-03-14 09:40:55'),(251,'### 移动端开发现状\r\n1.移动端考虑兼容问题：\r\n1.1 浏览器：UC android browser safari 欧朋 qq 360 猎豹 ....\r\n1.2 不存在不同浏览器的兼容问题（主流的浏览器都是 基于webkit内核）\r\n1.3 但是兼容更多的浏览器还是需要 考虑 webkit 的兼容\r\n1.4 总结  之前学习的H5C3的知识可以放下使用\r\n\r\n2.屏幕尺寸大小不一致\r\n2.1 pc端用版心布局：980px 1200px 1024px ...  目的内容居中显示 在不同显示器中可以正常显示，两边会有留白\r\n2.2 移动端不能使用版心 ，因为有留白  （移动设备的屏幕大小 网页应该竟可能的去暂满利用）\r\n2.3 怎么去适配\r\n2.3.1 流式布局\r\n2.3.2 视口 viewport\r\n### 主流设备尺寸\r\n\r\n| 设备                    | 尺寸(英寸) | 开发尺寸(px) | 物理像素比(dpr) | 宽/高 | 宽:高 |\r\n| --------------------- | ------ | -------- | ---------- | ---------- | ---------- |\r\n| iphone3G              | 3.5    | 320*480  | 1.0        | 0.667        | 2:3        |\r\n| iphone4/4s            | 3.5    | 320*480  | 2.0        | 0.667        | 2:3        |\r\n| iphone5/5s/5c         | 4.0    | 320*568  | 2.0        | 0.563        | 9:16        |\r\n| iphone 6/7/8               | 4.7    | 375*667  | 2.0        | 0.562        | 9:16        |\r\n| iphone 6/7/8 plus              | 5.5    | 414*736  | 3.0        | 0.563       | 9:16        |\r\n| HTC One M8            | 4.5    | 360*640  | 3.0        | 0.563        | 9:16        |\r\n| Nexus 4               | 4.7    | 384*640  | 2.0        | 0.600        | 3:5        |\r\n| Nexus 5x              | 5.2    | 411*731  | 2.6        | 0.562        | 9:16        |\r\n| Samsung Galaxy Note 4 | 5.7    | 480*853  | 3.0        | 0.563        | 9:16        |\r\n| Sony Xperia Z Ultra   | 6.4    | 540*960  | 2.0        | 0.563        | 9:16        |\r\n| Nexus 7 (\'12)         | 7.0    | 600*960  | 1.3        | 0.625        | 5:8        |\r\n| iPad Mini             | 7.9    | 768*1024 | 1.0        | 0.750        | 3:4        |',24,100,'2019-03-14 09:46:07','2019-03-14 13:33:40'),(252,'### 视口\r\n#### 视口概念\r\n在移动端，网页放在视口里面，视口放在浏览器窗口里面。\r\n视口是一个虚拟的区域，用来承载网页的区域，在浏览器可视窗口和网页之间。\r\n有一些设备viewport的默认宽度是980px,网页内容显示在里面，为了能在320px屏幕内显示，会自动缩放。\r\n因此会有一个现象：移动端网页内容缩小\r\n```\r\n即把pc的网页放在移动端显示，网页内容会被缩小，导致这个现象的原因是：\r\n在pc端，虽然网页内容是100%宽度的流式布局，这个100%是基于浏览器窗口的，所以pc端网页内容是在浏览器窗口宽度之间流动自适应。\r\n但在移动端，网页内容放在了视口中（默认980px），视口再放在移动端浏览器窗口中（320px），当视口尺寸>浏览器窗口尺寸，这个视口会被缩小到与浏览器窗口(即设备宽度，iPhone5为320px)一样大，所以网页内容就变小了。\r\n同理，如果把设置视口宽度小于设备宽度，那么视口会被放大到与设备宽度一致，也就是网页内容也会被放大了。\r\n```\r\n在移动端有特殊的功能：可以设置宽度和高度，可以设置缩放比例，控制缩放的比例，控制用户是否可以自行缩放。\r\n\r\n#### 标准视口配置\r\n```\r\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n```\r\n#### 视口属性详解\r\n| 属性            | 解释                                   |\r\n| ------------- | ------------------------------------ |\r\n| width         | 宽度设置的是viewport宽度，可以设置device-width特殊值 |\r\n| initial-scale | 初始缩放比，大于0的数字                         |\r\n| maximum-scale | 最大缩放比，大于0的数字                         |\r\n| minimum-scale | 最小缩放比，大于0的数字                         |\r\n| user-scalable | 用户是否可以缩放，yes或no（1或0）                 |\r\n\r\n#### 视口的具体应用\r\n**适配有三点事情需要去做：**\r\n—— 页面的宽度和设备样宽\r\n—— 默认的缩放比例是1.0\r\n——不允许用户去缩放页面\r\n**标准的viewport设置：**\r\n—— 视口宽度和设备保持一致\r\n—— 视口的默认缩放比例1.0\r\n—— 不允许用户自行缩放\r\n—— 最大允许的缩放比例1.0\r\n—— 最小允许的缩放比例1.0',24,100,'2019-03-14 10:39:42','2019-03-14 12:28:13'),(253,'## 移动端事件',24,100,'2019-03-15 12:12:49','2019-03-15 12:12:49'),(254,'### touch事件\r\ntouch 事件是原生事件\r\n##### 触摸事件\r\n\r\n| 事件        | 说明                                                         | 记录哪些触摸点集合                                                         |\r\n| ----------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\r\n| touchstart  | 当手指触碰屏幕时候触发该事件                                 | changedTouches、targetTouches、touches  |\r\n| touchmove   | 当手指在屏幕上滑动时候触发该事件                             | changedTouches、targetTouches、touches |\r\n| touchend    | 当手指离开屏幕时触发该事件                                   | changedTouches |\r\n| touchcancel | 当系统停止跟踪（被迫终止，如来电话、弹窗消息）触摸时候会触发。 | changedTouches、targetTouches、touches  |\r\n\r\n##### 触摸事件对象属性——触摸点集合\r\n\r\n| 触摸点集合          | 说明              |\r\n| -------------- | --------------- |\r\n| targetTouches  | 目标元素的所有当前触摸点集合  |\r\n| changedTouches | 目标元素的最新更改的触摸点集合 |\r\n| touches        | 页面上的所有触摸点集合     |\r\n\r\n注意：只有`changedTouches`会在所有触摸事件中都有记录\r\n##### 触摸点中的坐标组\r\n\r\n| 点坐标             | 说明        |\r\n| --------------- | --------- |\r\n| pageX/pageY     | 基于页面大小的坐标 |\r\n| clientX/clientY | 基于视口大小的坐标 |\r\n| screenX/screenY | 基于屏幕大小的坐标 |\r\n\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Title</title>\r\n    <style>\r\n        .box{\r\n            width: 200px;\r\n            height: 200px;\r\n            background: pink;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"box\"></div>\r\n<script>\r\n    var box = document.querySelector(\'.box\');\r\n    box.addEventListener(\'touchstart\',function (ev) {\r\n        console.log(\'触摸开始\');\r\n        console.log(ev.touches[0]);\r\n    });\r\n    box.addEventListener(\'touchmove\',function (ev) {\r\n        console.log(\'触摸滑动\');\r\n		console.log(ev.touches[0]);\r\n    });\r\n    box.addEventListener(\'touchend\',function (ev) {\r\n        console.log(\'触摸结束\');\r\n		console.log(ev.touches[0]);\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-15 12:22:27','2019-03-16 08:29:31'),(255,'### tap事件\r\n#### tap事件出现的原因\r\n由于早期移动端页面双击可以缩放，为了检测双击操作，延长了`click` 事件的响应时间，200-300ms。\r\n`click`在移动端特殊，会有300ms的延时（屏幕需要判断是否是双击缩放操作）\r\n`tap`事件不是原生事件，是一个概念，基于touch事件的封装\r\n封装的原理：结束事件和开始事件的时间差在150ms以内，且没有滑动\r\n> 实际应用中尽量不要使用封装的tap（封装的tap会有事件点透现象），所以建议使用 fastclick.js 提升后的 click 事件。\r\n\r\n#### 用 touch 事件来封装 tap 事件\r\n```\r\n/*模拟tap事件（tap在移动端库zepto.js中有使用）*/\r\n/*1. 响应的速度比click要快   150ms */\r\n/*2. 不能滑动*/\r\nvar bindTapEvent = function (dom, callback) {\r\n  var startTime = 0;\r\n  var isMove = false;\r\n  dom.addEventListener(\'touchstart\', function () {\r\n    startTime = Date.now();\r\n  });\r\n  dom.addEventListener(\'touchmove\', function () {\r\n    isMove = true;\r\n  });\r\n  dom.addEventListener(\'touchend\', function (e) {\r\n    if ((Date.now() - startTime) < 150 && !isMove) {\r\n      callback && callback.call(this, e);\r\n    }\r\n    startTime = 0;\r\n    isMove = false;\r\n  });\r\n}\r\n\r\nbindTapEvent(document.querySelector(\'.box\'), function (e) {\r\n  console.log(\'tap事件：比click响应更快\');\r\n});\r\n```\r\n#### 使用 fastclick.js 提高 click 响应速度\r\n1 使用一个叫：fastclick.js 的插件来提高移动端click事件的响应速度。还是使用`click`事件，只是click事件的响应速度提高了。\r\n2 下载：https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js ， https://github.com/ftlabs/fastclick\r\n3 使用：\r\n```\r\n<script src=\"../js/fastclick.min.js\"></script>\r\n<script>\r\n    /*当页面的dom元素加载完成 如果使用jquery $(function(){});*/\r\n    document.addEventListener(\'DOMContentLoaded\', function() {\r\n        /*初始化方法*/\r\n        FastClick.attach(document.body);\r\n    }, false);\r\n    /* 结果：照常使用click事件，只是这时候的click事件响应速度已经提升了 */\r\n</script>\r\n```',24,100,'2019-03-16 07:59:26','2019-03-16 08:25:46'),(256,'### 移动端手势事件\r\n根据 touch 事件衍生（封装）出来的事件，通常称为手势事件\r\n#### swipe 事件\r\n手势事件：滑动，左滑，右滑，上滑，下滑 （swipe在移动端库zepto.js中有使用）\r\n```\r\n/*1. 理解移动端的手势事件*/\r\n/*2. swipe swipeLeft swipeRight swipeUp swipeDown */\r\n/*3. 左滑和右滑手势怎么实现*/\r\nvar bindSwipeEvent = function (dom,leftCallback,rightCallback) {\r\n  /*手势的条件*/\r\n  /*1.必须滑动过*/\r\n  /*2.滑动的距离超过 50px*/\r\n  var isMove = false;\r\n  var startX = 0;\r\n  var distanceX = 0;\r\n  dom.addEventListener(\'touchstart\',function (e) {\r\n    startX = e.touches[0].clientX;\r\n  });\r\n  dom.addEventListener(\'touchmove\',function (e) {\r\n    isMove = true;\r\n    var moveX = e.touches[0].clientX;\r\n    distanceX = moveX - startX;\r\n  });\r\n  dom.addEventListener(\'touchend\',function (e) {\r\n    /*滑动结束*/\r\n    if(isMove && Math.abs(distanceX) > 50){\r\n      if(distanceX > 0){\r\n        rightCallback && rightCallback.call(this,e);\r\n      }else{\r\n        leftCallback && leftCallback.call(this,e);\r\n      }\r\n    }\r\n    /*重置参数*/\r\n    isMove = false;\r\n    startX = 0;\r\n    distanceX = 0;\r\n  });\r\n}\r\nbindSwipeEvent(document.querySelector(\'.box\'),function (e) {\r\n  console.log(\'左滑手势\');\r\n},function (e) {\r\n  console.log(\'右滑手势\');\r\n});\r\n```',24,100,'2019-03-16 08:19:27','2019-03-16 08:27:57'),(257,'## 插件\r\n### 区域滚动插件 iscroll\r\n官网：https://github.com/cubiq/iscroll\r\n参数配置参考：http://www.mamicode.com/info-detail-331827.html\r\n\r\n使用方法\r\n1.使用 iscroll 插件，实现区域滚动的效果。\r\n2.下载 https://github.com/cubiq/iscroll ，引入\r\n3.注意：只能是一个父容器套一个子容器\r\n4.实现滚动效果的条件：子容器尺寸要大于父容器尺寸\r\n5.初始化：传入选择器 或dom对象\r\n\r\n```\r\n<div class=\"jd_content\">\r\n	<aside class=\"jd_left\">\r\n		<ul>\r\n			<li>...</li>\r\n			<li>...</li>\r\n			...\r\n		</ul>\r\n	</aside>\r\n	<script>\r\n	<article class=\"jd_right\">\r\n		  <div class=\"jd_right_box\">\r\n				<a>...</a>\r\n				<div>...</div>\r\n				<div>...</div>\r\n				...\r\n		  </div>\r\n	</article>\r\n</div>\r\n// 入口函数\r\ndocument.addEventListener(\'DOMContentLoaded\', function (e) {\r\n  // 左侧栏区域滚动\r\n  // 1.使用 iscroll 插件，实现区域滚动的效果。\r\n  // 2.下载 https://github.com/cubiq/iscroll ，引入\r\n  // 3.注意：只能是一个父容器套一个子容器\r\n  // 4.实现滚动效果的条件：子容器尺寸要大于父容器尺寸\r\n  // 5.初始化：传入选择器 或dom对象\r\n  new IScroll(\'.jd_left\');\r\n\r\n  // 右侧栏区域滚动\r\n  new IScroll(\'.jd_right\', {\r\n    scrollX:false,\r\n    scrollY:true\r\n  });\r\n});\r\n</script>\r\n```\r\n### 轮播图插件 swiper\r\n参考网址：https://www.swiper.com.cn/usage/index.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>苏宁-首页</title>\r\n    <link rel=\"stylesheet\" href=\"css/swiper.min.css\">\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"less/index.css\">\r\n    <style>\r\n        .swiper-container img{\r\n            width: 100%;\r\n            display: block;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"sn_container\">\r\n    <div class=\"swiper-container\">\r\n        <ul class=\"swiper-wrapper\">\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner01.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner02.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner03.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner04.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner05.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner06.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner07.jpg\" alt=\"\"></a></li>\r\n            <li class=\"swiper-slide\"><a href=\"#\"><img src=\"images/banner08.jpg\" alt=\"\"></a></li>\r\n        </ul>\r\n        <ul class=\"swiper-pagination\"></ul>\r\n    </div>\r\n</div>\r\n<script src=\"js/swiper.min.js\"></script>\r\n<script>\r\n    new Swiper(\'.swiper-container\',{\r\n        /*配置*/\r\n        autoplay:{\r\n            delay:1000,\r\n            disableOnInteraction:false\r\n        },\r\n        loop:true,\r\n        pagination:{\r\n            el:\'.swiper-pagination\'\r\n        }\r\n    });\r\n    //1.自动播放功能\r\n    //2.无缝循环\r\n    //3.点容器\r\n</script>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-16 14:24:31','2019-03-18 05:02:43'),(258,'## node js\r\n### 查看 node 版本\r\n```\r\n$ node -v\r\n```',6,100,'2019-03-17 01:19:22','2019-03-17 01:19:22'),(259,'## less\r\n### 什么是less\r\n作为一门标记性语言，CSS 的语法相对简单，对使用者的要求较低，但同时也带来一些问题：CSS需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码，造成这些困难的很大原因源于 CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。LESS 为 Web 开发者带来了福音，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，LESS 可以让我们用更少的代码做更多的事情。\r\n参考网址：https://www.runoob.com/manual/lessguide/#client-side-usage\r\n### less 安装\r\n1.安装nodejs https://nodejs.org/dist/ 可选择版本(6.0)。\r\n2.检查是否安装成功，使用cmd命令 node -v 查看版本即可。\r\n3.基于nodejs安装less:\r\n—— 在线安装：\r\n```\r\nnpm install less -g\r\n或者\r\nyarn install less -g\r\n\r\n```\r\n—— 离线安装:\r\n> a.找到C盘根目录下的用户或User文件夹打开\r\nb.找到当前计算机使用的用户文件夹打开\r\nc.找到隐藏文件夹AppData打开\r\nd.找到Roaming文件夹打开\r\ne.找到npm文件夹打开，该文件夹为基于nodejs程序目录\r\nf.把npm.zip文件解压到该目录\r\n\r\n安装完成后，查看 less 版本\r\n```\r\nlessc -v\r\n```\r\n### 使用 less 编译 css\r\n本质上，LESS 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。LESS 并没有裁剪 CSS 原有的特性，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，为 CSS 加入程序式语言的特性。\r\n```\r\nlessc 目标文件地址 生成文件地址\r\nlessc test.less  test.css\r\n```\r\n### less 语法\r\n#### 变量\r\n```\r\n@mainColor:#e92323;\r\n@className:box;\r\n\r\ndiv{\r\n  background: @mainColor;\r\n}\r\na:hover{\r\n  color: @mainColor;\r\n}\r\n//变量用于字符拼接使用方法\r\n.@{className}{\r\n  color: @mainColor;\r\n}\r\n```\r\n#### 混入\r\n—— 样式混入\r\n```\r\n.w50p {\r\n  width: 50%;\r\n}\r\n.br {\r\n  border-right: 1px solid #ddd;\r\n}\r\n.f_left {\r\n  float: left;\r\n}\r\n\r\n// 样式混入：生成新的样式\r\n.w50brfl {\r\n  .w50p();\r\n  .br();\r\n  .f_left();\r\n}\r\n```\r\n生成的css如下：\r\n```\r\n.w50p {\r\n  width: 50%;\r\n}\r\n.br {\r\n  border-right: 1px solid #ddd;\r\n}\r\n.f_left {\r\n  float: left;\r\n}\r\n.w50brfl {\r\n  width: 50%;\r\n  border-right: 1px solid #ddd;\r\n  float: left;\r\n}\r\n```\r\n—— 函数混入（只有函数被调用了，才会生成对应的css代码）\r\n```\r\n// 函数混入\r\n.w50p(){\r\n  width: 50%;\r\n}\r\n.br(){\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n//1. 定义了传参  但是未定义默认值  调用时必须传参\r\n//2. 定义了传参  定义默认值  无所谓\r\n.bfn(@direction:top,@color:#ccc){\r\n  border-@{direction}: 1px solid @color;\r\n}\r\n.f(@direction:left){\r\n  float: @direction;\r\n}\r\n.w50brfl{\r\n  .w50p();\r\n  //.br();\r\n  .bfn(right,red);\r\n  .f(right);\r\n}\r\n```\r\n生成的css代码如下：\r\n```\r\n.w50brfl {\r\n  width: 50%;\r\n  border-right: 1px solid red;\r\n  float: right;\r\n}\r\n```\r\n#### 嵌套\r\n```\r\n.jd_banner{\r\n  width: 100%;\r\n  overflow: hidden;\r\n  position: relative;\r\n  ul{ // & 代表父元素本身\r\n    &:first-child{\r\n      width: 1000%;\r\n      transform: translateX(-10%);\r\n      -webkit-transform: translateX(-10%);\r\n      li{\r\n        width: 10%;\r\n        float: left;\r\n        a{\r\n          width: 100%;\r\n          display: block;\r\n          color: @color;\r\n          .f();\r\n        }\r\n      }\r\n    }\r\n    &:last-child{\r\n      position: absolute;\r\n      left: 50%;\r\n      bottom: 6px;\r\n      margin-left: -59px;\r\n      width: 118px;\r\n    }\r\n  }\r\n}\r\n```\r\n#### 导入\r\n导入 less 文件，以组成一个更大的 less 文件\r\n```\r\n@import \"header\";\r\n@import \"banner\";\r\n```\r\n#### 运算&内置函数\r\napi地址：http://lesscss.cn/functions/#functions-overview\r\n中文：http://www.css88.com/doc/less/functions/#color-operations\r\n```\r\n/*运算*/\r\n@num:5;\r\nul{\r\n  width: 100%*@num;\r\n  li{\r\n    width: 100%/@num;\r\n    color: red+yellow+blue;\r\n    background: gray*0.3;\r\n    /*内置函数*/\r\n    border-color: darken(red,20%);\r\n  }\r\n}\r\n```\r\n\r\n### 浏览器端编译less\r\n在客户端使用 Less.js 是最容易的方式，并且在开发阶段很方便，但是，在生产环境中，性能和可靠性非常重要， 我们建议最好使用 node.js 或其它第三方工具进行预编译。\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <link rel=\"stylesheet\" type=\"text/less\" href=\"index.less\">\r\n    <script src=\"less.min.js\"></script>\r\n    <script>\r\n        less.watch();\r\n    </script>\r\n</head>\r\n<body>\r\n    <!--1.在浏览器端直接使用less文件预览 type=\"text/less\" -->\r\n    <!--2.浏览器无法直接使用less类型的文件，无法解析-->\r\n    <!--3.转换成css,需要js插件支持-->\r\n    <!--4.下载插件 https://github.com/less/less.js/tree/master/dist -->\r\n    <!--5.less.js会异步加载less文件的内容，再去解析成css,然后追加到style-->\r\n    <!--6.必须使用HTTP形式打开页面，不要以file形式打开-->\r\n    <!--7.更改完成之后每次要刷新，可以配置less监听，自动刷新页面预览-->\r\n    <!--8.需要js配置 less.watch() -->\r\n    <div class=\"box2\">test</div>\r\n</body>\r\n</html>\r\n```',24,100,'2019-03-17 01:21:23','2019-03-17 13:07:31'),(260,'## 背景属性 background\r\n在一个大的容器内正中间显示一个小的背景图\r\n```\r\n- background-origin\r\n  - 背景平铺的起点\r\n  - 默认是从内边距开始平铺\r\n  - padding-box 从内边距开始平铺\r\n  - border-box  从边框开始平铺\r\n  - content-box 从内容开始平铺\r\n- background-clip\r\n  - 背景图裁剪\r\n  - 默认的裁剪方式 边框以外的被裁剪\r\n  - border-box 边框以外的被裁剪\r\n  - padding-box 内边距以外的被裁剪\r\n  - content-box 内容以外的被裁剪\r\n\r\n```',27,100,'2019-03-17 01:23:21','2019-03-22 08:24:37'),(261,'## 组织根据三板斧\r\n### 招聘\r\n1.不要轻易下放招聘权，新人不能马上去聘新人。\r\n> 跨两级→四级去招聘\r\n\r\n2.关注专业能力以外的味道。\r\n> “闻味官”关注非能力因素，三年以上的老员工才能成为“闻味官”。\r\n\r\n3.人才地极差 平凡的人成就非凡的事情\r\n> 宁愿用二流学校的一流人才，也不容一流学校的二流人才\r\n例如：要招聘一个1000元工资的人，从工资3000里面的去挑，而不是从工资8000里面的人中去挑。\r\n\r\n### 培训\r\n1.不要抓所有人的培训\r\n> 抓新人和新干部的培训\r\n\r\n2.贴近实战\r\n> 我做你看 我说你听 你做我看 你说我听\r\n培训强度和难度大于常规工作的50%，演戏时多流血，战场上少死人。在培训时就淘汰不合适的人，上岗后合格率就大。\r\n\r\n3.淘汰机制\r\n> 培训必有考核 考核必有淘汰\r\n\r\n### 考核\r\n组织考核要诀：\r\n> 明确考核频率：新团队、变化快的业务考核频率高一点。一年只考核1次，是绝对错误的。\r\n重视非业绩因素：团队、策略、价值观\r\n考核结果“2-7-1”排队：2升官发财都是他，1淘汰\r\n\r\n奖金分配：业绩因素（10万奖金）\r\n业绩因素+非业绩因素（优）：奖金10万+5万\r\n业绩因素+非业绩因素（差）：奖金10万-5万\r\n\r\n团队\r\n> “出干部” 是最重要的一个考核指标。出干部没有奖励，那就没有人愿意培养输出干部，所以必须有考核奖励。流失干部，要扣分。\r\n\r\n策略：\r\n>同样的结果，用不同方法完成的，考核上要有差异\r\n\r\n价值观：\r\n> 考核中要加入价值观\r\n\r\n考核结果排序\r\n> 横着排序：同一级别的人横着排，如所有总监横向“2-7-1”排序\r\n竖着培训：一个团队10个人，竖着“2-7-1”排序\r\n\r\n2升官发财都是他（20%的人要得到40-50%的奖励），1淘汰\r\n\r\n### 组织顶层搭班子\r\n搭班子 定战略 带队伍\r\n\r\n检验一个团队有没有班子的标志：有没有刹车\r\n\r\n搭班子的方法：\r\n> 1.男女搭 （鹰鸽搭）\r\n2.老少搭（跨一代人）\r\n3.动态搭\r\n4.搭组织\r\n\r\n搭组织：\r\n> 搭汇报线（组织架构图）：一级部门二级部门能不能调\r\n\r\n晋升的方法（轮岗）：\r\n> 援藏：轮岗到弱势部门去，看看换一个团队还能不能成功，二次证明成功\r\n当政委：阿里的HR都是从业务出身，转HR是晋升通道之一，对于个人（从懂业务，到用人），对公司（HR都是懂业务的）\r\n当教官：去培训新干部\r\n\r\n通过这三件事，好干部（懂业务、会用人、会带人）就能培训出来',28,100,'2019-03-17 06:49:06','2019-03-17 07:02:24'),(262,'## 项目地址\r\ngithub地址：https://github.com/andy-love-coding/jd_mobile_demo  <br>\r\n[![VbJqEF.jpg](https://t1.picb.cc/uploads/2019/03/18/VbJqEF.jpg)](https://www.picb.cc/image/VbJqEF)\r\n## 主要知识点\r\n1.流式布局（百分比布局）\r\n2.视口\r\n3.轮播图\r\n4.js面向对象编程\r\n5.touch事件\r\n6.区域滚动\r\n## demo代码\r\n### demo结构\r\n主要有两部分：主页（index.html) 和 分类页（category.html)\r\n```\r\n|-- index.html\r\n|-- category.html\r\n|-- css\r\n|   |-- base.css\r\n|   |-- category.css\r\n|   |-- index.css\r\n|-- js\r\n    |-- category.js\r\n    |-- index.js\r\n    |-- iscroll.js\r\n|-- images\r\n```\r\n\r\n### 基础样式 base.css\r\ncss/base.css\r\n> 移动端使用盒模型：box-sizing: border-box;  -webkit-box-sizing: border-box;\r\n清除点击高亮效果： -webkit-tap-highlight-color: transparent;\r\n去除input立体样式：-webkit-appearance: none;\r\n\r\n```\r\n/* reset css 重置样式 */\r\n*,\r\n*::before,\r\n*::after {\r\n  margin: 0;\r\n  padding: 0;\r\n  /* 设置盒模型 让宽度从边框开始计算 为了防止内容溢出而出现横向滚动条 */\r\n  box-sizing: border-box;\r\n  /* 这是css3属性，移动端只用加 webkit 前缀即可，支持更多浏览器 */\r\n  -webkit-box-sizing: border-box;\r\n  /* 清除点击高亮效果 */\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\nul {\r\n  list-style-type: none;\r\n}\r\na {\r\n  color: #333;\r\n  text-decoration: none;\r\n}\r\ninput {\r\n  border: none;\r\n  outline: none;\r\n  /* 在移动端只写上面两项(border/outline)，input样式去除不干净（立体样式的残留），还需加上下面的 */\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/* common css 共用样式 */\r\n.ml10 {\r\n  margin-left: 10px;\r\n}\r\n.mr10 {\r\n  margin-right: 10px;\r\n}\r\n.mt10 {\r\n  margin-top: 10px;\r\n}\r\n.mb10 {\r\n  margin-bottom: 10px;\r\n}\r\n.f_left {\r\n  float: left;\r\n}\r\n.f_right {\r\n  float: right;\r\n}\r\n.clearfix::before,\r\n.clearfix::after {\r\n  content: \"\";\r\n  clear: both;\r\n  /* 只有块级元素才管用 */\r\n  display: block;\r\n  height: 0;\r\n  line-height: 0;\r\n  visibility: hidden;\r\n}\r\n\r\n/* 精灵兔的公共样式 */\r\n/* 只要元素的类以“icon_”开头，那么就会有精灵图背景了，此时只需背景定位，就可以显示想要的icon了，如：background-position: -60px -109px; */\r\n[class^=\"icon_\"] {\r\n  background: url(\"../images/sprites.png\") no-repeat 0 0/200px 200px;\r\n}\r\n```',29,100,'2019-03-18 08:08:14','2019-03-19 08:07:40'),(263,'### 主页 index.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>京东移动端首页demo</title>\r\n    <link rel=\"stylesheet\" href=\"css/base.css\">\r\n    <link rel=\"stylesheet\" href=\"css/index.css\">\r\n</head>\r\n<body>\r\n<!-- 版心 -->\r\n<div class=\"jd_container\">\r\n    <!-- 顶部搜索 -->\r\n    <header class=\"jd_header\">\r\n        <div class=\"jd_header_box\">\r\n            <a href=\"#\" class=\"icon_logo\"></a>\r\n            <form action=\"#\">\r\n                <span class=\"icon_search\"></span>\r\n                <input type=\"search\" placeholder=\"华为P20\">\r\n            </form>\r\n            <a href=\"#\" class=\"login\">登录</a>\r\n        </div>\r\n    </header>\r\n    <!-- 轮播图 -->\r\n    <div class=\"jd_banner\">\r\n        <ul  class=\"clearfix\">\r\n            <!-- 轮播图首位各加一张图片，实现滑动无缝连接 -->\r\n            <li><a href=\"#\"><img src=\"images/l8.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l1.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l2.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l3.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l4.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l5.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l6.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l7.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l8.jpg\" alt=\"\"></a></li>\r\n            <li><a href=\"#\"><img src=\"images/l1.jpg\" alt=\"\"></a></li>\r\n        </ul>\r\n        <ul  class=\"clearfix\">\r\n            <li class=\"now\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n        </ul>\r\n    </div>\r\n    <!-- 导航栏 -->\r\n    <div class=\"jd_nav\">\r\n        <ul  class=\"clearfix\">\r\n            <li><a href=\"#\"><img src=\"images/nav0.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav1.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav2.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav3.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav4.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav5.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav6.png\" alt=\"\"><p>分类</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nav7.png\" alt=\"\"><p>分类</p></a></li>\r\n        </ul>\r\n    </div>\r\n    <!-- 产品区域 -->\r\n    <div class=\"jd_product\">\r\n        <section class=\"pro_box\">\r\n            <div class=\"tit noborder\">\r\n                <div class=\"f_left\">\r\n                    <span class=\"sk_icon\"></span>\r\n                    <span class=\"sk_text\">掌上秒杀</span>\r\n                    <div class=\"sk_time\">\r\n                        <span>0</span>\r\n                        <span>0</span>\r\n                        <span>:</span>\r\n                        <span>0</span>\r\n                        <span>0</span>\r\n                        <span>:</span>\r\n                        <span>0</span>\r\n                        <span>0</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"f_right\"><a href=\"#\" class=\"mr10\">更多></a></div>\r\n            </div>\r\n            <div class=\"con\">\r\n                <ul class=\"sk_product clearfix\">\r\n                    <li>\r\n                        <a href=\"#\"><img src=\"images/detail01.jpg\" alt=\"\"></a>\r\n                        <p class=\"nowPrice\">¥10.00</p>\r\n                        <p class=\"oldPrice\">¥1000.00</p>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\"><img src=\"images/detail01.jpg\" alt=\"\"></a>\r\n                        <p class=\"nowPrice\">¥10.00</p>\r\n                        <p class=\"oldPrice\">¥1000.00</p>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\"><img src=\"images/detail01.jpg\" alt=\"\"></a>\r\n                        <p class=\"nowPrice\">¥10.00</p>\r\n                        <p class=\"oldPrice\">¥1000.00</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </section>\r\n        <section class=\"pro_box\">\r\n            <div class=\"tit\"><h3>京东超市</h3></div>\r\n            <div class=\"con clearfix\">\r\n               <a href=\"#\" class=\"w50 f_left br\"><img src=\"images/cp1.jpg\" alt=\"\"></a>\r\n               <a href=\"#\" class=\"w50 f_right bb\"><img src=\"images/cp2.jpg\" alt=\"\"></a>\r\n               <a href=\"#\" class=\"w50 f_right\"><img src=\"images/cp3.jpg\" alt=\"\"></a>\r\n            </div>\r\n        </section>\r\n        <section class=\"pro_box\">\r\n            <div class=\"tit\"><h3>京东自营</h3></div>\r\n            <div class=\"con clearfix\">\r\n                <a href=\"#\" class=\"w50 f_right bl\"><img src=\"images/cp4.jpg\" alt=\"\"></a>\r\n                <a href=\"#\" class=\"w50 f_left bb\"><img src=\"images/cp5.jpg\" alt=\"\"></a>\r\n                <a href=\"#\" class=\"w50 f_left\"><img src=\"images/cp6.jpg\" alt=\"\"></a>\r\n            </div>\r\n        </section>\r\n        <section class=\"pro_box\">\r\n            <div class=\"tit\"><h3>京东热门</h3></div>\r\n            <div class=\"con clearfix\">\r\n                <a href=\"#\" class=\"w50 f_left br\"><img src=\"images/cp1.jpg\" alt=\"\"></a>\r\n                <a href=\"#\" class=\"w50 f_right bb\"><img src=\"images/cp2.jpg\" alt=\"\"></a>\r\n                <a href=\"#\" class=\"w50 f_right\"><img src=\"images/cp3.jpg\" alt=\"\"></a>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</div>\r\n</body>\r\n<script src=\"js/common.js\"></script>\r\n<script src=\"js/index.js\"></script>\r\n</html>\r\n```',29,100,'2019-03-18 08:12:10','2019-03-18 08:27:31'),(264,'### 主页 index.css\r\n> 整体内容版心设计\r\nheader 头部 fixed 定位，由于头部脱标，不受整体版心控制，所以头部需要再加一个盒子，做一个版心与整体版心一致。\r\n\r\n\r\n```\r\nbody {\r\n  background: #f5f5f5;\r\n}\r\n\r\n/* 版心 */\r\n.jd_container {\r\n  /*\r\n   最大宽度 640px，参考iPhone 4/5 设备宽度 320px 的2倍图。设置最大宽度，是防止内容在更大的屏幕上放大变模糊\r\n   最大宽度 750px，参考iPone 6/7/8 设备宽度 375px 的2倍图\r\n   最小宽度 320px，最小设备的宽度就是 320px\r\n   宽度自适应\r\n  */\r\n  max-width: 640px;\r\n  /* max-width: 750px; */\r\n  min-width: 320px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  /* height: 500px; */\r\n  /* background: pink; */\r\n}\r\n\r\n\r\n/* 顶部搜索：这里用的流式布局(百分比布局)，当然也可以用 flex 弹性布局 */\r\n/* 此处 .jd_header 布局一般称为“双飞翼布局”或“圣杯布局” */\r\n.jd_header {\r\n  /* \r\n    fixed 基于浏览器窗口大小，jd_container 版心管不住 fixed 容器 \r\n    解决办法是：在 fixed 容器中，再放一个版心 jd_header_box，这个版心(jd_header_box)与版心(jd_container)宽度重合\r\n  */\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 40px;\r\n  z-index: 999;\r\n  /* background: gray; */\r\n}\r\n.jd_header .jd_header_box {\r\n  max-width: 640px;\r\n  min-width: 320px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  height: 40px;\r\n  /* background: #d8505c; */\r\n  background: rgba(0,0,0,0);\r\n  position: relative;\r\n}\r\n.jd_header .jd_header_box a {\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.jd_header .jd_header_box .icon_logo {\r\n  left: 5px;\r\n  top: 6px;\r\n  width: 60px;\r\n  height: 34px;\r\n  /* background: url(\"../images/sprites.png\") no-repeat 0 -106px/200px 200px; */\r\n  background-position: 0 -106px; /* 因为使用了精灵图公共样式，这里只需要背景图定位就行了 */\r\n  /* 背景图尺寸，2倍图是400*400，要缩小后再使用 */\r\n  /* background-size: 200px 200px;  */\r\n}\r\n.jd_header .jd_header_box .login {\r\n  right: 0;\r\n  width: 50px;\r\n  height: 40px; \r\n  line-height: 40px;\r\n  text-align: center;\r\n  color: #fff;\r\n  /* background: #999; */\r\n}\r\n.jd_header .jd_header_box form {\r\n  width: 100%;\r\n  padding-left: 65px;\r\n  padding-right: 50px;\r\n}\r\n.jd_header .jd_header_box form input {\r\n  width: 100%;\r\n  height: 30px;\r\n  margin-top: 5px;\r\n  border-radius: 15px;\r\n  padding-left: 30px;\r\n}\r\n.jd_header .jd_header_box form .icon_search {\r\n  position: absolute;\r\n  left: 70px;\r\n  top: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  /* background: url(\"../images/sprites.png\") no-repeat -60px -109px/200px 200px; */\r\n  background-position: -60px -109px;\r\n}\r\n\r\n/* 轮播图 */\r\n.jd_banner {\r\n  width: 100%;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.jd_banner ul:first-child {\r\n  /* ul容器要放 10 张轮播图，所以宽度是 10 张图的宽度之和，即 1000% */\r\n  width: 1000%;\r\n  transform: translateX(-10%);\r\n  -webkit-transform: translateX(-10%);\r\n}\r\n.jd_banner ul:first-child li {\r\n  /* li元素要显示一张图片，所以其宽度是 */\r\n  width: 10%;\r\n  float: left;\r\n}\r\n.jd_banner ul:first-child li a {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.jd_banner ul:first-child li a img {\r\n  width: 100%;\r\n  display: block; /* 去掉图片下间隙 */\r\n}\r\n.jd_banner ul:last-child {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 6px;\r\n  width: 118px;\r\n  margin-left: -59px;\r\n}\r\n.jd_banner ul:last-child li {\r\n  width: 6px;\r\n  height: 6px;\r\n  border: 1px solid #fff;\r\n  border-radius: 3px;\r\n  float: left;\r\n  margin-right: 10px;\r\n}\r\n.jd_banner ul:last-child li:last-child {\r\n  margin-right: 0;\r\n}\r\n.jd_banner ul:last-child li.now {\r\n  background: #fff;\r\n}\r\n\r\n/* 导航栏 */\r\n.jd_nav {\r\n  width: 100%;\r\n  background: #fff;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.jd_nav ul {\r\n  width: 100%;\r\n  padding: 10px 0;\r\n}\r\n.jd_nav ul li {\r\n  width: 25%;\r\n  float: left;\r\n}\r\n.jd_nav ul li a {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.jd_nav ul li a img {\r\n  width: 40px;\r\n  height: 40px;\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n.jd_nav ul li a p {\r\n  font-size: 12px;\r\n  text-align: center;\r\n  color: #666;\r\n  padding: 5px 0;\r\n}\r\n\r\n/* 产品区: 公用样式 */\r\n.jd_product {\r\n  width: 100%;\r\n  padding: 0 5px;\r\n}\r\n.jd_product .pro_box {\r\n  width: 100%;\r\n  margin-top: 10px;\r\n  box-shadow: 0 0 1px #ccc;\r\n  background: #fff;\r\n  /* min-height: 200px; */\r\n}\r\n.jd_product .pro_box .tit.noborder {\r\n  border-bottom: none;\r\n}\r\n.jd_product .pro_box .tit {\r\n  height: 34px;\r\n  line-height: 34px;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.jd_product .pro_box .tit h3 {\r\n  font-weight: normal; /* 正常不加粗 */\r\n  font-size: 16px;\r\n  padding-left: 23px;\r\n  position: relative;\r\n}\r\n.jd_product .pro_box .tit h3::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 12px;\r\n  width: 3px;\r\n  height: 12px;\r\n  background: #d8505c;\r\n}\r\n\r\n/* 产品区：秒杀头部 */\r\n.sk_icon {\r\n  width: 16px;\r\n  height: 20px;\r\n  float: left;\r\n  margin-left: 10px;\r\n  margin-top: 7px;\r\n  background: url(\"../images/seckill-icon.png\") no-repeat 0 0/16px 20px;\r\n}\r\n.sk_text {\r\n  float: left;\r\n  margin-left: 10px;\r\n  color: #d8505c;\r\n}\r\n.sk_time {\r\n float: left; \r\n margin-left: 10px;\r\n}\r\n.sk_time span {\r\n  width: 16px;\r\n  height: 16px;\r\n  line-height: 16px;\r\n  background: #333;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  color: #fff;\r\n  margin-right: 3px;\r\n  float: left; /* 行内元素浮动后，变为行内块元素了，宽度就有效了 */\r\n  margin-top: 9px;\r\n}\r\n.sk_time span:nth-child(3n) {\r\n  background: #fff;\r\n  color: #333;\r\n  width: 3px;\r\n}\r\n\r\n/* 产品区：秒杀产品 */\r\n.sk_product {\r\n  width: 100%;\r\n  padding: 10px 0;\r\n}\r\n.sk_product li {\r\n  width: 33.33%;\r\n  float: left;\r\n}\r\n.sk_product li a {\r\n  display: block;\r\n  width: 100%;\r\n  border-right: 1px solid #ccc;\r\n}\r\n.sk_product li:last-child a {\r\n  border: none;\r\n}\r\n.sk_product li a img {\r\n  width: 64%;\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n.sk_product li p {\r\n  font-size: 12px;\r\n  padding: 5px 0;\r\n  text-align: center;\r\n}\r\n.sk_product li p.nowPrice {\r\n  color: #d8505c;\r\n}\r\n.sk_product li p.oldPrice {\r\n  color: #999;\r\n  text-decoration: line-through;\r\n}\r\n\r\n/* 产品区：组合样式 */\r\n.w50 {\r\n  width: 50%;\r\n}\r\n.w50 img {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.br {\r\n  border-right: 1px solid #ddd;\r\n}\r\n.bl {\r\n  border-left: 1px solid #ddd;\r\n}\r\n.bb {\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n```',29,100,'2019-03-18 08:27:05','2019-03-18 08:27:05'),(265,'### 主页 index.js\r\n> 入口函数\r\njs面向对象编程\r\n轮播图切换\r\n\r\n```\r\n// 入口函数\r\ndocument.addEventListener(\'DOMContentLoaded\', function(e){\r\n  // 实现轮播图，使用面向对象的方式编程\r\n  // 1.自动轮播图（注意：自动时无缝连接、手工滑动时无缝连接\r\n  // 2.点做对应的改变\r\n  // 3.实现滑动功能\r\n  // 4.当滑动的距离不够时，吸附回去\r\n  // 5.当滑动的距离足够时，切换图片 上一张或下一张\r\n  // 6.当滑动的速度足够时，切换图片 上一张或下一张\r\n  new Banner();\r\n});\r\n\r\n// 定义一个 Banner 类\r\nvar Banner = function (selector) {\r\n  // 丰富属性  \r\n  this.$el = document.querySelector(selector || \'.jd_banner\');  // 主体容器\r\n  this.width = this.$el.offsetWidth; // 每次切换的宽度，offsetWidth属性获取dom元素盒模型(width+border + padding)的宽度\r\n  this.$imageBox = this.$el.querySelector(\'ul:first-child\'); // 图片容器\r\n  this.$pointBox = this.$el.querySelector(\'ul:last-child\');  // 点容器\r\n  this.timer = null; // 定时器\r\n  this.interval = 2000; // 定时器切换的时间\r\n  this.index = 1; // banner图片的索引\r\n  this.swipeWidth = this.width/3; // 滑动多远后，可以做切换的距离\r\n\r\n  this.init();\r\n};\r\n\r\n// 丰富方法\r\n// 初始化方法\r\nBanner.prototype.init = function () { \r\n  this.autoPlay(); // 自动播放\r\n  this.animated(); // 监听动画(过渡)结束\r\n  this.initSwipe(); // 滑动功能\r\n};\r\n\r\n// 自动轮播的方法\r\nBanner.prototype.autoPlay = function () {\r\n  var _this = this;\r\n  this.timer = setInterval(function () {\r\n    // 动画的切换到下一张    \r\n    _this.index++;\r\n    var translateX = - _this.index * _this.width;\r\n    // 加过渡\r\n    _this.addTransition();\r\n    // 改变位移\r\n    _this.setTranslateX(translateX);\r\n  },_this.interval);\r\n};\r\n\r\n// 等切换到最后一张（索引为9）且动画执行完毕时，瞬间定位到第一章图（索引为1）的位置。（共8张banner图，但首位各重复了1张，即8123456781）\r\n// 监听动画（过渡）结束\r\nBanner.prototype.animated = function () {\r\n  var _this = this;\r\n  this.$imageBox.addEventListener(\'transitionend\',function () {\r\n    // 切换到最后一张，且动画执行完毕时，瞬间切换到第1张（索引为1）\r\n    // 为什么是 >=9 呢？index 为何会超过9呢？ 因为 定时器会一直往前走，index一会一直++，\r\n    // 而动画（过渡）却不一定执行（页面切换到后台时，动画不执行），动画不执行，index 到 9 时，就不能回到 1，反而继续增加到 10、11 ....\r\n    if (_this.index >= 9 ) {\r\n      _this.index = 1;\r\n      // 去掉过渡\r\n      _this.removeTransition();\r\n      // 改变位移\r\n      var translateX = - _this.index * _this.width;\r\n      _this.setTranslateX(translateX);\r\n    } else if (_this.index <= 0) { // 切换到第0张，且动画执行完毕时，瞬间切换到第8张(索引为8)\r\n      _this.index = 8;\r\n      // 去掉过渡\r\n      _this.removeTransition();\r\n      // 改变位移\r\n      var translateX = - _this.index * _this.width;\r\n      _this.setTranslateX(translateX);      \r\n    }\r\n    // 设置点的变化\r\n    _this.setPoint();\r\n  });\r\n};\r\n\r\n// 设置点的变化\r\nBanner.prototype.setPoint = function () {\r\n  this.$pointBox.querySelector(\'li.now\').classList.remove(\'now\');\r\n  this.$pointBox.querySelectorAll(\'li\')[this.index-1].classList.add(\'now\');\r\n};\r\n\r\n// 滑动功能\r\nBanner.prototype.initSwipe = function () {\r\n  var _this = this;\r\n\r\n  // 1.滑动（图片容器随着手指的滑动进行位移）\r\n  var startX = 0; // 起始点坐标\r\n  var startTime = 0; // 起始的时间\r\n  var distance = 0; // 滑动的距离\r\n\r\n  _this.$imageBox.addEventListener(\'touchstart\', function (e) {\r\n    startX = e.changedTouches[0].clientX;\r\n    startTime = Date.now();\r\n    clearInterval(_this.timer); // 滑动时，清除定时器，停止自动轮播。\r\n  });\r\n\r\n  _this.$imageBox.addEventListener(\'touchmove\', function (e) {\r\n    var moveX = e.changedTouches[0].clientX; // 滑动中的点坐标\r\n    distance = moveX - startX;\r\n    // 将要定位的位置 = 容器的现在的位置 + 滑动的距离（不分正负）\r\n    var translateX = - _this.index * _this.width + distance;\r\n    _this.removeTransition(); // 去掉过渡\r\n    _this.setTranslateX(translateX); // 改变位移\r\n  });\r\n\r\n  _this.$imageBox.addEventListener(\'touchend\', function (e) {\r\n    // 根据滑动速度判断是否切换：如果速度足够快，就切换；否则继续判断滑动距离\r\n    var s = Math.abs(distance); // 路程\r\n    var t = Date.now() - startTime; // 时间\r\n    var v = s / t; // 速度 px/ms  手速在 0.25 以上算快\r\n    // console.log(v);\r\n    // 手速超过 0.25 ，则切换\r\n    if (v > 0.25) {\r\n      if (distance > 0) {\r\n        // 右滑 上一张\r\n        _this.index --;\r\n      } else {\r\n        // 左滑 下一张\r\n        _this.index ++;\r\n      }\r\n      var translateX = - _this.index * _this.width;\r\n      _this.addTransition();\r\n      _this.setTranslateX(translateX);\r\n    } else {\r\n      // 根据滑动距离判断是否切换：滑动距离的绝对值，与swipeWidth比较，判断是否做切换\r\n      if (Math.abs(distance) > _this.swipeWidth) {\r\n        // 切换效果      \r\n        if (distance > 0) {\r\n          // 右滑 上一张\r\n          _this.index --;\r\n        } else {\r\n          // 左滑 下一张\r\n          _this.index ++;\r\n        }\r\n        var translateX = - _this.index * _this.width;\r\n        _this.addTransition();\r\n        _this.setTranslateX(translateX);\r\n      } else {\r\n        // 吸附效果\r\n        var translateX = - _this.index * _this.width;\r\n        _this.addTransition()\r\n        _this.setTranslateX(translateX);\r\n      }\r\n    }\r\n    // 滑动（切换或吸附）结束后，开启自动轮播\r\n    _this.autoPlay();\r\n  });\r\n};\r\n\r\n// 加过渡\r\nBanner.prototype.addTransition = function () {\r\n  this.$imageBox.style.transition = \'all 0.3s\';\r\n  this.$imageBox.style.webkitTrasition = \'all 0.3s\';\r\n};\r\n// 去过渡\r\nBanner.prototype.removeTransition = function () {\r\n  this.$imageBox.style.transition = \'none\';\r\n  this.$imageBox.style.webkitTrasition = \'none\';\r\n};\r\n// 改变位移\r\nBanner.prototype.setTranslateX = function (translateX) {\r\n  this.$imageBox.style.transform = \'translateX(\'+ translateX +\'px)\';\r\n  this.$imageBox.style.webkitTransform = \'translateX(\'+ translateX +\'px)\';\r\n};\r\n```',29,100,'2019-03-18 08:29:05','2019-03-18 08:31:26'),(266,'### 分类页 category.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>京东-分类页面demo</title>\r\n    <link rel=\"stylesheet\" href=\"css/base.css\">\r\n    <link rel=\"stylesheet\" href=\"css/category.css\">\r\n</head>\r\n<body>\r\n<!-- 全屏容器 -->\r\n<div class=\"jd_layout\">\r\n  <!-- 顶部通栏 -->\r\n  <header class=\"jd_topBar\">\r\n    <a href=\"\" class=\"icon_back\"></a>\r\n    <form action=\"\">\r\n      <input type=\"search\" placeholder=\"你好，京东\">\r\n    </form>\r\n    <a href=\"\" class=\"icon_menu\"></a>\r\n  </header>\r\n  <!-- 内容区域 -->\r\n  <div class=\"jd_content\">\r\n    <aside class=\"jd_left\">\r\n      <ul>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li class=\"now\"><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n        <li><a href=\"#\">热门推荐</a></li>\r\n      </ul>\r\n    </aside>\r\n    <article class=\"jd_right\">\r\n      <div class=\"jd_right_box\">\r\n        <a href=\"#\" class=\"banner\"><img src=\"images/banner_1.jpg\" alt=\"\"></a>\r\n        <div class=\"hot\">\r\n          <h3>热门分类</h3>\r\n          <ul class=\"clearfix\">\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"hot\">\r\n          <h3>热门分类</h3>\r\n          <ul class=\"clearfix\">\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"hot\">\r\n          <h3>热门分类</h3>\r\n          <ul class=\"clearfix\">\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n            <li><a href=\"#\"><img src=\"images/nv-fy.jpg\" alt=\"\"><p>毛呢短袖</p></a></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  </div>\r\n</div>\r\n</body>\r\n<script src=\"js/common.js\"></script>\r\n<script src=\"js/iscroll.js\"></script>  \r\n<script src=\"js/category.js\"></script>\r\n</html>\r\n```',29,100,'2019-03-18 08:30:05','2019-03-18 08:30:05'),(267,'### 分类页 category.css\r\n> 全屏布局（没有要版心，其实也可以加版心的，实际中建议加版心）\r\n区域滚动的必要条件：滚动的盒子要比其父盒子的面积大\r\nicon背景图标的使用：icon使用精灵图时，为只显示icon区域，又要扩大icon的点击面积，需要使用 background-origin: content-box; background-clip: content-box;\r\n\r\n```\r\n/* 全屏容器(不需要版心) */\r\nhtml, body {\r\n  height: 100%;\r\n}\r\n.jd_layout {\r\n  width: 100%;\r\n  height: 100%; /* 高度基于 body、html，所以要设置body和html的高度，这个容器的高度才会生效，实现区域滚动才有高度基础 */\r\n  /* background: red; */\r\n\r\n  /* 设置版心 */\r\n  /* max-width: 640px; */\r\n  /* min-width: 320px; */\r\n  /* margin: 0 auto; */\r\n}\r\n\r\n/* 顶部通栏 */\r\n.jd_topBar {\r\n  height: 45px;\r\n  width: 100%;\r\n  background: url(\"../images/header-bg.png\") repeat-x 0 0/1px 45px;\r\n  border-bottom: 1px solid #ddd;\r\n  position: absolute; /* 让顶部通栏不占高度，方便 .jd_content 高度设为 100% */\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 999;\r\n}\r\n.jd_topBar a {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 40px;\r\n  height: 44px;\r\n  /* background: pink; */\r\n  /* 之所以把 a 设置成比较大的区域（40*44），明显大于icon的面积（20*20），是因为大面积更方便点击 */\r\n  /* 保证内容区域 20*20，通过设置 padding 挤占内容区 */\r\n  padding: 12px 10px;\r\n  /* 让背景图从 内容区开始平铺，即设置平铺的原点 */\r\n  background-origin: content-box;\r\n  /* 裁剪内容以外的区域 */\r\n  background-clip: content-box; \r\n}\r\n.jd_topBar .icon_back {\r\n  left: 0;\r\n  background-position: -20px 0;\r\n}\r\n.jd_topBar .icon_menu {\r\n  right: 0;\r\n  background-position: -60px 0; \r\n}\r\n.jd_topBar form {\r\n  width: 100%;\r\n  padding: 0 40px;\r\n}\r\n.jd_topBar form input {\r\n  width: 100%;\r\n  height: 30px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 2px;\r\n  margin-top: 7px;\r\n  padding: 0 10px;\r\n}\r\n\r\n/* 内容容器 */\r\n.jd_content {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-top: 45px;\r\n  overflow: hidden;\r\n}\r\n/* 两栏自适应 */\r\n.jd_left {\r\n  width: 90px;\r\n  height: 100%;\r\n  float: left;\r\n  /* background: pink; */\r\n}\r\n.jd_left ul {\r\n  width: 100%;  \r\n}\r\n.jd_left ul li {\r\n  height: 50px;\r\n  line-height: 50px;\r\n  width: 100%;\r\n  background: #f3f4f5;\r\n  border-left: 1px solid #ccc;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.jd_left ul li a {\r\n  display: block;\r\n  width: 100%;\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n.jd_left ul li.now {\r\n  background: #fff;\r\n  border-right: none;  \r\n}\r\n.jd_left ul li.now a {\r\n  color: #d8505c\r\n}\r\n\r\n.jd_right {\r\n  overflow: hidden;\r\n  height: 100%;\r\n}\r\n.jd_right .jd_right_box  {\r\n  padding: 0 10px;\r\n}\r\n.jd_right .jd_right_box .banner {\r\n  display: block;\r\n  width: 100%;\r\n  padding-top: 10px;\r\n}\r\n.jd_right .jd_right_box .banner img {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.jd_right .jd_right_box .hot {\r\n  margin-top: 10px;\r\n}\r\n.jd_right .jd_right_box .hot h3 {\r\n  font-size: 12px;\r\n}\r\n.jd_right .jd_right_box .hot ul {\r\n  width: 100%;\r\n  margin-top: 10px;\r\n}\r\n.jd_right .jd_right_box .hot ul li {\r\n  width: 33.3333%;\r\n  float: left;\r\n}\r\n.jd_right .jd_right_box .hot ul li a {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.jd_right .jd_right_box .hot ul li a img {\r\n  display: block;\r\n  width: 60px;\r\n  height: 60px;\r\n  margin: 0 auto;\r\n}\r\n.jd_right .jd_right_box .hot ul li p {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n  padding: 5px 0;\r\n}\r\n```',29,100,'2019-03-18 08:36:42','2019-03-18 08:36:42'),(268,'### 分类页 category.js\r\n```\r\n// 入口函数\r\ndocument.addEventListener(\'DOMContentLoaded\', function (e) {\r\n  // 左侧栏区域滚动\r\n  // 1.使用 iscroll 插件，实现区域滚动的效果。\r\n  // 2.下载 https://github.com/cubiq/iscroll ，引入\r\n  // 3.注意：只能是一个父容器套一个子容器\r\n  // 4.实现滚动效果的条件：子容器尺寸要大于父容器尺寸\r\n  // 4.初始化：传入选择器 或dom对象\r\n  new IScroll(\'.jd_left\');\r\n\r\n  // 右侧栏区域滚动\r\n  new IScroll(\'.jd_right\', {\r\n    scrollX:false,\r\n    scrollY:true\r\n  });\r\n});\r\n```',29,100,'2019-03-18 08:37:46','2019-03-18 08:37:46'),(269,'## 官网地址\r\n最接近原生APP体验的高性能前端框架\r\n\r\nUI组件：http://dev.dcloud.net.cn/mui/ui/\r\n组件效果预览（打开后用手机模式查看）：http://dcloud.io/hellomui/',30,100,'2019-03-18 10:12:30','2019-03-18 10:12:59'),(270,'## mui的使用\r\n1.框架下载github地址：https://github.com/dcloudio/mui\r\n2.复制dist目录下的3个目录`js`、`css`、`fonts` 到自己的项目中（通常是在项目中建一个目录：`mui`）',30,100,'2019-03-18 10:39:27','2019-03-18 13:00:53'),(271,'### Font Awesome 图标字体的使用\r\n一套绝佳的图标字体库和CSS框架\r\n官网：http://fontawesome.dashgame.com/\r\n在官网下载后，复制 `css`和`fonts`目录到项目目录中（通常在项目中建一个目录：`fontAwesome`）\r\n\r\n```\r\n|-- [ 128]  css\r\n|   |-- [ 37K]  font-awesome.css\r\n|   |-- [ 30K]  font-awesome.min.css\r\n|-- [ 256]  fonts\r\n    |-- [132K]  FontAwesome.otf\r\n    |-- [162K]  fontawesome-webfont.eot\r\n    |-- [434K]  fontawesome-webfont.svg\r\n    |-- [162K]  fontawesome-webfont.ttf\r\n    |-- [ 96K]  fontawesome-webfont.woff\r\n    |-- [ 75K]  fontawesome-webfont.woff2\r\n```\r\n然后再 html 文件中，引入 `<link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">` 就可以使用 Font Awesome 图标字体了\r\n> 图标字体具体的实现一般需要两个文件（一个css文件，一个font文件），如：`font-awesome.min.css` 、`fontawesome-webfont.woff2`\r\n所以，用 Font Awesome 通常会要加载 100k 多的文件\r\n\r\n具体使用如：`<a href=\"#\"><span class=\"fa fa-chevron-left\"></span></a>`',30,100,'2019-03-18 13:00:14','2019-03-18 15:23:46'),(272,'### zepto 的使用\r\ngithub地址：https://github.com/madrobby/zepto\r\n默认有5个模块，根据需要可以打包更多模块。（打包的方法带研究）\r\n> zepto 其实是jQuery的阉割版，其更注重效率，更适合移动端；而jQuery更注重浏览器低版本的兼容，更适合PC端。\r\n\r\n把打包后的 zepto.min.js 复制到项目中（通常在项目中建一个目录: `zepto`）',30,100,'2019-03-18 13:20:11','2019-03-18 13:32:49'),(273,'### art-Template 模板引擎的使用\r\ngithub地址：https://github.com/aui/art-template\r\n中文文档：https://aui.github.io/art-template/zh-cn/index.html\r\n\r\n> art-template 是一个简约、超快的模板引擎。它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器 \r\n\r\n把 lib 目录中的 `template-web-js` 文件复制到项目中（通常在项目中新建一个目录：`arTemplate`）\r\n\r\n**模板语法1（js语法，原生语法）**：只有原生语法（即<%%>）中可以使用ji语句\r\n>循环：`<%  在这里写js语句，这里有一个固定的接收数据的默认变量叫做 $data %>` `<% for(var i = 0 ; i< $data.list.length ; i++){ %>` , `<% } %>`\r\n取数据：`<h1><%=$data.title%></h1>`，`<h1><%=title%></h1>`（对象内的属性可以直接使用）\r\n\r\n**模板语法2（{ {} } 语法，简洁语法）**：简洁语法（即{ {} }）中不能使用js语句，不过可以定义变量 { { set dealutValue = \'124\' } }\r\n> 循环： `{ {each list item i} }`   `{ {/each} }` 或者 `{ {each list }`   `{ {/each} }` (不自定义item i 的时候，默认是 $value 和 $index)\r\n取数据：`<h1>{ {$data.title} }</h1>` ,   `<h1>{ { title } }</h1>`（对象内的属性可以直接使用）\r\n\r\n注意：在arti-Template模板引擎中，使用原生语法（即<%%>）时，不能使用js函数、对象（但可以使用js语句，如三元运算符），这样做的目的是为了提高模板引擎的性能（函数会有寻找变量的性能消耗）。\r\n```\r\n// 由于 art-Template 不支持js外部函数，但是可以将外部函数当参数传入模板，再在模板中调用函数\r\n// 模板定义部分:  虽然不能直接使用js外部函数，但是可以使用传入的外部函数\r\n<% for(var i=list.length-1; i>=0; i--) { %>\r\n	<li><a href=\"/mobile/searchList?key=<%=ec(list[i])%>\"><%=list[i]%></a><span data-index=\"<%=i%>\" class=\"fa fa-close\"></span></li>\r\n<% } %>\r\n\r\n// 模板调用部分：传入js函数给模板使用\r\nthis.$searchHistory.html(template(\'history\', {list:this.list, ec: encodeURIComponent}));\r\n\r\n```\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<!--渲染：就是把数据转化成html结构输出在页面中-->\r\n<!-- 行业内模板引擎：artTemplate template-web.js-->\r\n<ul>\r\n   <!-- <li>我是XXX，今年xx岁</li>\r\n    <li>我是XXX，今年xx岁</li>\r\n    <li>我是XXX，今年xx岁</li>\r\n    <li>我是XXX，今年xx岁</li>\r\n    <li>我是XXX，今年xx岁</li>-->\r\n</ul>\r\n<!-- 模板的定义 -->\r\n<script type=\"text/template\" id=\"tpl\">\r\n    <h1>{ { $data.title } }</h1>\r\n    <h1>{ { title } }</h1>\r\n    { {each list item i} }\r\n    <li> { {item.age>188?\'妖怪\':\'\'} } 我是{ {item.name} }，今年{ {item.age} }岁</li>\r\n    { {/each} }\r\n    { {each list} }\r\n    <li>\r\n        我是{ {$value.name} }，今年{ {$value.age} }岁  索引：{ {$index} }\r\n        { {if $value.age > 188} }\r\n        妖怪\r\n        { {/if} }\r\n    </li>\r\n    { {/each} }\r\n</script>\r\n<script src=\"template-web.js\"></script>\r\n<script>\r\n	// 模板数据\r\n    var data = [\r\n        {name:\'tony\',age:18},\r\n        {name:\'tony1\',age:188},\r\n        {name:\'tony2\',age:1888},\r\n        {name:\'tony3\',age:18888}\r\n    ]\r\n	// 模板的使用\r\n    var html = template(\'tpl\',{list:data,title:\'测试\'});\r\n	// 模板的渲染\r\n    document.querySelector(\'ul\').innerHTML = html;\r\n</script>\r\n</body>\r\n</html>\r\n```',30,100,'2019-03-18 13:30:45','2019-03-22 14:03:43'),(274,'### mui 项目骨架\r\n>引入 mui.min.css 、mui.min.js ：就可以用 mui 框架了\r\n引入了 font-awesome.min.css ：就可以用 Font Awesome 字体图标了\r\n引入了 zepto.min.js ：就可以用 zepto 方便的操作 dom 元素了\r\n\r\nindex.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/index.css \">\r\n  <title>乐淘首页</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/index.js\"></script>\r\n</html>\r\n```',30,100,'2019-03-18 13:42:00','2019-03-18 15:04:44'),(275,'## 浮动\r\n> float 脱标不占位特性\r\n一旦盒子被标记为浮动，这个盒子就脱离了ＤＯＭ，父亲盒子的高度不会受浮动子盒子的影响。\r\n并且会影响其他容器的【内容】布局，其他内容会环绕这个浮动盒子。\r\n\r\n元素一旦浮动后: 会变成一个行内块元素，设置宽高就可以生效了',27,100,'2019-03-19 02:37:18','2019-03-22 09:55:34'),(276,'## 图片\r\n### 去除图片下间隙\r\n```css\r\nimg {\r\n	display: block;\r\n}\r\n```',27,100,'2019-03-19 02:41:41','2019-03-19 02:41:57'),(277,'### 解决MUI阻止a标签默认跳转事件\r\n问题：在mui框架中，上拉下拉的时候，mui框架会阻止A标签的跳转，防止上拉下拉的时候误跳转了。不过此时，点击 A标签中的`button`到是可以代替A标签跳转，且button不需要绑定事件或其他设置就可以跳转。\r\n解决MUI阻止a标签默认跳转事件： http://www.bcty365.com/content-146-6269-1.html',30,100,'2019-03-22 07:09:35','2019-03-22 07:34:46'),(278,'### 超过1行或2行 (自动...省略)\r\nmui的`mui-ellipsis-2`表示超过2行自动出现\"...\"，2 代表2行，1代表1行。\r\n```\r\n<p class=\"mui-ellipsis-2\">{ { $value.proName } }</p>\r\n```',30,100,'2019-03-22 08:02:41','2019-03-22 08:04:13'),(279,'## 元素',27,100,'2019-03-22 08:25:12','2019-03-22 08:25:12'),(280,'### 行内元素可以用 padding 撑开宽高\r\n```\r\n.pro_size span {\r\n  padding: 5px; /* 行内元素可以用 padding 撑开宽高 */\r\n  border: 1px solid #666666;\r\n  line-height: 32px;\r\n}\r\n```',27,100,'2019-03-22 08:25:18','2019-03-22 08:28:46'),(281,'## zepto',8,100,'2019-03-24 09:41:25','2019-03-24 09:41:25'),(282,'### zepto 一次性获取表单元素内容\r\n通过zepto的serialize()、serializeArray()方法，一次性获取表单内 表单元素的所有数据\r\n`serialize()`获得的数据格式(字符串)：`key=value&key1=value1`\r\n`serializeArray()`获得的数据格式(数组)：`[{name: \'key\', value: \'value\'}, {name: \'key1\', value: \'value1\'}]`\r\n这两种格式序列化数据，`ajax`都是支持的，可以`ajax`中直接使用\r\n```\r\n$(function (){\r\n  $(\'form\').on(\'submit\', function (e) {\r\n    // form 表单默认会跳转，这里要做异步登录，需要阻止form 的默认跳转行为\r\n    e.preventDefault();\r\n\r\n    // 通过zepto的serialize()、serializeArray()方法，一次性获取表单内 表单元素的所有数据\r\n    // serialize()获得的数据格式(字符串)：key=value&key1=value1\r\n    // serializeArray()获得的数据格式(数组)：[{name: \'key\', value: \'value\'}, {name: \'key1\', value: \'value1\'}]\r\n    // 这两种格式序列化数据，ajax都是支持的，可以ajax中直接使用\r\n    var data = $(this).serializeArray();\r\n    // 提交 ajax\r\n    $.ajax({\r\n      type: \'post\',\r\n      url: \'/user/login\',\r\n      data: data,\r\n      success: function (data) {\r\n        if (data.success == true) {\r\n          // 登录成功\r\n          var returnUrl = lt.getParamsByUrl().returnUrl;\r\n          if (returnUrl) {\r\n            location.href = returnUrl;\r\n          } else {\r\n            location.href = \'/mobile/user/index.html\';\r\n          }\r\n        } else {\r\n          // 登录失败\r\n          mui.toast(data.message);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n```',8,100,'2019-03-24 09:43:09','2019-03-24 09:43:47'),(283,'## 项目简介\r\n### 项目地址\r\ngithub地址：https://github.com/andy-love-coding/letao_demo\r\n### 项目初始化步骤\r\n1.git clone 项目\r\n```\r\ngit clone https://github.com/andy-love-coding/letao_demo.git\r\n```\r\n2.安装第三放包：npm install 或 npm i\r\n3.用`docs/letao初始化.sql`文件，创建`letao`数据库 (默认用户名：itcast  密码：111111)\r\n4.修改数据库配置文件：models/db.js\r\n```\r\nconst pool  = mysql.createPool({\r\n    host : \'127.0.0.1\',\r\n    user : \'homestead\',\r\n    password : \'secret\',\r\n    database : \'letao\'\r\n});\r\n```\r\n5.启动服务器\r\n服务器端口是：3000\r\n接口举例：GET http://home.test:3000/category/queryTopCategory\r\n前端页面访问举例：http://home.test:3000/mobile/category.html\r\n```\r\n// 在项目根目录下执行以下命令\r\nnpm start\r\n```\r\n### 项目原型图\r\n原型图：\r\n![V0fmaR.png](https://t1.picb.cc/uploads/2019/03/25/V0fmaR.png)\r\n### 主要功能及知识点\r\n0.布局：上下固定，中间区域滚动（mui实现的区域滚动）\r\n1.mui 移动端框架的使用\r\n2.轮播图（mui实现）\r\n3.下拉刷新、上拉加载（搜索结果页 mui实现）\r\n4.mui 列表（购物车页、个人中心页）\r\n5.mui 表单（登录页）\r\n6.mui 滑动（购物车页）\r\n7.mui 对话框（购物车页）\r\n8.模板引擎 art-Template\r\n9.字体图标 font-Awesome\r\n10.zepto 的使用\r\n11.JS面向对象编程',31,100,'2019-03-25 14:44:30','2019-04-24 07:09:30'),(284,'## 项目代码',31,100,'2019-03-25 14:58:39','2019-03-25 14:58:39'),(285,'### 目录结构 (指移动端mobile目录)\r\n```\r\n|-- assets\r\n|   |-- arTemplate\r\n|   |   `-- template-web.js\r\n|   |-- fontAwesome\r\n|   |   |-- css\r\n|   |   |   |-- font-awesome.css\r\n|   |   |   `-- font-awesome.min.css\r\n|   |   `-- fonts\r\n|   |       |-- FontAwesome.otf\r\n|   |       |-- fontawesome-webfont.eot\r\n|   |       |-- fontawesome-webfont.svg\r\n|   |       |-- fontawesome-webfont.ttf\r\n|   |       |-- fontawesome-webfont.woff\r\n|   |       `-- fontawesome-webfont.woff2\r\n|   |-- mui\r\n|   |   |-- css\r\n|   |   |   |-- mui.css\r\n|   |   |   `-- mui.min.css\r\n|   |   |-- fonts\r\n|   |   |   `-- mui.ttf\r\n|   |   `-- js\r\n|   |       |-- mui.js\r\n|   |       `-- mui.min.js\r\n|   `-- zepto\r\n|       `-- zepto.min.js\r\n|-- css\r\n|   |-- category.css\r\n|   |-- index.css\r\n|   |-- mobile.css\r\n|   |-- product.css\r\n|   |-- search.css\r\n|   |-- searchList.css\r\n|   `-- user\r\n|       |-- cart.css\r\n|       |-- index.css\r\n|       `-- login.css\r\n|-- images\r\n|-- js\r\n|   |-- category.js\r\n|   |-- index.js\r\n|   |-- mobile.js\r\n|   |-- product.js\r\n|   |-- search.js\r\n|   |-- searchList.js\r\n|   `-- user\r\n|       |-- cart.js\r\n|       |-- index.js\r\n|       `-- login.js\r\n|-- category.html\r\n|-- index.html\r\n|-- product.html\r\n|-- search.html\r\n|-- searchList.html\r\n`-- user\r\n    |-- cart.html\r\n    |-- index.html\r\n    `-- login.html\r\n```',31,100,'2019-03-25 14:59:37','2019-03-25 15:10:21'),(286,'### 公共css和js\r\n#### 公共 css/mobile.css\r\n```\r\n/* 共用样式 */\r\n\r\n/* 主体容器：绝对定位的方式造一个【全屏容器】 */\r\n.lt_container {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute; /* absolute 基于最近的有定位的上级元素，这里会找到 window，所以这个是全屏容器  */\r\n  top: 0;\r\n  left: 0;\r\n  /* background: red; */\r\n}\r\n/* 头部 导航 */\r\n.lt_header {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 45px;\r\n  background: #069;\r\n  color: #fff;\r\n  line-height: 45px;\r\n}\r\n.lt_header h3 {\r\n  font-size: 18px;\r\n  text-align: center;\r\n  margin: 0;\r\n  line-height: 45px;\r\n  font-weight: normal;\r\n}\r\n.lt_header a {\r\n  color: #fff;\r\n  width: 45px;\r\n  height: 45px;\r\n  text-align: center;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.lt_header .left {\r\n  left: 0;\r\n}\r\n.lt_header .right {\r\n  right: 0;\r\n}\r\n\r\n/* 中间 内容 */\r\n.lt_content { \r\n  width: 100%;\r\n  height: 100%;\r\n  padding-top: 45px;\r\n  padding-bottom: 55px;  \r\n}\r\n/* lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容 */\r\n.lt_content .lt_wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: #fff;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 底部 页签 */\r\n.lt_tabs {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  height: 55px;\r\n  width: 100%;\r\n  background: #069;\r\n}\r\n.lt_tabs a {\r\n  width: 25%;\r\n  float: left;\r\n  text-align: center;\r\n  color: #fff;\r\n  padding-top: 8px;\r\n}\r\n.lt_tabs a p {\r\n  color: #fff;\r\n  font-size: 12px;\r\n  margin-bottom: 0;\r\n}\r\n.lt_tabs a.now {\r\n  color: #fa0;\r\n}\r\n.lt_tabs a.now p {\r\n  color: #fa0;\r\n}\r\n\r\n/* 产品容器 */\r\n.lt_product {\r\n  padding: 0 10px;\r\n  padding-bottom: 10px; \r\n}\r\n.lt_product ul {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  width: 100%;\r\n}\r\n.lt_product ul li {\r\n  width: 50%;\r\n  float: left;\r\n  margin-top: 10px; \r\n}\r\n.lt_product ul li:nth-child(2n+1) {\r\n  padding-right: 5px;\r\n}\r\n.lt_product ul li:nth-child(2n+2) {\r\n  padding-left: 5px;\r\n}\r\n.lt_product ul li a{\r\n  display: block;\r\n  width: 100%;\r\n  /* height: 200px; */\r\n  box-shadow: 0 0 1px #666;\r\n  /* border: 1px solid #666; */\r\n}\r\n.lt_proBox {\r\n  padding-bottom: 5px;\r\n}\r\n.lt_proBox img  {\r\n  width: 100%;\r\n  display: block;\r\n  color: #444;\r\n}\r\n.lt_proBox .name {\r\n  padding: 0 5px;\r\n}\r\n.lt_proBox .price {\r\n  font-size: 12px;\r\n  text-align: center;  \r\n}\r\n.lt_proBox .price .nowPrice {\r\n  color: red;\r\n}\r\n.lt_proBox .price .oldPrice {\r\n  color: #ccc;\r\n  text-decoration: line-through;\r\n}\r\n.lt_proBox button {\r\n  display: block;\r\n  margin: 0 auto;\r\n  background: #069;\r\n  border-color: #069;\r\n  color: #fff;\r\n}\r\n/* 搜索框 */\r\n.lt_search {\r\n  width: 100%;\r\n  padding: 10px;\r\n  position: relative;\r\n}\r\n.lt_search input {\r\n  width: 100%;\r\n  height: 30px;\r\n  border: 1px solid #069;\r\n  border-radius: 2px;\r\n  background: #fff;\r\n  margin: 0;\r\n  padding: 0 10px;\r\n  text-align: left;\r\n  font-size: 12px;\r\n}\r\n.lt_search a{\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  width: 60px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  background: #069;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  /* border-radius: 0 2px 2px 0; */\r\n  border-top-right-radius: 2px;\r\n  border-bottom-right-radius: 2px;\r\n}\r\n```\r\n#### 公共 js/mobile.js\r\n```\r\n// 共用的函数\r\n\r\n// 为了防止全局变量污染，我们把全局方法，定义在一个对象中，这样只用注意着一个变量就够了\r\nif(!window.lt) {\r\n  window.lt = {};\r\n}\r\n\r\n// 1.封装一个获取地址栏传参的方法\r\nlt.getParamsByUrl = function () {\r\n  // 把 ?name=andy&age=30 转换成 { name:\"andy\", age: \"30\" }\r\n  var paramsObj = {};\r\n\r\n  var search = location.search; // 获取 ? 号参数\r\n  if (search) { // 如果?号参数存在\r\n    search = search.replace(/^\\?/, \'\'); // 去掉参数中的 ？\r\n    if (search) { // 去掉?号后参数依然存在，格式：name=andy&age=30\r\n      searchArr = search.split(\'&\');\r\n      searchArr.forEach(function(item,i) {\r\n        // item = \"key=value\"\r\n        itemArr = item.split(\'=\');\r\n        // itemArr = [\"key\",\"value\"]\r\n        paramsObj[itemArr[0]] = decodeURIComponent(itemArr[1]);\r\n      });\r\n    }\r\n  }\r\n\r\n  return paramsObj;\r\n}\r\n\r\n// 2. 登录拦截：基于zepto的ajax方法，重构success方法\r\nlt.ajaxCheckLogin = function (params) {\r\n  // params.success 修改一下，增加登录拦截业务\r\n  var success = params.success; // 保留之前的成功回调函数\r\n  params.success = function (data) { // 重构 params 中的success\r\n    if(data.error ===400) { // 没有登录\r\n      params.loginBefore && params.loginBefore(); // 登录前的回调函数\r\n      location.href = \'/mobile/user/login.html?returnUrl=\' + encodeURIComponent(location.href);\r\n    } else { // 已登录\r\n      success && success(data);\r\n    }\r\n  }\r\n  $.ajax(params);\r\n};\r\n```',31,100,'2019-03-25 15:07:27','2019-04-10 12:29:31'),(287,'### 首页\r\n#### 首页 index.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/index.css \">\r\n  <title>乐淘首页</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <!-- <a href=\"#\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a> -->\r\n    <h3>乐淘电商</h3>\r\n    <!-- <a href=\"#\" class=\"right\"><span class=\"fa fa-search\"></span></a> -->\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n        <div class=\"mui-scroll-wrapper\">\r\n          <div class=\"mui-scroll\">\r\n            <!-- 轮播图：会自动初始化 -->\r\n            <div class=\"mui-slider\">\r\n              <div class=\"mui-slider-group mui-slider-loop\">\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner4.png\" /></a></div>\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner1.png\" /></a></div>\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner2.png\" /></a></div>\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner3.png\" /></a></div>\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner4.png\" /></a></div>\r\n                <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"images/banner1.png\" /></a></div>\r\n              </div>\r\n              <div class=\"mui-slider-indicator\">\r\n                <div class=\"mui-indicator mui-active\"></div>\r\n                <div class=\"mui-indicator\"></div>\r\n                <div class=\"mui-indicator\"></div>\r\n                <div class=\"mui-indicator\"></div>\r\n              </div>\r\n            </div>\r\n            <!-- 导航栏 -->\r\n            <div class=\"lt_nav mui-clearfix\">\r\n              <a href=\"#\"><img src=\"images/nav1.png\" alt=\"\"></a>\r\n              <a href=\"#\"><img src=\"images/nav2.png\" alt=\"\"></a>\r\n              <a href=\"#\"><img src=\"images/nav3.png\" alt=\"\"></a>\r\n              <a href=\"#\"><img src=\"images/nav4.png\" alt=\"\"></a>\r\n              <a href=\"#\"><img src=\"images/nav5.png\" alt=\"\"></a>\r\n              <a href=\"#\"><img src=\"images/nav6.png\" alt=\"\"></a>\r\n            </div>\r\n            <div class=\"lt_product\">\r\n              <ul class=\"mui-clearfix\">\r\n                <li>\r\n                  <a href=\"#\" class=\"lt_proBox\">\r\n                    <img src=\"images/detail.jpg\" alt=\"\">\r\n                    <p class=\"name mui-ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"nowPrice\">¥100.00</span>\r\n                      <span class=\"oldPrice\">¥1000.00</span>\r\n                    </p>\r\n                    <button>立即购买</button>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#\" class=\"lt_proBox\">\r\n                    <img src=\"images/detail.jpg\" alt=\"\">\r\n                    <p class=\"name mui-ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"nowPrice\">¥100.00</span>\r\n                      <span class=\"oldPrice\">¥1000.00</span>\r\n                    </p>\r\n                    <button>立即购买</button>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#\" class=\"lt_proBox\">\r\n                    <img src=\"images/detail.jpg\" alt=\"\">\r\n                    <p class=\"name mui-ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"nowPrice\">¥100.00</span>\r\n                      <span class=\"oldPrice\">¥1000.00</span>\r\n                    </p>\r\n                    <button>立即购买</button>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#\" class=\"lt_proBox\">\r\n                    <img src=\"images/detail.jpg\" alt=\"\">\r\n                    <p class=\"name mui-ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"nowPrice\">¥100.00</span>\r\n                      <span class=\"oldPrice\">¥1000.00</span>\r\n                    </p>\r\n                    <button>立即购买</button>\r\n                  </a>\r\n                </li>                \r\n                <li>\r\n                  <a href=\"#\" class=\"lt_proBox\">\r\n                    <img src=\"images/detail.jpg\" alt=\"\">\r\n                    <p class=\"name mui-ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"nowPrice\">¥100.00</span>\r\n                      <span class=\"oldPrice\">¥1000.00</span>\r\n                    </p>\r\n                    <button>立即购买</button>\r\n                  </a>\r\n                </li>                \r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>      \r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"index.html\" class=\"now\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"user/index.html\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/index.js\"></script>\r\n</html>\r\n```\r\n#### 首页 css/index.css\r\n```\r\n.lt_nav {\r\n  width: 100%;\r\n  padding: 10px;\r\n  padding-bottom: 0;\r\n}\r\n.lt_nav a {\r\n  float: left;\r\n  width: 33.3333%;\r\n}\r\n.lt_nav a img {\r\n  width: 100%;\r\n  display: block;\r\n}\r\n```\r\n#### 首页 js/index.js\r\n```\r\n// 用 zepto 的入口函数\r\n$(function () {\r\n  // 轮播图\r\n  mui(\'.mui-slider\').slider({\r\n    interval:3000//自动轮播周期，若为0则不自动播放，默认为0；\r\n  });\r\n  // 区域滚动\r\n  mui(\'.mui-scroll-wrapper\').scroll({\r\n    deceleration: 0.0005, //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\r\n    indicators: false //是否显示滚动条\r\n  });\r\n});\r\n```',31,100,'2019-03-25 15:13:46','2019-03-25 15:30:27'),(288,'### 分类页\r\n#### 分类页 category.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/category.css \">\r\n  <title>乐淘分类</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n    <h3>商品分类</h3>\r\n    <a href=\"search.html\" class=\"right\"><span class=\"fa fa-search\"></span></a>\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <!-- 左侧 -->\r\n      <aside class=\"cateLeft\">\r\n        <!-- 需要渲染的一级类目 -->\r\n      </aside>\r\n      <!-- 右侧 -->\r\n      <article class=\"cateRight\">\r\n        <!-- 需要渲染的二级分类 -->\r\n      </article>\r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"index.html\" ><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"category.html\" class=\"now\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"user/index.html\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script type=\"text/template\" id=\"top\">\r\n  <ul>\r\n    { { each rows } } \r\n    <li class=\"{ { $index===0?\'now\':\'\' } }\"><a data-id={ { $value.id } } href=\"javascript:;\">{ {$value.categoryName} }</a></li>\r\n    { { /each } }\r\n  </ul>\r\n</script>\r\n<script type=\"text/template\" id=\"second\">\r\n  <ul>\r\n    { { if rows.length } }\r\n      { { each rows } }\r\n      <li><a href=\"#\"><img src=\"{ { $value.brandLogo } }\" alt=\"\"><p>{ { $value.brandName } }</p></a></li>\r\n      { { /each } }\r\n    { { else } }\r\n      <p style=\"text-align: center; padding: 5px;\">还没有二级分类</p>\r\n    { { /if } }\r\n  </ul>\r\n</script>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"assets/arTemplate/template-web.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/category.js\"></script>\r\n</html>\r\n```\r\n#### 分类页 css/category.css\r\n```\r\n/* 两栏自适应：左侧 */\r\n.cateLeft {\r\n  width: 90px;\r\n  height: 100%;\r\n  float: left;\r\n  overflow: hidden;\r\n  /* background: pink; */\r\n}\r\n.cateLeft ul {\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n.cateLeft ul li {\r\n  width: 90px;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  background: #f3f4f5;\r\n  border-right: 1px solid #ccc;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.cateLeft ul li a {\r\n  display: block;\r\n  text-align: center;\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n.cateLeft ul li.now {\r\n  border-right: none;\r\n  background: #fff;\r\n}\r\n.cateLeft ul li.now a {\r\n  color: red;\r\n}\r\n\r\n/* 两栏自适应：左侧 */\r\n.cateRight {\r\n  overflow: hidden;\r\n  height: 100%;\r\n}\r\n.cateRight ul {\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n.cateRight ul li {\r\n  width: 33.3333%;\r\n  float: left;\r\n}\r\n.cateRight ul li a {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.cateRight ul li a img {\r\n  display: block;\r\n  width: 60px;\r\n  height: 60px;\r\n  margin: 0 auto;\r\n}\r\n.cateRight ul li a p {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n```\r\n#### 分类页 js/category.js\r\n```\r\n// zepto 入口函数\r\n$(function () {\r\n  // 1. 渲染一级分类\r\n  // 2. 渲染第一个一级分类的二级分类\r\n  // 3. 点击一级分类时，选中当前分类，渲染其对应的二级分类\r\n  // 4. 返回上一次的页面\r\n  // 5. 进入搜索中心页面\r\n  new App();\r\n});\r\nvar App = function () {\r\n  this.$top = $(\'.cateLeft\');\r\n  this.$second = $(\'.cateRight\');\r\n  this.init();\r\n};\r\n\r\n/*\r\nApp.prototype.init = function () {};\r\nApp.prototype.renderTop = function () {};\r\n这种单个添加方法到prototype原型中的方法，可以用对象的形式一次添加 App.prototype = {}\r\n*/\r\nApp.prototype = {\r\n  init: function () {\r\n    var that = this;\r\n    // 渲染一级分类\r\n    this.renderTop(function(data) {\r\n      // 根据一级分类的结果，渲染二级分类      \r\n      that.renderSecond(data.rows[0].id);\r\n    });\r\n    this.bindEvent();\r\n  },\r\n  // 渲染一级分类\r\n  renderTop: function (callback) {\r\n    var that = this;\r\n    // 1. 获取数据\r\n    // 2. 完成渲染\r\n    $.ajax({\r\n      type: \'get\',\r\n      url: \'/category/queryTopCategory\', \r\n      data: \'\',\r\n      success: function (data) {\r\n        that.$top.html(template(\'top\', data));\r\n        // 当传入了回调函数，才会去调用回调函数（利用回调函数传递异步请求的数据）\r\n        callback && callback(data);\r\n      }\r\n    });    \r\n  },\r\n  // 渲染二级分类\r\n  renderSecond: function (id) {\r\n    $.ajax({\r\n      type: \'get\',\r\n      url: \'/category/querySecondCategory\',\r\n      data: {\r\n        id: id\r\n      },\r\n      success: (data) => { // es6 写法，会保持上级作用域中的 this 不变\r\n        this.$second.html(template(\'second\',data));\r\n      }\r\n    });\r\n  },\r\n  // 点击一级分类，选中当前分类，并渲染二级分类\r\n  bindEvent: function() {\r\n    var that = this;\r\n    // 事件委派（委派给li下的a）\r\n    // 这里“tap”是 mui 实现的，注意千万不要再在 zepto 中集成 touch 模块，否则会绑定两次tap\r\n    this.$top.on(\'tap\', \'li a\', function() {\r\n      var $a = $(this); // this 指向 a 元素\r\n      $a.parent(\'li\').addClass(\'now\').siblings(\'li\').removeClass(\'now\');\r\n      that.renderSecond(this.dataset.id);\r\n    });\r\n  }\r\n};\r\n```',31,100,'2019-03-25 15:20:22','2019-03-25 15:30:10'),(289,'### 搜索中心\r\n#### 搜索中心 search.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/search.css \">\r\n  <title>搜索中心</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n    <h3>搜索中心</h3>\r\n    <a href=\"search.html\" class=\"right\"><span class=\"fa fa-search\"></span></a>\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <!-- 搜索框 -->\r\n      <div class=\"lt_search\">\r\n        <input type=\"search\" placeholder=\"根据商品关键字进行搜索\">\r\n        <a href=\"javascript:;\">搜索</a>\r\n      </div>\r\n      <!-- 搜索历史 -->\r\n      <div class=\"lt_history\">\r\n        <!-- 需要动态渲染的 -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"index.html\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"user/index.html\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script type=\"text/template\" id=\"history\">\r\n  { { if list.length } }\r\n  <div class=\"tit\">\r\n    <span>搜索历史</span>\r\n    <a href=\"javascript:;\"><span class=\"fa fa-trash\"></span> 清空历史</a>\r\n  </div>\r\n  <ul class=\"con\">\r\n    <% for(var i=list.length-1; i>=0; i--) { %>\r\n    <li><a href=\"/mobile/searchList.html?key=<%=ec(list[i])%>\"><%=list[i]%></a><span data-index=\"<%=i%>\" class=\"fa fa-close\"></span></li>\r\n    <% } %>\r\n  </ul>\r\n  { { else } }\r\n  <div class=\"tit\">\r\n    <span>您没有搜索记录</span>\r\n  </div>\r\n  { { /if } }\r\n</script>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"assets/arTemplate/template-web.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/search.js\"></script>\r\n</html>\r\n```\r\n#### 搜索中心 css/search.css\r\n```\r\n.lt_history {\r\n  padding: 0 10px;\r\n}\r\n.lt_history .tit {\r\n  font-size: 12px;  \r\n}\r\n.lt_history .tit span {\r\n  color: #666;\r\n}\r\n.lt_history .tit a {\r\n  color: #666;\r\n  float: right;\r\n}\r\n.lt_history .con {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  border: 1px dashed #ccc;\r\n  border-bottom: none;\r\n}\r\n.lt_history .con li {\r\n  border-bottom: 1px dashed #ccc;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  padding: 0 10px;\r\n  position: relative;\r\n} \r\n.lt_history .con li a {\r\n  font-size: 12px;\r\n}\r\n.lt_history .con li span {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  width: 30px;\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n```\r\n#### 搜索中心 js/search.js\r\n```\r\n// zepto 入口函数\r\n$(function () {\r\n  // 1. 根据当前存储的数据进行渲染\r\n  // 2. 点击搜索框，获取搜索关键字，跳转去商品列表页，同时存储历史搜索\r\n  // 2.1 没有重复的搜索，且不超过10条，正常追加\r\n  // 2.2 没有重复的搜索，超过10条，追加一条新的，并去掉最早的一条\r\n  // 2.3 有重复的搜索，追加一条新的，去掉旧的\r\n  // 3. 删除单条搜索历史\r\n  // 4. 清空所有搜索历史\r\n  new App();\r\n});\r\nvar App = function () {\r\n  // 丰富属性\r\n  this.$searchInput = $(\'.lt_search\');\r\n  this.$searchHistory = $(\'.lt_history\');\r\n  this.KEY = \'key_search_keywords\'; // 约定好 localstorage 的存储key\r\n  this.list = JSON.parse(localStorage.getItem(this.KEY)||\'[]\'); //获取 localstorage 的数据\r\n  this.init();\r\n};\r\n// 丰富原型方法\r\nApp.prototype = {\r\n  init: function () {\r\n    this.$searchInput.find(\'input\').val(\'\');\r\n    this.render();\r\n    this.bindEvent();\r\n  },\r\n  render: function () {\r\n    // 数据存储方式：localstorage\r\n    // 由于 art-Template 不支持js外部函数，但是可以将外部函数当参数传入模板，再在模板中调用函数\r\n    console.log(this.$searchHistory);\r\n    this.$searchHistory.html(template(\'history\', {list:this.list, ec: encodeURIComponent}));\r\n  },\r\n  delete: function (index) {\r\n    // 删除\r\n    this.list.splice(index,1);\r\n    // 存储\r\n    localStorage.setItem(this.KEY,JSON.stringify(this.list));\r\n    // 渲染\r\n    this.render();\r\n  },\r\n  clear: function () {\r\n    // 删除\r\n    this.list = [];\r\n    // 存储\r\n    localStorage.setItem(this.KEY,JSON.stringify(this.list));\r\n    // 渲染\r\n    this.render();\r\n  },\r\n  add: function (value) {\r\n    var isSame = false;\r\n    var sameIndex = null;\r\n    this.list.forEach(function(element,i) {\r\n      if (element === value) {\r\n        isSame = true;\r\n        sameIndex = i;\r\n        return;\r\n      }\r\n    });\r\n    if (isSame) {\r\n      // 有重复：先删除，后追加\r\n      this.list.splice(sameIndex,1);\r\n    } else {\r\n      // 没有重复\r\n      if (this.list.length >= 10) {\r\n        // 超过10条，先删除第一条，再追加\r\n        this.list.splice(0,1);        \r\n      }\r\n    }\r\n    // 追加\r\n    this.list.push(value);\r\n    // 存储\r\n    localStorage.setItem(this.KEY,JSON.stringify(this.list));\r\n  },\r\n  bindEvent: function () {\r\n    var that = this;\r\n    this.$searchInput.on(\'tap\', \'a\' , () => {\r\n      // 1.获取 input 的数据\r\n      var value = this.$searchInput.find(\'input\').val();\r\n      console.log(value);\r\n      // 2.校验数据\r\n      if (!value) {\r\n        // 友好提示\r\n        mui.toast(\'请输入搜索关键字\');\r\n        // 终止执行\r\n        return;        \r\n      }\r\n      // 3.跳转\r\n      // 注意对【传参】进行URL编码，以过滤特殊字符的影响，如 & 、 = 等\r\n      location.href = \"/mobile/searchList.html?key=\"+encodeURIComponent(value);\r\n      // 4.追加历史\r\n      this.add(value);\r\n    });\r\n\r\n    // 链式绑定事件\r\n    this.$searchHistory.on(\'tap\', \'li span\', function () {\r\n      var index = this.dataset.index; // 事件绑定在 span 身上，所以 this 指的是 span\r\n      that.delete(index);\r\n    }).on(\'tap\', \'.tit a\', function () {\r\n      that.clear();\r\n    });\r\n  }\r\n};\r\n```',31,100,'2019-03-25 15:23:29','2019-03-25 15:29:52'),(290,'### 搜索结果页\r\n#### 搜索结果页 searchList.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/searchList.css \">\r\n  <title>乐淘-商品列表</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n    <h3>商品列表</h3>\r\n    <a href=\"/mobile/search.html\" class=\"right\"><span class=\"fa fa-search\"></span></a>\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <div class=\"mui-scroll-wrapper\">\r\n        <div class=\"mui-scroll\">\r\n          <!-- 搜索框 -->\r\n          <div class=\"lt_search\">\r\n            <input type=\"search\" placeholder=\"根据商品关键字进行搜索\">\r\n            <a href=\"javascript:;\">搜索</a>\r\n          </div>\r\n          <!-- 排序区域 -->\r\n          <div class=\"lt_order\">\r\n            <a data-type=\"time\" href=\"javascript:;\">上架时间 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"price\" href=\"javascript:;\">价格 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"num\" href=\"javascript:;\">销量 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"sale\" href=\"javascript:;\">折扣 <span class=\"fa fa-angle-down\"></span></a>\r\n          </div>\r\n          <!-- 产品区域 -->\r\n          <div class=\"lt_product\">\r\n            <!-- to render -->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"index.html\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"user/index.html\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script type=\'text/template\' id=\'product\'>\r\n  <ul class=\"mui-clearfix\">\r\n    { { if $data.data.length > 0 } }\r\n      { { each $data.data } }\r\n      <li>\r\n        <a href=\"product.html?productId={ { $value.id } }\" class=\"lt_proBox\">\r\n          <%\r\n            <!-- 定义默认图片地址 -->\r\n            var picAddr = \'/mobile/images/none01.jpg\';\r\n            if ($value.pic && $value.pic[0] && $value.pic[0].picAddr) {\r\n              picAddr = $value.pic[0].picAddr;\r\n            }\r\n          %>\r\n          <img src=\"{ { picAddr } }\" alt=\"\">\r\n          <p class=\"name mui-ellipsis-2\">{ { $value.proName } }</p>\r\n          <p class=\"price\">\r\n            <span class=\"nowPrice\">¥{ { $value.price } }</span>\r\n            <span class=\"oldPrice\">¥{ { $value.oldPrice } }</span>\r\n          </p>\r\n          <button>立即购买</button>\r\n        </a>\r\n      </li>\r\n      { { /each } }\r\n    { { else } }\r\n      <li style=\"width: 100%;\">        \r\n        <p>很遗憾，没有您要找的商品</p>\r\n      </li>        \r\n    { { /if } }\r\n  </ul>\r\n</script>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"assets/arTemplate/template-web.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/searchList.js\"></script>\r\n</html>\r\n```\r\n#### 搜索结果页 css/searchList.css\r\n```\r\n.lt_order {\r\n  width: 100%;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  background: #ddd;\r\n}\r\n.lt_order a {\r\n  float: left;\r\n  width: 25%;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n.lt_order a.now {\r\n  color: red;\r\n}\r\n```\r\n#### 搜索结果页 js/searchList.js\r\n```\r\n// zepto 入口函数\r\n$(function () {\r\n  // 所以实现了「下拉刷新、上拉加载」后，就不用再单独初始化区域滚动了\r\n  // mui(\'.mui-scroll-wrapper\').scroll({\r\n  //   deceleration: 0.0005, //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006\r\n  //   indicators: false //是否显示滚动条\r\n  // });\r\n\r\n  // 1. 页面初始化时，触发下来刷新（获取第一页数据中：正在刷新中），渲染页面\r\n  // 2. 主动触发下拉刷新（获取第一页数据：正在刷新中），渲染页面\r\n  // 3. 主动触发上拉加载（获取下一页数据：正在加载中），追加到页面\r\n  // 4. 点击搜索按钮，重新搜索，触发下来刷新（获取第一页数据中：正在刷新中），渲染页面\r\n  // 5. 排序功能：请求后台数据，触发下来刷新（获取第一页数据中：正在刷新中），渲染页面\r\n\r\n  new App();\r\n  \r\n});\r\n\r\nvar App = function () {\r\n  this.proName = lt.getParamsByUrl().key || \'\'; // 获取地址栏搜索关键词\r\n  this.page = 1; // 加载第几页的内容\r\n  this.pageSize = 4;\r\n  this.orderType = null;\r\n  this.orderValue = null;\r\n  this.$product = $(\'.lt_product\'); // 产品容器\r\n  this.$search = $(\'.lt_search\'); // 搜索框容器\r\n  this.$order = $(\'.lt_order\'); // 排序容器\r\n  this.KEY = \'key_search_keywords\'; // 搜索记录存储的key：约定好 localstorage 的存储key\r\n  this.list = JSON.parse(localStorage.getItem(this.KEY)||\'[]\'); // 获取搜索记录： 获取 localstorage 的数据\r\n  this.init();\r\n}; \r\n\r\nApp.prototype = {\r\n  init: function () {\r\n    this.$search.find(\'input\').val(this.proName);\r\n    this.initRefresh();\r\n    this.bindEvent();\r\n  },\r\n  // 初始化刷新方法\r\n  initRefresh: function () {\r\n    var that = this;\r\n    // 「下拉刷新、上拉加载」，需要的dom结构，与区域滚动的结构一致，其本质在区域滚动的基础上做的封装\r\n    // 所以实现了「下拉刷新、上拉加载」后，就不用再单独初始化区域滚动了\r\n    mui.init({\r\n      pullRefresh : {\r\n        container: \".mui-scroll-wrapper\",//下拉刷新容器标识，querySelector能定位的css选择器均可，比如：id、.class等\r\n        indicators: false, //是否显示滚动条\r\n        // 下拉刷新\r\n        down : {\r\n          height:50,//可选,默认50.触发下拉刷新拖动距离,\r\n          auto: true,//可选,默认false.首次加载自动下拉刷新一次\r\n          contentdown : \"下拉可以刷新\",//可选，在下拉可刷新状态时，下拉刷新控件上显示的标题内容\r\n          contentover : \"释放立即刷新\",//可选，在释放可刷新状态时，下拉刷新控件上显示的标题内容\r\n          contentrefresh : \"正在刷新...\",//可选，正在刷新状态时，下拉刷新控件上显示的标题内容\r\n          callback : function() { //必选，刷新函数，根据具体业务来编写，比如通过ajax从服务器获取新数据；\r\n            // 获取数据，异步渲染页面，异步之后，同步结束下拉刷新\r\n            that.page = 1;          \r\n            that.render((data) => {       \r\n              // 刷新渲染\r\n              that.$product.html(template(\'product\',data));\r\n\r\n              // 结束下拉刷新：注意官网写错了(endPulldown其实不存在)，其实结束刷新的方法是：endPulldownToRefresh\r\n              // console.log(mui(\'.mui-scroll-wrapper\').pullRefresh()); // 可打印一下对象，看看其原型方法中有哪些api方法\r\n              // mui(\'.mui-scroll-wrapper\').pullRefresh().endPulldownToRefresh();\r\n              this.endPulldownToRefresh(); // this = mui(\'.mui-scroll-wrapper\').pullRefresh()，指向组件对象\r\n              // 启用上拉加载功能（又可以上拉加载了）\r\n              this.refresh(true);\r\n            });          \r\n          } \r\n        },  \r\n        // 上拉加载\r\n        up : {\r\n          height:50,//可选.默认50.触发上拉加载【拖动】距离\r\n          auto:false,//可选,默认false.自动上拉加载一次\r\n          contentrefresh : \"正在加载...\",//可选，正在加载状态时，上拉加载控件上显示的标题内容\r\n          contentnomore:\'没有更多数据了\',//可选，请求完毕若没有更多数据时显示的提醒内容；\r\n          callback: function ()  {\r\n            that.page++;\r\n            that.render((data) => {\r\n              // 追加渲染\r\n              var nomore = !data.data.length;\r\n              if (!nomore) {\r\n                that.$product.append(template(\'product\',data));\r\n              }\r\n              // nomoe 为 ture 时，表示没有更多数据了，此时应该【禁用上拉加载功能】\r\n              this.endPullupToRefresh(nomore); // this = mui(\'.mui-scroll-wrapper\').pullRefresh()，指向组件对象\r\n            });           \r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  // 获取数据进行渲染\r\n  render: function (callback) {\r\n    // 1.获取数据\r\n    // 2.渲染页面，异步渲染时，若有通过执行动作，通常用回调函数来执行\r\n    var params = {\r\n      proName: this.proName,\r\n      page: this.page,\r\n      pageSize: this.pageSize\r\n    }\r\n    if (this.orderType) {\r\n      params[this.orderType] = this.orderValue;\r\n    }\r\n    $.ajax({\r\n      tpye: \'\',\r\n      url: \'/product/queryProduct\',\r\n      data: params,\r\n      success: (data) => {\r\n        // 模拟网络延时\r\n        setTimeout(() => {          \r\n          callback && callback(data);\r\n        }, 1000);\r\n      }\r\n    });\r\n  },\r\n  // 追加搜索历史\r\n  add: function (value) {\r\n    var isSame = false;\r\n    var sameIndex = null;\r\n    this.list.forEach(function(element,i) {\r\n      if (element === value) {\r\n        isSame = true;\r\n        sameIndex = i;\r\n        return;\r\n      }\r\n    });\r\n    if (isSame) {\r\n      // 有重复：先删除，后追加\r\n      this.list.splice(sameIndex,1);\r\n    } else {\r\n      // 没有重复\r\n      if (this.list.length >= 10) {\r\n        // 超过10条，先删除第一条，再追加\r\n        this.list.splice(0,1);        \r\n      }\r\n    }\r\n    // 追加\r\n    this.list.push(value);\r\n    // 存储\r\n    localStorage.setItem(this.KEY,JSON.stringify(this.list));\r\n  },\r\n  // 绑定事件\r\n  bindEvent: function () {\r\n    var that = this;\r\n    // 绑定搜索事件\r\n    this.$search.on(\'tap\', \'a\', () => {\r\n      // 1.获取 input 的数据\r\n      var value = this.$search.find(\'input\').val();\r\n      console.log(value);\r\n      // 2.校验数据\r\n      if (!value) {\r\n        // 友好提示\r\n        mui.toast(\'请输入搜索关键字\');\r\n        // 终止执行\r\n        return;        \r\n      }\r\n      // 3.跳转\r\n      // 注意对【传参】进行URL编码，以过滤特殊字符的影响，如 & 、 = 等\r\n      location.href = \"/mobile/searchList.html?key=\"+encodeURIComponent(value);\r\n      // 4.追加历史\r\n      this.add(value);   \r\n    });\r\n\r\n    // 绑定排序事件\r\n    this.$order.on(\'tap\', \'a\', function() {\r\n      // 修改样式：点击以选中的，则切换箭头朝向；点击为选中的，则把当前now移除并重置箭头，给当前加now\r\n      if ($(this).hasClass(\'now\')) {\r\n        // 点击选中的：切换箭头方向\r\n        if ($(this).find(\'span\').hasClass(\'fa-angle-down\')) {\r\n          $(this).find(\'span\').removeClass(\'fa-angle-down\').addClass(\'fa-angle-up\');\r\n        } else {\r\n          $(this).find(\'span\').addClass(\'fa-angle-down\').removeClass(\'fa-angle-up\');\r\n        }\r\n      } else {\r\n        // 点击未选中的\r\n        $(this).parent().find(\'.fa-angle-up\').removeClass(\'fa-angle-up\').addClass(\'fa-angle-down\');\r\n        $(this).addClass(\'now\').siblings().removeClass(\'now\');\r\n      }\r\n\r\n      // 完成渲染\r\n      // 排序参数：price 1升序 2降序；num 1升序 2降序\r\n      that.orderType = this.dataset.type;\r\n      that.orderValue = $(this).find(\'span\').hasClass(\'fa-angle-down\') ? 2 : 1;\r\n      \r\n      // 用 js 触发一次下拉刷新: 每一次排序，都需要请求一次服务器\r\n      // console.log(mui(\'.mui-scroll-wrapper\').pullRefresh());  // 查看一下原型方法\r\n      mui(\'.mui-scroll-wrapper\').pullRefresh().pulldownLoading();\r\n    });\r\n  }\r\n};\r\n```',31,100,'2019-03-25 15:25:51','2019-03-25 15:29:13'),(291,'### 商品详情页\r\n#### 商品详情页 product.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"css/product.css \">\r\n  <title>乐淘-商品详情</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n    <h3>商品详情</h3>\r\n    <a href=\"/mobile/index.html\" class=\"right\"><span class=\"fa fa-home\"></span></a>\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <div class=\"mui-scroll-wrapper\">\r\n        <div class=\"mui-scroll\">\r\n          <!-- 商品详情 -->\r\n          <!-- to render -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- 底部操作 -->\r\n  <div class=\"lt_btn\">\r\n    <a class=\"btn_cart\" href=\"/mobile/user/cart.html\"><span class=\"fa fa-shopping-cart\"></span></a>\r\n    <div class=\"btn_box\">\r\n      <a class=\"addCart\" href=\"javascript:;\">加入购物车</a>\r\n      <a class=\"pay\" href=\"javascript:;\">立即支付</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n</body>\r\n<script type=\"text/template\" id=\"productDetail\">\r\n  <!-- 轮播图：通过 js 渲染的轮播图，记得需要在渲染的时候，手动初始化轮播图 -->\r\n  { { set defaultAddr = \'/mobile/images/none01.jpg\' } }\r\n  <%\r\n    var picArr = [{ picAddr: defaultAddr }];\r\n    if ($data.pic && $data.pic.length) {\r\n      picArr = $data.pic;\r\n    }\r\n  %>\r\n  <div class=\"mui-slider\">\r\n    <div class=\"mui-slider-group mui-slider-loop\">\r\n      <!-- 即使只有一张图的情况，哪怕是默认的那一张图，首位重复一次也是可以的 -->\r\n      <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"{ { picArr[picArr.length-1].picAddr || defaultAddr } }\" /></a></div>\r\n      { { each picArr } }\r\n      <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"{ { $value.picAddr || defaultAddr } }\" /></a></div>\r\n      { { /each } }\r\n      <div class=\"mui-slider-item\"><a href=\"#\"><img src=\"{ { picArr[0].picAddr || defaultAddr } }\" /></a></div>              \r\n    </div>\r\n    <div class=\"mui-slider-indicator\">\r\n      { { each picArr } }\r\n      <div class=\"mui-indicator { { $index===0 ? \'mui-active\' : \'\' } }\"></div>\r\n      { { /each } }\r\n    </div>\r\n  </div>\r\n  <!-- 商品名称 -->\r\n  <div class=\"pro_name\">\r\n    <p class=\"mui-ellipsis-2\">{ { proName } }</p>\r\n  </div>\r\n  <!-- 商品价格 -->\r\n  <div class=\"pro_price\">\r\n    价格：<span class=\"now\">&yen;{ { price } }</span> <span class=\"old\"> &yen;{ { oldPrice } }</span>\r\n  </div>\r\n  <!-- 商品尺码 -->\r\n  <div class=\"pro_size\">\r\n    尺码：\r\n    <%\r\n      var sizeArr = $data.size.split(\'-\');\r\n      for (var i=sizeArr[0]; i<=sizeArr[1]; i++) {\r\n    %>\r\n        <span class=\"{ { currentSize==i?\'now\':\'\' } }\" data-size=\"{ { i } }\">{ { i } }</span>\r\n    <%\r\n      }\r\n    %>  \r\n  </div>\r\n  <!-- 商品数量 -->\r\n  <div class=\"pro_num\">\r\n    <span>数量：</span>\r\n    <p class=\"box\">\r\n      <span class=\"reduce\">-</span>\r\n      <input class=\"orderNum\" type=\"number\" value=\"1\" readonly>\r\n      <span class=\"plus\">+</span>\r\n    </p>\r\n    <span>剩余：</span> \r\n    <p class=\"rest\">{ { num } }</p>\r\n    <span>件</span> \r\n  </div>\r\n</script>\r\n<script src=\"assets/mui/js/mui.min.js\"></script>\r\n<script src=\"assets/zepto/zepto.min.js\"></script>\r\n<script src=\"assets/arTemplate/template-web.js\"></script>\r\n<script src=\"js/mobile.js\"></script>\r\n<script src=\"js/product.js\"></script>\r\n</html>\r\n```\r\n#### 商品详情页 css/product.css\r\n```\r\n[class ^= \"pro_\"] {\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.pro_name p {\r\n  font-size: 20px;\r\n  margin-top: 10xp;\r\n  color: #ccc;\r\n}\r\n.pro_price {}\r\n.pro_price .now {\r\n  font-size: 20px;\r\n  color: red;\r\n}\r\n.pro_price .old {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-decoration: line-through;\r\n}\r\n.pro_size span {\r\n  font-size: 12px;\r\n  padding: 5px; /* 行内元素可以用 padding 撑开宽高 */\r\n  border: 1px solid #666666;\r\n  line-height: 32px;\r\n}\r\n.pro_size span.now {\r\n  background: #fa0;\r\n}\r\n.pro_num {\r\n  height: 50px;\r\n}\r\n.pro_num>span {\r\n  float: left;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  font-size: 17px;\r\n}\r\n.pro_num .box {\r\n  /* display: inline-block; */\r\n  float: left;\r\n  vertical-align: middle;\r\n  border: 1px solid #ccc;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n.pro_num .box span {\r\n  float: left;\r\n  width: 30px;\r\n  height: 28px;\r\n  line-height: 28px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #333;\r\n}\r\n.pro_num .box span.reduce {}\r\n.pro_num .box input.orderNum {\r\n  float: left;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: none;\r\n  border-radius: 0;\r\n  border-right: 1px solid #ccc;\r\n  border-left: 1px solid #ccc;\r\n  width: 28px;\r\n  height: 28px;\r\n  text-align: center;\r\n}\r\n.pro_num .box span.plus {}\r\n.pro_num p.rest {\r\n  float: left;\r\n  font-size: 17px;\r\n  margin: 0;\r\n  color: #333;\r\n  line-height: 30px;\r\n  height: 30px;\r\n  margin-right: 3px;\r\n}\r\n\r\n/* 操作按钮区域: 两栏自适应，一栏固定宽度，一栏overflow: hidden */\r\n.lt_btn {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  height: 55px;\r\n  line-height: 55px;\r\n  width: 100%;\r\n  border-top: 1px solid #ccc;\r\n  background: #f3f4f5;\r\n}\r\n.lt_btn .btn_cart {\r\n  width: 55px;\r\n  height: 54px;\r\n  text-align: center;\r\n  float: left;\r\n}\r\n.lt_btn .btn_box {\r\n  overflow: hidden;\r\n  padding-right:10px; \r\n}\r\n.lt_btn .btn_box a {\r\n  width: 48%;\r\n  height: 44px;\r\n  line-height: 44px;\r\n  float: left;\r\n  color: #fff;\r\n  text-align: center;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n}\r\n.lt_btn .btn_box a.addCart {\r\n  background: #991020;\r\n  margin-right: 4%;\r\n}\r\n.lt_btn .btn_box a.pay {\r\n  background: #fa672d;\r\n}\r\n```\r\n#### 商品详情页 js/product.js\r\n```\r\n$(function () {\r\n  // 1. 页面初始化时，触发下拉刷新，去加载数据渲染商品详情页面\r\n  // 2. 主动下拉刷新，去加载数据渲染商品详情页面\r\n  // 3. 交互功能：选择尺码 选择数量\r\n  // 4. 点击加入购物车：发送请求给后台。（这里并不是实践中常用的购车车，而是相当提交订单，需要判断是否登录）\r\n  // 4.1 响应 如果未登录，业务：跳转至登录页后再返回\r\n  // 4.2 响应 如果已登录，加入成功，业务：弹窗提示，确认去购物车看看，还是放弃\r\n  \r\n  // 有上拉 下拉 就不需要初始化 区域滚动 了\r\n  \r\n  new App();\r\n});\r\n\r\nvar App = function () {\r\n  this.productId = lt.getParamsByUrl().productId;\r\n  this.size = lt.getParamsByUrl().size;\r\n  this.stockNum = 0; // 库存数量\r\n  this.$productDetail = $(\'.mui-scroll\');\r\n  \r\n  this.init();\r\n}\r\nApp.prototype = {\r\n  init: function () {\r\n    this.initRefresh();\r\n    this.bindEvent();\r\n  },\r\n  initRefresh: function () {\r\n    var that = this;\r\n    mui.init({\r\n      pullRefresh: {\r\n        container: \".mui-scroll-wrapper\",\r\n        indicators: false, //是否显示滚动条\r\n        down : {\r\n          auto: true,//可选,默认false.首次加载自动下拉刷新一次\r\n          callback : function() {\r\n            that.page = 1;          \r\n            that.render(() =>{              \r\n              // 停止下拉刷新\r\n              this.endPulldownToRefresh();\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  render: function (callback) {\r\n    $.ajax({\r\n      type: \'get\',\r\n      url: \'/product/queryProductDetail\',\r\n      data: {\r\n        id: this.productId\r\n      },\r\n      success: (data) => {\r\n        // 模拟网络延时\r\n        setTimeout(() => {\r\n          // 刷新渲染\r\n          data.currentSize = this.size;\r\n          console.log(data);\r\n          this.$productDetail.html(template(\'productDetail\',data));\r\n          this.stockNum = data.num;\r\n          // 通过 js 渲染的轮播图，需要手动初始化一下\r\n          mui(\'.mui-slider\').slider({\r\n            interval:3000//自动轮播周期，若为0则不自动播放，默认为0；\r\n          });\r\n          // 渲染后回调\r\n          callback && callback();\r\n        }, 1000);\r\n      }\r\n    });\r\n  },\r\n  bindEvent: function () {\r\n    console.log(\'在异步渲染结束之前，就同步绑定事件了；但渲染结束之后，事件依然有效\');\r\n    var that = this;\r\n    that.$productDetail.on(\'tap\', \'[data-size]\', function () {\r\n      $(this).addClass(\'now\').siblings(\'span\').removeClass(\'now\');\r\n      that.size = this.dataset.size;\r\n      var newUrl = \'product.html?productId=\'+ that.productId +\'&size=\'+this.dataset.size;\r\n      history.replaceState(null,null,newUrl);\r\n      // console.log(that.size);\r\n    }).on(\'tap\', \'.reduce\', function () {\r\n      var value = parseInt($(\'input.orderNum\').val());\r\n      if (value-1 >= 1) {\r\n        $(\'input\').val(value-1);\r\n      }\r\n    }).on(\'tap\', \'.plus\', function () {\r\n      var value = parseInt($(\'input.orderNum\').val());\r\n      if (value+1 <= that.stockNum ) {\r\n        $(\'input\').val(value+1);\r\n      }\r\n    });\r\n\r\n    $(\'.addCart\').on(\'tap\', function() {\r\n      that.addCart();\r\n    });\r\n  },\r\n  addCart: function () {\r\n    // 加入购物车\r\n    var data = {\r\n      productId: this.productId,\r\n      size: this.size,\r\n      num: $(\'.orderNum\').val()\r\n    }\r\n    if (!data.size) {\r\n      mui.toast(\'请选择尺码\');\r\n      return; // 终止向下执行\r\n    }\r\n    // 提交数据：lt.ajaxCheckLogin({})，已经做了登录判断，没有登录会跳登录页，已经登录则正常执行原有的回调函数seccess\r\n    lt.ajaxCheckLogin({\r\n      type: \'post\',\r\n      url: \'/cart/addCart\',\r\n      data: data,\r\n      loginBefore: function () {}, // 自定义登录前的回调函数\r\n      success: function (data) {\r\n        // //（这里并不是实践中常用的购车车，而是相当提交订单，需要判断是否登录）\r\n        // // 1. 是否登录，未登录提交购物车则 → 提示信息：{ error: 400, message: \"未登录\"}\r\n        // if (data.error === 400) {\r\n        //   // 未登录：跳转至登录页，并携带当前地址作为跳回来的参数\r\n        //   location.href = \'/mobile/user/login.html?returnUrl=\' + encodeURIComponent(location.href);\r\n        // } else {\r\n        //   // 已登录，添加购物车成功，提示信息： {success: true}\r\n\r\n        // }\r\n\r\n        if(data.success = true) {\r\n          // 已登录：添加购物车成功\r\n          mui.confirm(\'添加成功，是否去购车网看看呢？\', \'温馨提示\', [\'否\',\'是\'], function (e) {\r\n            if (e.index == 1) {\r\n              location.href = \'/mobile/user/cart.html\';\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  },\r\n}\r\n```',31,100,'2019-03-25 15:28:45','2019-03-25 15:28:45'),(292,'### 购物车\r\n#### 购物车 user/cart.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"../assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/user/cart.css \">\r\n  <title>购物车</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n    <h3>购物车</h3>\r\n    <a href=\"javascript:;\" class=\"right\"><span class=\"fa fa-refresh\"></span></a>\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\"> \r\n      <div class=\"mui-scroll-wrapper\">\r\n        <div class=\"mui-scroll\">\r\n          <ul class=\"mui-table-view\" id=\"cart\">\r\n            <!-- to render  -->\r\n          </ul>       \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"lt_amount\">\r\n    订单金额：¥<span>00.00</span>\r\n    <a href=\"#\">生成订单</a>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"../index.html\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"../category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"../user/cart.html\"  class=\"now\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"../user/index.html\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script type=\"text/template\" id=\"cartTpl\">\r\n  { { each $data item i } }\r\n  <li class=\"mui-table-view-cell\">\r\n    <div class=\"mui-slider-right mui-disabled\">\r\n      <a data-id=\"{ {item.id} }\" class=\"mui-btn mui-btn-blue fa fa-edit\"></a>\r\n      <a data-id=\"{ {item.id} }\" data-index=\"{ {i} }\" class=\"mui-btn mui-btn-red fa fa-trash\"></a>          \r\n    </div>\r\n    <div class=\"mui-slider-handle\">\r\n      <a id=\"product_item\" class=\"mui-navigate-right\">\r\n        <% \r\n          var picAddr = \'/mobile/images/none01.jpg\';\r\n          if(item.pic && item.pic[0] && item.pic[0].picAddr) {\r\n            picAddr = item.pic[0].picAddr;\r\n          }\r\n        %>\r\n        <img class=\"mui-media-object mui-pull-left\" src=\"{ { picAddr } }\">\r\n        <div class=\"mui-media-body\">\r\n          <p class=\"mui-ellipsis-2\">{ { item.proName } }</p>\r\n          <p class=\"price\">\r\n            <span class=\"now\">¥{ { item.price} }</span>\r\n            <span class=\"old\">¥{ { item.oldPrice } }</span>\r\n            <span class=\"num\">x{ { item.num } } 双</span> \r\n          </p>\r\n          <p class=\"size\">鞋码 : { { item.size } }</p>\r\n        </div>\r\n        <input type=\"checkbox\" data-index=\"{ {i} }\" { { item.isChecked?\'checked\':\'\' } }>\r\n      </a> \r\n    </div>          \r\n  </li>\r\n  { { /each } }\r\n</script>\r\n<script type=\"text/template\" id=\"edit\">\r\n  <div class=\"pro_size\" style=\"text-align: left\">\r\n    尺码：\r\n    <%\r\n      var sizeArr = $data.productSize.split(\'-\');\r\n      for (var i=sizeArr[0]; i<=sizeArr[1]; i++) {\r\n    %>\r\n      <span class=\"{ { $data.size==i?\'now\':\'\' } }\" data-size=\"{ { i } }\">{ { i } }</span>\r\n    <%\r\n      }\r\n    %>    \r\n  </div>\r\n  <div class=\"pro_num\" style=\"text-align: left\">\r\n    <span>数量：</span>\r\n    <p class=\"box\">\r\n      <span class=\"reduce\">-</span>\r\n      <input class=\"orderNum\" type=\"number\" value=\"{ {$data.num} }\" readonly>\r\n      <span class=\"plus\" data-max=\"{ {productNum} }\">+</span>\r\n    </p>\r\n    <span>剩余：</span> \r\n    <p class=\"rest\">{ {productNum} }</p>\r\n    <span>件</span> \r\n  </div>\r\n</script>\r\n<script src=\"../assets/mui/js/mui.min.js\"></script>\r\n<script src=\"../assets/zepto/zepto.min.js\"></script>\r\n<script src=\"../assets/arTemplate/template-web.js\"></script>\r\n<script src=\"../js/mobile.js\"></script>\r\n<script src=\"../js/user/cart.js\"></script>\r\n</html>\r\n```\r\n#### 购物车 css/user/cart.css\r\n```\r\n #product_item {\r\n  display: block;\r\n  padding-right: 20px;\r\n}\r\n.lt_content {\r\n  padding-bottom: 85px; \r\n}\r\n #cart .name {\r\n  color: #333;\r\n}\r\n #cart .price {\r\n  position: relative;\r\n}\r\n #cart .price .now {\r\n  color: red;\r\n}\r\n #cart .price .old {\r\n  color: #666;\r\n  text-decoration: line-through;\r\n}\r\n #cart .price .num {\r\n  position: absolute;\r\n  right: 0;\r\n}\r\n #cart input {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 3px;\r\n}\r\n.pro_size {\r\n  font-size: 14px;\r\n}\r\n.pro_size span {\r\n  font-size: 12px;\r\n  padding: 5px; /* 行内元素可以用 padding 撑开宽高 */\r\n  border: 1px solid #666666;\r\n  line-height: 32px;\r\n}\r\n.pro_size span.now {\r\n  background: #fa0;\r\n}\r\n.pro_num {\r\n  height: 50px;\r\n}\r\n.pro_num>span {\r\n  float: left;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  font-size: 14px;\r\n}\r\n.pro_num .box {\r\n  /* display: inline-block; */\r\n  float: left;\r\n  vertical-align: middle;\r\n  border: 1px solid #ccc;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n.pro_num .box span {\r\n  float: left;\r\n  width: 30px;\r\n  height: 28px;\r\n  line-height: 28px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #333;\r\n}\r\n.pro_num .box input.orderNum {\r\n  float: left;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: none;\r\n  border-radius: 0;\r\n  border-right: 1px solid #ccc;\r\n  border-left: 1px solid #ccc;\r\n  width: 28px;\r\n  height: 28px;\r\n  text-align: center;\r\n}\r\n.pro_num p.rest {\r\n  float: left;\r\n  font-size: 17px;\r\n  margin: 0;\r\n  color: #333;\r\n  line-height: 30px;\r\n  height: 30px;\r\n  margin-right: 3px;\r\n}\r\n\r\n/* 金额模块 */\r\n.lt_amount {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 55px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  width: 100%;\r\n  background: #ccc;\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  padding: 0 10px;\r\n}\r\n.lt_amount span {}\r\n.lt_amount a {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 60px;\r\n  height: 30px;\r\n  text-align: center;\r\n  background: red;\r\n  color: #fff;\r\n  font-weight: normal;\r\n}\r\n```\r\n#### 购物车 js/user/cart.js\r\n```\r\n$(function () {\r\n  // 1. 下拉刷新 列表渲染\r\n  // 2. 点击刷新按钮 触发 下拉刷新 列表渲染\r\n  // 3. 删除操作\r\n  // 4. 修改操作\r\n  // 5. 计算总金额\r\n  \r\n  new App();\r\n});\r\nvar App = function () {\r\n  this.$cart = $(\'#cart\');\r\n  this.cartList = null; // 购车网的数据\r\n  this.checkedArr = JSON.parse(localStorage.getItem(\'CheckedId\')||\'[]\');\r\n  this.init();\r\n};\r\n\r\nApp.prototype = {\r\n  init: function () {\r\n    this.initRefresh();\r\n    this.bindEvent();\r\n  },\r\n  initRefresh: function () {\r\n    var that = this;\r\n    mui.init({\r\n      pullRefresh: {\r\n        container: \'.mui-scroll-wrapper\',\r\n        indicators: false,\r\n        down: {\r\n          auto: true,//可选,默认false.首次加载自动下拉刷新一次\r\n          callback : function() {\r\n            lt.ajaxCheckLogin({\r\n              type: \'get\',\r\n              url: \'/cart/queryCart\',\r\n              data: \'\',\r\n              success: (data) => {\r\n                // 从服务器得到数据，判断这些商品的id，有没有在checkedArr缓存数据中，有的话则给每个item添加 isChecked标记\r\n                data.forEach(function(item,i) {\r\n                  if (that.checkedArr.indexOf(item.id) >= 0) {\r\n                    // 在数组中\r\n                    data[i].isChecked = true;\r\n                  }\r\n                });\r\n\r\n                that.cartList = data;\r\n                that.render(data);\r\n                that.calcAmount();\r\n                // 停止下拉刷新\r\n                // mui(\'.mui-scroll-wrapper\').pullRefresh().endPulldownToRefresh();\r\n                this.endPulldownToRefresh();\r\n              }\r\n            });            \r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  render: function (data) {\r\n    var that = this;\r\n    // console.log(data);\r\n    that.$cart.html(template(\'cartTpl\', data));    \r\n  },\r\n  bindEvent: function () {\r\n    var that = this;    \r\n    // 绑定手动触发 下拉刷新事件\r\n    $(\'.fa-refresh\').on(\'tap\', function () {\r\n      // console.log(mui(\'.mui-scroll-wrapper\').pullRefresh());  // 查看一下原型方法\r\n      mui(\'.mui-scroll-wrapper\').pullRefresh().pulldownLoading();\r\n    });\r\n\r\n    // 绑定 删除事件、修改事件、点击复选框事件\r\n    that.$cart.on(\'tap\', \'.fa-trash\', function () {\r\n      that.delete(this); // 这里的this就是点击的删除元素(span icon)，是dom元素\r\n    }).on(\'tap\', \'.fa-edit\', function () {\r\n      that.edit(this);\r\n    }).on(\'change\', \'[type=\"checkbox\"]\', function () {\r\n      var cart = that.cartList[this.dataset.index];\r\n      cart.isChecked = $(this).prop(\'checked\');\r\n      // 如果选择，则放进缓存，否则从缓存中去除      \r\n      if(cart.isChecked) {\r\n        // 添加到数组\r\n        var same = false;\r\n        that.checkedArr.forEach(function(item,i) {\r\n          if(cart.id == item) {\r\n            same = true;\r\n          }          \r\n        });\r\n        if(!same) {\r\n          that.checkedArr.push(cart.id);\r\n        }\r\n      } else {\r\n        // 重数组中去除\r\n        that.checkedArr.forEach(function(item,i) {\r\n          if(cart.id == item) {\r\n            that.checkedArr.splice(i,1);\r\n          }\r\n        });\r\n      }\r\n      var checkedStr = JSON.stringify(that.checkedArr);\r\n      localStorage.setItem(\'CheckedId\', checkedStr);\r\n      that.calcAmount();\r\n    });\r\n\r\n    // 绑定 编辑事件（操作尺码和数量）\r\n    $(\'body\').on(\'tap\', \'[data-size]\', function () {\r\n      $(this).addClass(\'now\').siblings(\'span\').removeClass(\'now\');      \r\n    }).on(\'tap\', \'.reduce\', function () {\r\n      var value = parseInt($(\'input.orderNum\').val());\r\n      if (value-1 >= 1) {\r\n        $(\'input\').val(value-1);\r\n      }\r\n    }).on(\'tap\', \'.plus\', function () {\r\n      var value = parseInt($(\'input.orderNum\').val());\r\n      var max = parseInt(this.dataset.max);\r\n      if (value+1 <= max ) {\r\n        $(\'input\').val(value+1);\r\n      }\r\n    });\r\n\r\n  },\r\n  // 删除事件\r\n  delete: function (btn) { // 这里的 btn 就是点击的删除元素(span icon)，是dom元素\r\n    var that = this;\r\n    // 1. 获取id\r\n    var productId = btn.dataset.id;\r\n    var index = btn.dataset.index;\r\n    // 2. 删除确认\r\n    mui.confirm(\'您是否确定删除该商品？\', \'温馨提示\', [\'否\',\'是\'], function (e) {\r\n      if (e.index == 0) {\r\n        // 否，不要删除，此时需：【关闭滑块 关闭li元素】\r\n        mui.swipeoutClose(btn.parentNode.parentNode);\r\n      } else {\r\n        // 是，删除吧：从缓存 that.cartList 中删除再重新渲染        \r\n        lt.ajaxCheckLogin({\r\n          type: \'get\',\r\n          url: \'/cart/deleteCart\',\r\n          data: {\r\n            id: productId\r\n          },\r\n          success: function (data) {\r\n            if (data.success) {\r\n              mui.toast(\'删除成功！\');\r\n              that.cartList.splice(index,1);\r\n              that.render(that.cartList);\r\n              that.calcAmount();\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n  // 修改事件\r\n  edit: function (btn) { // 这里的 btn 就是点击的编辑元素(span icon)，是dom元素\r\n    var that = this;\r\n    // 1. 获取要修改的id\r\n    // 2. 通过id，在缓存中取到商品数据\r\n    // 3. 弹窗，显示商品的内容（需动态渲染）\r\n    // 4. 编辑：选择尺码、数量的操作\r\n    // 5. 放弃编辑：关闭滑块\r\n    // 6. 确认编辑：发送修改数据给后台\r\n    // 7. 操作成功，修改列表数据，重新渲染\r\n    var productId = btn.dataset.id;\r\n    var productIndex = null;\r\n    var productArr = this.cartList.filter(function(item,index) {\r\n      if (item.id == productId) {\r\n        productIndex = index;\r\n        return true;\r\n      }      \r\n    });\r\n    var product = productArr[0];\r\n    // console.log(product,productIndex);\r\n    var html = template(\'edit\',product).replace(/\\n/g, \'\');\r\n\r\n    mui.confirm(html, \'编辑商品\', [\'取消\',\'确认\'], function(e) {\r\n      if (e.index == 0) {\r\n        // 放弃编辑：【关闭滑块 关闭li元素】\r\n        mui.swipeoutClose(btn.parentNode.parentNode);\r\n      } else {\r\n        // 确认编辑：\r\n        var size = $(\'[data-size].now\').data(\'size\');\r\n        var num = $(\'input.orderNum\').val();\r\n        $.ajax({\r\n          type: \'post\',\r\n          url: \'/cart/updateCart\',\r\n          data: {\r\n            id: productId,\r\n            size: size,\r\n            num: num\r\n          },\r\n          success: function (data) {\r\n            if (data.success==true) {\r\n              mui.toast(\'修改成功！\');\r\n              // 修改页面内容\r\n              that.cartList[productIndex].size = size;\r\n              that.cartList[productIndex].num = num;\r\n              that.render(that.cartList);\r\n              that.calcAmount();          \r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n  calcAmount: function (){\r\n    // 四种情况需要计算金额：初始化、选择复选框、删除、修改数量\r\n    // 计算业务\r\n    var amount = 0;\r\n    this.cartList.forEach(function (item, i) {\r\n      if (item.isChecked) {\r\n        amount += item.price * item.num;\r\n      }\r\n    });\r\n    $(\'.lt_amount span\').html(amount.toFixed(2));\r\n  }\r\n}\r\n```',31,100,'2019-03-25 15:34:19','2019-03-25 15:36:02'),(293,'### 登录页\r\n#### 登录页 user/login.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"../assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/user/login.css \">\r\n  <title>登录</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <!-- <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a> -->\r\n    <h3>登录</h3>\r\n    <!-- <a href=\"search.html\" class=\"right\"><span class=\"fa fa-search\"></span></a> -->\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <form class=\"mui-input-group\">\r\n        <div class=\"mui-input-row\">\r\n          <label>用户名</label>\r\n          <input name=\"username\" type=\"text\" class=\"mui-input-clear\" placeholder=\"请输入用户名\">\r\n        </div>\r\n        <div class=\"mui-input-row\">\r\n          <label>密码</label>\r\n          <input name=\"password\" type=\"password\" class=\"mui-input-password\" placeholder=\"请输入密码\">\r\n        </div>\r\n        <div class=\"mui-button-row\">\r\n          <button type=\"reset\" class=\"mui-btn mui-btn-danger\" >重置</button>\r\n          <button type=\"submit\" class=\"mui-btn mui-btn-primary\" >登录</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"../index.html\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"../category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"../user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"../user/index.html\" class=\"now\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script src=\"../assets/mui/js/mui.min.js\"></script>\r\n<script src=\"../assets/zepto/zepto.min.js\"></script>\r\n<script src=\"../js/mobile.js\"></script>\r\n<script src=\"../js/user/login.js\"></script>\r\n</html>\r\n```\r\n#### 登录页 css/user/login.css\r\n```\r\n空的\r\n```\r\n#### 登录页 js/user/login.js\r\n```\r\n$(function (){\r\n  $(\'form\').on(\'submit\', function (e) {\r\n    // form 表单默认会跳转，这里要做异步登录，需要阻止form 的默认跳转行为\r\n    e.preventDefault();\r\n\r\n    // 通过zepto的serialize()、serializeArray()方法，一次性获取表单内 表单元素的所有数据\r\n    // serialize()获得的数据格式(字符串)：key=value&key1=value1\r\n    // serializeArray()获得的数据格式(数组)：[{name: \'key\', value: \'value\'}, {name: \'key1\', value: \'value1\'}]\r\n    // 这两种格式序列化数据，ajax都是支持的，可以ajax中直接使用\r\n    var data = $(this).serializeArray();\r\n    // 提交 ajax\r\n    $.ajax({\r\n      type: \'post\',\r\n      url: \'/user/login\',\r\n      data: data,\r\n      success: function (data) {\r\n        if (data.success == true) {\r\n          // 登录成功(账号：itcast；密码：111111)\r\n          var returnUrl = lt.getParamsByUrl().returnUrl;\r\n          if (returnUrl) {\r\n            location.href = returnUrl;\r\n          } else {\r\n            location.href = \'/mobile/user/index.html\';\r\n          }\r\n        } else {\r\n          // 登录失败\r\n          mui.toast(data.message);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n```',31,100,'2019-03-25 15:38:42','2019-03-25 15:38:42'),(294,'### 个人中心\r\n#### 个人中心 user/index.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <link rel=\"stylesheet\" href=\"../assets/mui/css/mui.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../assets/fontAwesome/css/font-awesome.min.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/mobile.css\">\r\n  <link rel=\"stylesheet\" href=\"../css/user/index.css \">\r\n  <title>个人中心</title>\r\n</head>\r\n<body>\r\n<div class=\"lt_container\">\r\n  <header class=\"lt_header\">\r\n    <!-- <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a> -->\r\n    <h3>个人中心</h3>\r\n    <!-- <a href=\"search.html\" class=\"right\"><span class=\"fa fa-search\"></span></a> -->\r\n  </header>\r\n  <div class=\"lt_content\">\r\n    <!-- lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容-->\r\n    <div class=\"lt_wrapper\">\r\n      <ul class=\"mui-table-view\">\r\n        <li class=\"mui-table-view-cell\">\r\n          <a id=\"userinfo\" class=\"mui-navigate-right\">\r\n              <img class=\"mui-media-object mui-pull-left\" src=\"../images/user.jpg\">\r\n              <div class=\"mui-media-body\">\r\n                  加载中...\r\n                  <p class=\'mui-ellipsis\'>手机号：加载中...</p>\r\n              </div>\r\n          </a>\r\n        </li>\r\n        <li class=\"mui-table-view-cell\">\r\n          <a class=\"mui-navigate-right\">账号与安全</a>\r\n        </li>\r\n        <li class=\"mui-table-view-cell\">\r\n          <a class=\"mui-navigate-right\">我的购物车</a>\r\n        </li>\r\n        <li class=\"mui-table-view-cell\">\r\n          <a class=\"mui-navigate-right\">收货地址管理</a>\r\n        </li>\r\n      </ul> \r\n      <div class=\"btn_box\">\r\n        <a href=\"javascript:;\" class=\"mui-btn mui-btn-danger\">退出登录</a>\r\n      </div>     \r\n    </div>\r\n  </div>\r\n  <footer class=\"lt_tabs\">\r\n    <a href=\"../index.html\"><span class=\"fa fa-home\"></span><p>首页</p></a>\r\n    <a href=\"../category.html\"><span class=\"fa fa-bars\"></span><p>分类</p></a>\r\n    <a href=\"../user/cart.html\"><span class=\"fa fa-shopping-cart\"></span><p>购物车</p></a>\r\n    <a href=\"../user/index.html\" class=\"now\"><span class=\"fa fa-user\"></span><p>个人中心</p></a>\r\n  </footer>\r\n</div>\r\n</body>\r\n<script src=\"../assets/mui/js/mui.min.js\"></script>\r\n<script src=\"../assets/zepto/zepto.min.js\"></script>\r\n<script src=\"../js/mobile.js\"></script>\r\n<script src=\"../js/user/index.js\"></script>\r\n</html>\r\n```\r\n#### 个人中心 css/user/index.css\r\n```\r\n #userinfo {\r\n  padding-right: 40px; \r\n}\r\n.btn_box {\r\n  width: 100%;\r\n  padding: 10px;\r\n}\r\n.btn_box a {\r\n  width: 100%;\r\n\r\n}\r\n```\r\n#### 个人中心 js/user/index.js\r\n```\r\n$(function () {\r\n  // 1. 获取个人信息\r\n  lt.ajaxCheckLogin({\r\n    type: \'get\',\r\n    url: \'/user/queryUserMessage\',\r\n    data: \'\',\r\n    success: function (data) {\r\n      $(\'.mui-media-body\').html(data.username + \'<p class=\"mui-ellipsis\">手机号：\'+ data.mobile +\'</p>\');\r\n    }\r\n  });\r\n\r\n  // 2. 退出登录\r\n  $(\'.mui-btn-danger\').on(\'tap\',function () {\r\n    $.ajax({\r\n      type: \'get\',\r\n      url: \'/user/logout\',\r\n      data: \'\',\r\n      success: function (data) {\r\n        if (data.success) {\r\n          location.href =  \'/mobile/user/login.html\';\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n```',31,100,'2019-03-25 15:41:13','2019-03-25 15:41:48'),(295,'## 开始写vue项目\r\n### 项目目录结构\r\n整个项目结构概览：\r\n```\r\n|-- README.md\r\n|-- build\r\n|   |-- build.js\r\n|   |-- check-versions.js\r\n|   |-- logo.png\r\n|   |-- utils.js\r\n|   |-- vue-loader.conf.js\r\n|   |-- webpack.base.conf.js\r\n|   |-- webpack.dev.conf.js\r\n|   `-- webpack.prod.conf.js\r\n|-- config\r\n|   |-- dev.env.js\r\n|   |-- index.js\r\n|   `-- prod.env.js\r\n|-- index.html\r\n|-- node_modules\r\n|-- package-lock.json\r\n|-- package.json\r\n|-- src\r\n|   |-- App.vue\r\n|   |-- assets\r\n|   |-- components\r\n|   |-- main.js\r\n|   |-- router\r\n|   `-- views\r\n`-- static\r\n```\r\nsrc目录概览：\r\n```\r\n|-- App.vue\r\n|-- assets\r\n|   |-- css\r\n|   |   `-- index.css\r\n|   |-- imgs\r\n|   |   `-- logo.png\r\n|   `-- js\r\n|       `-- myaxios.js\r\n|-- components\r\n|   |-- asider.vue\r\n|   `-- header.vue\r\n|-- main.js\r\n|-- router\r\n|   `-- index.js\r\n`-- views\r\n    |-- breadcrumb\r\n    |   `-- breadcrumb.vue\r\n    |-- goods\r\n    |   |-- categories.vue\r\n    |   |-- goods.vue\r\n    |   |-- goodsAdd.vue\r\n    |   `-- params.vue\r\n    |-- home.vue\r\n    |-- index.vue\r\n    |-- login\r\n    |   `-- login.vue\r\n    |-- orders\r\n    |   `-- orders.vue\r\n    |-- reports\r\n    |   `-- reports.vue\r\n    |-- rights\r\n    |   |-- rights.vue\r\n    |   `-- roles.vue\r\n    `-- users\r\n        |-- users.css\r\n        |-- users.html\r\n        |-- users.js\r\n        `-- users.vue\r\n```\r\nApp组件关系：\r\n```\r\nApp.vue{\r\n    home.vue{\r\n        header.vue,\r\n        asider.vue,\r\n        router-view{\r\n            login.vue,\r\n            users.vue,\r\n            roles.vue,\r\n            rights.vue\r\n            goods.vue\r\n            goodsAdd.vue\r\n            params.vue\r\n            categries.vue\r\n            orders.vue\r\n            reports.vue\r\n        }\r\n    }\r\n}\r\n```',11,100,'2019-03-26 08:43:11','2019-03-26 08:44:54'),(296,'## npm\r\n### 回顾 npm install 命令\r\n最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。\r\n\r\n我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：\r\n\r\n> `npm install moduleName` # 安装模块到项目目录下\r\n`npm install -g moduleName` # -g 或 --global 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。\r\n`npm install --save moduleName` # - -save 或 -S 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。\r\n`npm install --save-dev moduleName`  # - -save-dev 或 -D 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。\r\n\r\n------------\r\n\r\n\r\n那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。\r\n\r\n`npm install moduleName` 命令\r\n> 1. 安装模块到项目node_modules目录下。\r\n2. 不会将模块依赖写入devDependencies或dependencies 节点。\r\n3. 运行 npm install 初始化项目时不会下载模块。\r\n\r\n**注意**\r\n```\r\n在 npm 5 之前的版本\r\n使用 npm install 默认选项安装包时，仅仅会把包下载到 node_modules/ 中，并不会同时修改 package.json。而使用 --save 选项就可以在安装包的同时，修改 package.json 文件。\r\n\r\n在 npm 5 之后的版本\r\nnpm install 安装包时，默认便会修改 package.json 文件，所以 --save 选项已经不再需要了。\r\n\r\n```\r\n\r\n`npm install -g moduleName` 命令\r\n> 1. 安装模块到全局，不会在项目node_modules目录中保存模块包。\r\n2. 不会将模块依赖写入devDependencies或dependencies 节点。\r\n3. 运行 npm install 初始化项目时不会下载模块。\r\n\r\n`npm install --save moduleName` 命令\r\n> 1. 安装模块到项目node_modules目录下。\r\n2. 会将模块依赖写入dependencies 节点。\r\n3. 运行 npm install 初始化项目时，会将模块下载到项目目录下。\r\n4. 运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。\r\n\r\n`npm install --save-dev moduleName` 命令\r\n> 1. 安装模块到项目node_modules目录下。\r\n2. 会将模块依赖写入devDependencies 节点。\r\n3. 运行 npm install 初始化项目时，会将模块下载到项目目录下。\r\n4. 运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。\r\n\r\n总结\r\n> devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。\r\n\r\n### npm 更新依赖包\r\n更新全局包：\r\n```\r\nnpm update <name> -g\r\n```\r\n更新生产环境依赖包：\r\n```\r\nnpm update <name> --save\r\n```\r\n更新开发环境依赖包：\r\n```\r\nnpm update <name> --save-dev\r\n```',6,100,'2019-03-26 09:00:19','2019-04-24 07:24:25'),(297,'### 搭建一个空项目\r\n使用vue-cli脚手架来搭建一个空的vue项目\r\n```\r\nvue init webpack vue-demo  // 这里使用vue2.0的版本\r\n```\r\n\r\n启动项目，查看是否成功\r\n```\r\nnpm run dev\r\n\r\n```\r\n\r\n若vue项目运行在虚拟机中，而要在主机中访问，可以修改`config/index.js`文件中`host` `port`属性\r\n```\r\nhost: \'home.test\',  // 把默认值 localhost 改成指向虚拟机域名 home.test\r\nport: 8080,\r\n```\r\n\r\n在浏览器浏览（看是否成功）\r\n```\r\nhttp://localhost:8080 (默认网址)\r\n或\r\nhttp://home.test:8080 (自定义网址)\r\n```\r\n浏览正常后，删除不必要文件\r\n`src/App.vue`  删掉：template中的img元素、script中的name: \'App\"、styel中的样式。删除后，结果如下：\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <router-view/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\n\r\n`router/index.js`删除：helloworld的路由规则、导入的模板。删除后的代码如下：\r\n\r\n```\r\nimport Vue from \'vue\'\r\nimport Router from \'vue-router\'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\n  routes: [\r\n  ]\r\n})\r\n\r\n```\r\n删除：`components/HelloWorld.vue`组件',11,100,'2019-03-26 09:17:08','2019-03-27 15:26:02'),(298,'### 代码风格\r\n```\r\n我们的项目采用 JavaScript Standard Style 代码风格，以下是一些基本规范细则。\r\n\r\n- 使用两个空格 – 进行缩进\r\n- 字符串使用单引号 – 需要转义的地方除外\r\n- 不再有冗余的变量 – 这是导致 大量 bug 的源头!\r\n- 无分号 – 这没什么不好。不骗你！\r\n- 行首不要以 (, [, or ``` 开头\r\n  - 这是省略分号时唯一会造成问题的地方 – 工具里已加了自动检测！\r\n  - 详情\r\n- 关键字后加空格 if (condition) { ... }\r\n- 函数名后加空格 function name (arg) { ... }\r\n- 坚持使用全等 === 摒弃 == 一但在需要检查 null || undefined 时可以使用 obj == null。\r\n- 一定要处理 Node.js 中错误回调传递进来的 err 参数。\r\n- 使用浏览器全局变量时加上 window 前缀 – document 和 navigator 除外\r\n  - 避免无意中使用到了这些命名看上去很普通的全局变量， open, length, event 还有 name。\r\n\r\n说了那么多，看看这个遵循了 Standard 规范的示例文件 中的代码吧。或者，这里还有一大波使用了此规范的项目 代码可供参考。\r\n\r\n```',11,100,'2019-03-26 12:00:08','2019-03-26 12:01:05'),(299,'## 登录功能\r\n### 引入 Element-ui\r\n安装 Element-ui (官网：http://element-cn.eleme.io/#/zh-CN/component/installation)\r\n```\r\nyarn add Element-ui\r\n或\r\nnpm i element-ui\r\n```\r\n\r\n在项目中引入和注册 element-ui\r\n在 main.js 文件中，代码如下：\r\n```\r\nimport Vue from \'vue\'\r\nimport App from \'./App\'\r\nimport router from \'./router\'\r\n\r\n// 引入 elementUI 对象\r\nimport Element from \'element-ui\'\r\n// 引入 elementUI 样式\r\nimport \'element-ui/lib/theme-chalk/index.css\'\r\n\r\n// 全局注册 element ，将来任何位置都可以使用 element 组件\r\nVue.use(Element)\r\n\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  components: { App },\r\n  template: \'<App/>\'\r\n})\r\n```\r\n至此，已经全局注册 element-ui ，接下来将要使用 element-ui 来搭建页面了\r\n\r\n### 搭建登录页面\r\n#### 登录路由\r\n src/router/index.js\r\n```\r\nimport Login from \'@/views/login/login.vue\'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\n  routes: [\r\n    {\r\n      name: \'login\',\r\n      path: \'/login\',\r\n      component: Login\r\n    }\r\n  ]\r\n})\r\n```\r\n#### 登录组件UI代码\r\nelement-ui 表单验证判断，参考官网表单验证：http://element-cn.eleme.io/#/zh-CN/component/form\r\nsrc/views/login/login.vue\r\n```\r\n<template>\r\n<!--\r\n使用element中的Form表单\r\nel-form：表单根元素\r\n  属性：\r\n    model：给整个表单绑定数据源\r\n    status-icon：输入框添加了这个，表示校验结果的反馈图标\r\n    rules：用来给表单元素验证的对象\r\n    ref：vue中操作dom元素的方式\r\n    label-position: 设置表单对其方式\r\nel-form-item：表单元素项\r\n  属性：\r\n    label：当前向的标题\r\n    prop：设置验证规则对应的是哪个表单项（‘规则名’必须与绑定的‘数据属性名’相同）\r\nel-input：input元素\r\n  属性：\r\n    type：input类型（同html类型一致）\r\n    v-model：双向绑定数据源\r\n    auto-complete：自动补全\r\nel-button：按钮\r\n  属性：\r\n    type：按钮类型，不同类型有不同的样式\r\n-->\r\n<div class=\"login-wrap\">\r\n  <el-form :model=\"user\" label-position=\"top\" status-icon :rules=\"rules2\" ref=\"ruleForm2\" label-width=\"100px\" class=\"demo-ruleForm login-form\">\r\n    <h2>用户登录</h2>\r\n    <el-form-item label=\"用户名\" prop=\"username\">\r\n      <el-input type=\"text\" v-model=\"user.username\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n    <el-form-item label=\"密码\" prop=\"password\">\r\n      <el-input type=\"password\" v-model=\"user.password\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n    <el-form-item>\r\n      <el-button class=\"login-btn\" type=\"primary\" @click=\"login(\'ruleForm2\')\">登录</el-button>\r\n    </el-form-item>\r\n  </el-form>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      user: {\r\n        username: \'\',\r\n        password: \'\'\r\n      },\r\n      rules2: {\r\n        username: [\r\n          { required: true, message: \'请输入用户名！\', trigger: \'blur\' }\r\n        ],\r\n        password: [\r\n          { required: true, message: \'请输入密码！\', trigger: \'blur\' }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.login-wrap {\r\n  background-color: #324152;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.login-wrap .login-form {\r\n  background-color: #fff;\r\n  width: 400px;\r\n  padding: 30px;\r\n  border-radius: 5px;\r\n}\r\n.login-wrap .login-form .login-btn {\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n```\r\n#### 公共样式 index.css\r\n创建公共css样式文件：`src/assets/index.css`，其内容如下：\r\n```\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n}\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n```\r\n\r\n在 main.js 中引入公共样式\r\n```\r\n// 引入公共样式\r\nimport \'@/assets/css/index.css\'\r\n```\r\n\r\n修改 App.vue 的样式\r\n```\r\n #app {\r\n  height: 100%;\r\n}\r\n```\r\n至此，完成了登录页面的样式，可进行页面预览了，之后再完成登录逻辑部分。\r\n#### 登录页面预览\r\n[![V0YvUK.png](https://t1.picb.cc/uploads/2019/03/27/V0YvUK.png)](https://www.picb.cc/image/V0YvUK)\r\n### 引入封装 axios\r\naxios 参考地址：https://github.com/axios/axios\r\n下载安装 axios\r\n```\r\nyarn add axios\r\n或\r\nnpm i axios\r\n```\r\n封装 axios，新建`src/assets/js/myaxios.js`文件，代码如下：\r\n```\r\nimport Axios from \'axios\';\r\nvar myPlugin = {};\r\nmyPlugin.install = function(vue) {\r\n  // 创建axios实例\r\n  var instance = Axios.create({\r\n    baseURL: \'http://192.168.10.10:8888/api/private/v1/\'\r\n  });\r\n\r\n  vue.prototype.$http = instance;\r\n};\r\n// 暴露\r\nexport default myPlugin;\r\n\r\n```\r\n在 main.js 中引入并注册 axios 插件\r\n```\r\n// 引入封装的 axios 插件\r\nimport axios from \'@/assets/js/myaxios.js\'\r\n// 注册 axios\r\nVue.use(axios)\r\n```\r\n### 登录逻辑代码\r\nsrc/views/login/login.vue\r\n```\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      user: {\r\n        username: \'\',\r\n        password: \'\'\r\n      },\r\n      rules2: {\r\n        username: [\r\n          { required: true, message: \'请输入用户名！\', trigger: \'blur\' }\r\n        ],\r\n        password: [\r\n          { required: true, message: \'请输入密码！\', trigger: \'blur\' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    login (formName) {\r\n	  // console.log(this) // this 指向 VueComponent\r\n      // 前台先验证（使用验证规则）\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          // 前端验证通过\r\n          this.$http.post(\'login\', this.user).then(res => {\r\n            var { data, meta } = res.data\r\n            if (meta.status === 200) {\r\n              // 登录成功\r\n              this.$message({\r\n                message: meta.msg,\r\n                type: \'success\'\r\n              })\r\n              // 保存登录token到loaclStorage\r\n              window.localStorage.setItem(\'token\', data.token)\r\n              this.$router.push({name: \'home\'})\r\n            } else {\r\n              // 登录失败\r\n              this.$message.error(meta.msg)\r\n            }\r\n          })\r\n        } else {\r\n          // 前端验证失败(前端已有提示，无需再提示了)\r\n          // this.$message.error(\'请填写正确的数据！\')\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n```',11,100,'2019-03-27 14:52:36','2019-04-20 04:29:33'),(300,'## 首页布局\r\n### 首页路由\r\nsrc/router/index.js\r\n```\r\nimport Vue from \'vue\'\r\nimport Router from \'vue-router\'\r\nimport Login from \'@/views/login/login.vue\'\r\nimport Home from \'@/views/home.vue\'\r\nimport Index from \'@/views/index.vue\'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\n  routes: [\r\n    // 登录路由 （/login 路由对应的组件会替换 App.vue 中的 <router-view />）\r\n    {\r\n      name: \'login\',\r\n      path: \'/login\',\r\n      component: Login\r\n    },\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        {\r\n          name: \'index\',\r\n          path: \'index\',\r\n          component: Index\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n\r\n```\r\n### 首页布局预览\r\n![VXsOrX.png](https://t1.picb.cc/uploads/2019/04/01/VXsOrX.png)\r\n### 首页布局代码\r\n#### src/views/home.vue\r\n##### 登录判断（用钩子函数）\r\n页面布局可参考 Element 的 “Container 布局容器”：http://element-cn.eleme.io/#/zh-CN/component/container\r\n```\r\n<template>\r\n  <el-container class=\"container\">\r\n		<el-header>\r\n			<!-- 使用头部组件 -->\r\n			<Header />\r\n		</el-header>\r\n		<el-container>\r\n			<el-aside width=\"200px\">\r\n				<!-- 使用侧边栏组件 -->\r\n				<Asider />\r\n			</el-aside>\r\n			<el-main>\r\n				<router-view />\r\n			</el-main>\r\n		</el-container>\r\n	</el-container>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入侧边栏组件\r\nimport Asider from \'@/components/asider.vue\'\r\nexport default {\r\n	// 登录判断方法1：用生命周期钩子函数(只要是进入home路由，也就是根目录\'/\'，就需要登录判断，包括home的子路由,其实就是所有路由了)\r\n	// 登录判断方法2：在src/router/index.js 中用导航守卫（或路由守卫）实现登录判断功能\r\n	beforeCreate () {\r\n		var token = window.localStorage.getItem(\'token\')\r\n		if (!token) {\r\n			this.$message.error(\'对不起，您还没有登录！\')\r\n			this.$router.push({ name: \'login\' })\r\n		}\r\n	},\r\n	// 注册组件\r\n	components: {\r\n		Header,\r\n		Asider\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n.container {\r\n	height: 100%;\r\n}\r\n.el-header {\r\n	background-color: #b3c0d1;\r\n	color: #333;\r\n	text-align: center;\r\n	line-height: 60px;\r\n}\r\n.el-aside {\r\n	background-color: #d3dce6;\r\n	color: #333;\r\n	text-align: center;\r\n	line-height: 200px;\r\n	height: 100%;\r\n}\r\n.el-main {\r\n	background-color: #e9eef3;\r\n	color: #333;\r\n	/* 注意： el-main这2个属性要去掉，否则将会被main中的文本元素继承，影响子元素布局 */\r\n	/* text-align: center; */\r\n	/* line-height: 160px; */\r\n}\r\n</style>\r\n\r\n```\r\n\r\n#### src/components/header.vue\r\n##### 退出登录\r\n左右分栏可参考 Element 的 “Layout 布局”（通过基础的 24 分栏，迅速简便地创建布局） ：http://element-cn.eleme.io/#/zh-CN/component/layout\r\n```\r\n<template>\r\n  <el-row>\r\n    <el-col :span=\"4\">\r\n      <div class=\"grid-content bg-purple\">icon</div>\r\n    </el-col>\r\n    <el-col :span=\"16\">\r\n      <div class=\"grid-content bg-purple-light head-title\">电商后台管理系统</div>\r\n    </el-col>\r\n    <el-col :span=\"4\">\r\n      <div class=\"grid-content bg-purple logout\"><a href=\"javascript:;\" @click.prevent=\"logout\">退出</a></div>\r\n    </el-col>\r\n  </el-row>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods: {\r\n    logout () {\r\n      // 清除指定的token\r\n      // window.localStorage.clear();  //这是错误的方式，会清除所有localStorage，会影响其他人\r\n      window.localStorage.removeItem(\'token\')\r\n      this.$message({\r\n        message: \'退出成功\',\r\n        type: \'success\'\r\n      })\r\n      setTimeout(() => {\r\n        // 退出后，回到登录页\r\n        this.$router.push({name: \'login\'})\r\n      }, 1000)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.head-title {\r\n  font-size: 24px;\r\n  color: #fff;\r\n}\r\n.logout {\r\n  text-align: right;\r\n}\r\n.logout a {\r\n  color: #666;\r\n}\r\n</style>\r\n\r\n```\r\n#### src/components/asider.vue\r\n左侧导航可参考 Elemnet 的 “NavMenu 导航菜单”：http://element-cn.eleme.io/#/zh-CN/component/menu\r\n```\r\n<template>\r\n  <el-row>\r\n    <!--\r\n      router: 是 Menu Attribute ，是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转\r\n      unique-opened: 是 Menu Attribute ，是否只保持一个子菜单的展开，默认 false\r\n      open/close: 是 Menu Methods\r\n     -->\r\n    <el-menu :router=\"menuOptions.router\" :unique-opened=\"menuOptions.uniqueOpened\">\r\n      <el-submenu class=\"position\" index=\"1\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>用户管理</span>\r\n        </template>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>用户列表</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n      <el-submenu class=\"position\" index=\"2\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>权限管理</span>\r\n        </template>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>角色列表</span>\r\n          </template>\r\n        </el-menu-item>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>权限列表</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n      <el-submenu class=\"position\" index=\"3\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>商品管理</span>\r\n        </template>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>商品列表</span>\r\n          </template>\r\n        </el-menu-item>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>分类参数</span>\r\n          </template>\r\n        </el-menu-item>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>商品分类</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n      <el-submenu class=\"position\" index=\"4\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>订单管理</span>\r\n        </template>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>订单列表</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n      <el-submenu class=\"position\" index=\"5\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>数据统计</span>\r\n        </template>\r\n        <el-menu-item index=\"/users\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>数据报表</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n    </el-menu>\r\n  </el-row>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      menuOptions: {\r\n        router: true,\r\n        uniqueOpened: true\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.el-row {\r\n  height: 100%;\r\n}\r\n.el-row ul {\r\n  height: 100%;\r\n}\r\n.position {\r\n  text-align: left;\r\n}\r\n</style>\r\n\r\n```\r\n#### src/views/index.vue\r\n```\r\n<template>\r\n  <div>\r\n    这index（在main中显示）\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n#### 修改 login 组件中的跳转路由\r\nsrc/views/login/login.vue\r\n```\r\nthis.$http.post(\'login\', this.user).then(res => {\r\n  var { data, meta } = res.data\r\n  if (meta.status === 200) {\r\n    // 登录成功\r\n    this.$message({\r\n      message: meta.msg,\r\n      type: \'success\'\r\n    })\r\n    // 保存登录token到loaclStorage\r\n    window.localStorage.setItem(\'token\', data.token)\r\n    // this.$router.push({name: \'home\'}) // 原跳转\r\n	this.$router.push({name: \'index\'}) // 首页布局完成后的跳转\r\n  } else {\r\n    // 登录失败\r\n    this.$message.error(meta.msg)\r\n  }\r\n})\r\n```',11,100,'2019-04-01 08:46:50','2019-04-06 05:30:22'),(301,'## 用户列表\r\n### 用户列表路由\r\nsrc/router/index.js\r\n```\r\nimport Users from \'@/views/users/users.vue\'\r\n...\r\n// 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        ...\r\n        // 用户列表路由\r\n        {\r\n          name: \'users\',\r\n          path: \'users\',\r\n          component: Users\r\n        }\r\n      ]\r\n    }\r\n```\r\n### 用户列表静态UI预览\r\n![VXYkvj.png](https://t1.picb.cc/uploads/2019/04/02/VXYkvj.png)\r\n### 用户列表静态UI代码\r\n面包屑参考网址：http://element-cn.eleme.io/#/zh-CN/component/breadcrumb\r\nTable表格参数网址：http://element-cn.eleme.io/#/zh-CN/component/table\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑 -->\r\n    <el-card>\r\n      <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n        <el-breadcrumb-item :to=\"{ name: \'index\' }\">首页</el-breadcrumb-item>\r\n        <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n        <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n      </el-breadcrumb>\r\n    </el-card>\r\n    <!-- 搜索与新增 -->\r\n    <el-row id=\"search\">\r\n      <el-col :span=\"6\">\r\n        <el-input placeholder=\"请输入内容\" v-model=\"query\" class=\"input-with-select\">\r\n          <el-button slot=\"append\" @click=\"search\" icon=\"el-icon-search\"></el-button>\r\n        </el-input>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n          \r\n        <el-button @click=\"add\" type=\"success\" plain>新增</el-button>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 用户列表 -->\r\n    <!--\r\n      el-table: 会自动对绑定的(:data)数据源进行遍历\r\n      prop 属性：当前 table 数据中，哪个字段属性显示在这一列中\r\n     -->\r\n    <el-table :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      <el-table-column type=\"index\" width=\"50\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"username\" label=\"姓名\" width=\"150\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"email\" label=\"邮箱\" width=\"200\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"mobile\" label=\"电话\" width=\"200\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"mg_state\" label=\"状态\" width=\"120\">\r\n        <!--\r\n        1.0 表中添加开关switch、按钮button的话，需要外层套上template标签\r\n        2.0 并且template标签还要添加属性slot-scope\r\n          slot-scope属性：用来给这个template设置数据源（没有这个属性，内容无法显示）\r\n          scope是一个对象\r\n            属性：\r\n              row：会得到绑定给当前行的数据对象\r\n        -->\r\n        <template slot-scope=\"scope\">\r\n          <el-switch v-model=\"scope.row.mg_state\" @change=\"switchChange(scope.row)\" active-color=\"#67c23a\" inactive-color=\"#ccc\">\r\n          </el-switch>\r\n          { { scope.row.mg_state } }\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- scope就是绑定的数据源，scope.row是行数据对象 -->\r\n          <el-button type=\"primary\" @click=\"edit(scope.row)\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" @click=\"del(scope.row.id)\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" @click=\"openRole(scope.row)\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      dataList: [\r\n        {username: \'aaaa\', email: \'123@qq.com\', mobile: \'12345678901\', mg_state: true},\r\n        {username: \'bbbb\', email: \'456@qq.com\', mobile: \'12345678902\', mg_state: false}\r\n      ]\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n #search {\r\n	margin: 10px 0;\r\n}\r\n</style>\r\n\r\n```\r\n### 请求用户列表数据预览\r\n从数据库获取用户列表数组，再渲染到页面\r\n![VBvfKj.png](https://t1.picb.cc/uploads/2019/04/02/VBvfKj.png)\r\n### 请求用户列表数据代码\r\nsrc/views/users.vue\r\n```\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      dataList: [],\r\n      pagenum: 1,\r\n      pagesize: 3,\r\n      query: \'\' // 查询关键字\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getDataList()\r\n  },\r\n  methods: {\r\n    getDataList () {\r\n      let token = window.localStorage.getItem(\'token\')\r\n      this.$http({\r\n        url: `users?pagenum=${this.pagenum}&pagesize=${this.pagesize}&query=${this.query}`,\r\n        method: \'get\',\r\n        headers: {\'Authorization\': token}\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.dataList = data.users\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\nurl 参数也可以写在 params 中，上述请求代码可以写成如下：\r\n```\r\n// 最终请求的url如：http://192.168.10.10:8888/api/private/v1/users?pagenum=1&pagesize=3&query=\r\ngetDataList () {\r\n	let token = window.localStorage.getItem(\'token\')\r\n	this.$http({\r\n		url: \'users\',\r\n		method: \'get\',\r\n		params: {\r\n			pagenum: this.pagenum,\r\n			pagesize: this.pagesize,\r\n			query: this.query\r\n		},\r\n		headers: {\'Authorization\': token}\r\n	}).then(res => {\r\n		...\r\n	})\r\n}\r\n```\r\n### 列表分页预览\r\n![VBBu2K.png](https://t1.picb.cc/uploads/2019/04/02/VBBu2K.png)\r\n### 列表分页代码\r\n分页控件参考网址：http://element-cn.eleme.io/#/zh-CN/component/pagination\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n<div>\r\n	...\r\n	<el-table>\r\n		...\r\n	</el-table>\r\n	<br />\r\n\r\n    <!-- 分页控件 -->\r\n    <!--\r\n      el-pagination: 分页组件根元素\r\n        事件：\r\n          @size-change：页容量改变时触发\r\n          @current-change：页码改变时触发\r\n        属性：\r\n          current-page：当前第几页\r\n          page-sizes：页容量数组\r\n          page-size：当前选中的某个页容量\r\n          layout：分页控件的布局，设置包含哪里模块\r\n          total：分页控件的总数据条数\r\n    -->\r\n    <el-pagination\r\n      @size-change=\"pageSizeChange\"\r\n      @current-change=\"pageNumChange\"\r\n      :current-page=\"pagenum\"\r\n      :page-sizes=\"pagesizes\"\r\n      :page-size=\"pagesize\"\r\n      :total=\"total\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\" >\r\n    </el-pagination>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      dataList: [],\r\n      pagenum: 1,\r\n      pagesize: 2,\r\n      query: \'\', // 查询关键字\r\n      pagesizes: [2, 4, 6, 8, 10],\r\n      total: 0 // 用户列表总条数\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getDataList()\r\n  },\r\n  methods: {\r\n    // 请求用户列表数据\r\n    getDataList () {\r\n      ...\r\n      this.$http({\r\n        ...\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.dataList = data.users\r\n          // 设置数据总条数,用于分页控件\r\n          this.total = data.total\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 页码改变事件\r\n    pageNumChange (val) {\r\n      // 页码改变时，重新赋值数据\r\n      this.pagenum = val\r\n      // 重新获取数据(因为这是服务器端分页)\r\n      this.getDataList()\r\n    },\r\n    // 页容量改变事件\r\n    pageSizeChange (val) {\r\n      // 页容量改变时，更新数据，从而驱动页面渲染\r\n      this.pagesize = val\r\n      // 改变页容量时，要初始化当前页码，以免造成页码超出范围（如最大页码为5，当前页页码却为10）\r\n      this.pagenum = 1\r\n      this.getDataList()\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n### 搜索功能\r\n搜索关键字query的默认值为空，即搜索全部的内容\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑 -->\r\n    ...\r\n    <!-- 搜索与新增 -->\r\n    <el-row id=\"search\">\r\n      <el-col :span=\"6\">\r\n        <el-input placeholder=\"请输入内容\" v-model=\"query\" class=\"input-with-select\">\r\n          <el-button slot=\"append\" @click=\"search\" icon=\"el-icon-search\"></el-button>\r\n        </el-input>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n          \r\n        <el-button @click=\"add\" type=\"success\" plain>新增</el-button>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 用户列表 -->\r\n    ...\r\n\r\n    <!-- 分页控件 -->\r\n    ...\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      pagesize: 2,\r\n      query: \'\', // 查询关键字\r\n      ...\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getDataList()\r\n  },\r\n  methods: {\r\n    ...\r\n    // 搜索方法\r\n    search () {\r\n      this.pagenum = 1\r\n      this.getDataList()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### 用开关（switch）修改用户状态\r\n开关（switch）参考网址：http://element-cn.eleme.io/#/zh-CN/component/switch\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑 -->\r\n    ...\r\n    <!-- 搜索与新增 -->\r\n    ...\r\n    <!-- 用户列表 -->\r\n    <el-table :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      ...\r\n      <el-table-column prop=\"mg_state\" label=\"状态\" width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <el-switch v-model=\"scope.row.mg_state\" @change=\"switchChange(scope.row)\" active-color=\"#67c23a\" inactive-color=\"#ccc\">\r\n          </el-switch>\r\n          { { scope.row.mg_state } }\r\n        </template>\r\n      </el-table-column>\r\n      ...\r\n    </el-table>\r\n    <br />\r\n\r\n    <!-- 分页控件 -->\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  ...\r\n  methods: {\r\n    ...\r\n    // 开关事件,修改用户状态\r\n    switchChange (row) {\r\n      // 修改用户状态接口put：users/:uId/state/:type\r\n      //  :uId：是要修改的用户的id(也就是row.id)\r\n      //  :type：是要修改的用户的状态（也就是row.mg_state)\r\n      let token = window.localStorage.getItem(\'token\')\r\n      this.$http({\r\n        url: `users/${row.id}/state/${row.mg_state}`,\r\n        method: \'put\',\r\n        headers: {\'Authorization\': token}\r\n      }).then(res => {\r\n        var { meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.$message({\r\n            message: \'修改状态成功\',\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### 删除用户功能\r\n确认框confirm 参考网址：http://element-cn.eleme.io/#/zh-CN/component/message-box\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 用户列表 -->\r\n    <el-table :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      ...\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- scope就是绑定的数据源，scope.row是行数据对象 -->\r\n          <el-button type=\"primary\" @click=\"edit(scope.row)\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" @click=\"del(scope.row.id)\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" @click=\"openRole(scope.row)\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  ...\r\n  methods: {\r\n    ...\r\n    // 删除用户事件\r\n    del (id) {\r\n      // 接口delete：users/:id\r\n      this.$confirm(\'确定要删除吗?\', \'温馨提示\', {\r\n        confirmButtonText: \'确定\',\r\n        cancelButtonText: \'取消\',\r\n        type: \'warning\'\r\n      }).then(() => {\r\n        this.$http({\r\n          url: \'users/\' + id,\r\n          method: \'delete\',\r\n          headers: {\r\n            \'Authorization\': window.localStorage.getItem(\'token\')\r\n          }\r\n        }).then(res => {\r\n          var { meta } = res.data\r\n          if (meta.status === 200) {\r\n            this.$message({\r\n              message: \'删除成功！\',\r\n              type: \'success\'\r\n            })\r\n            this.getDataList()\r\n          } else {\r\n            this.$message.error(\'删除失败\')\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: \'info\',\r\n          message: \'已取消删除\'\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n### 新增用户预览\r\n[![VFVsjw.png](https://t1.picb.cc/uploads/2019/04/02/VFVsjw.png)](https://www.picb.cc/image/VFVsjw)\r\n### 新增用户代码\r\nDialog 对话框 参考网址：http://element-cn.eleme.io/#/zh-CN/component/dialog\r\n以下代码使用的是：“Dialog 对话框” 中的 “自定义内容”\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n	<!-- 搜索与新增 -->\r\n	...\r\n        <el-button @click=\"add\" type=\"success\" plain>新增</el-button>\r\n	...\r\n    <!-- 新增用户面板（对话框） -->\r\n    <el-dialog title=\"新增用户\" :visible.sync=\"addVisible\">\r\n      <el-form :model=\"form\" status-icon :rules=\"rules2\" ref=\"addForm\">\r\n        <el-form-item label=\"用户名\" prop=\"username\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\" :label-width=\"addLabelWidth\">\r\n          <el-input type=\"password\" v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addSubmit(\'addForm\')\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      addVisible: false, // 新增用户面板显示与否，默认不显示\r\n      addLabelWidth: \'120px\', // 新增用户面板表单宽度\r\n      form: { // 新增或编辑用户面板的表单数据\r\n        username: \'\',\r\n        password: \'\',\r\n        email: \'\',\r\n        mobile: \'\'\r\n      },\r\n      rules2: { // 新增用户面板的：验证规则\r\n        username: [{\r\n          required: true,\r\n          message: \'请输入用户名！\',\r\n          trigger: \'blur\'\r\n        }],\r\n        password: [{\r\n          required: true,\r\n          message: \'请输入密码\',\r\n          trigger: \'blur\'\r\n        }]\r\n      }\r\n    }\r\n  },\r\n  ...\r\n  methods: {\r\n    ...\r\n    // 打开新增用户面板（对话框）\r\n    add () {\r\n      this.form.username = \'\'\r\n      this.form.password = \'\'\r\n      this.form.email = \'\'\r\n      this.form.mobile = \'\'\r\n      this.addVisible = true\r\n    },\r\n    // 提交新增用户请求\r\n    addSubmit (formName) {\r\n      // 先验证前台表单数据（使用 this.rule2 规则）\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          // 前台表单验证通过\r\n          this.$http({\r\n            url: \'users\',\r\n            method: \'post\',\r\n            headers: {\r\n              \'Authorization\': window.localStorage.getItem(\'token\')\r\n            },\r\n            data: {\r\n              username: this.form.username,\r\n              password: this.form.password,\r\n              email: this.form.email,\r\n              mobile: this.form.mobile\r\n            }\r\n          }).then(res => {\r\n            var { meta } = res.data\r\n            if (meta.status === 201) {\r\n              // 新增用户成功\r\n              this.$message({\r\n                message: meta.msg,\r\n                type: \'success\'\r\n              })\r\n            } else {\r\n              // 新增用户失败\r\n              this.$message.error(meta.msg)\r\n            }\r\n            // 关闭面板\r\n            this.addVisible = false\r\n            // 清空面板内容（特别注意：此处for循环遍历对象，key前面要加var声明，否则报错）\r\n            for (var key in this.form) {\r\n              this.form[key] = \'\'\r\n            }\r\n            // 重新渲染列表（必须在请求的回调函数中执行，因为请求是异步的）\r\n            this.getDataList()\r\n          })\r\n        } else {\r\n          // this.$message.error(\'请正确填写表单数据！\')\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### 编辑用户预览\r\n![VFgmY0.png](https://t1.picb.cc/uploads/2019/04/02/VFgmY0.png)\r\n### 编辑用户代码\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n	<!-- 用户列表 -->\r\n    <el-table :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      ...\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- scope就是绑定的数据源，scope.row是行数据对象 -->\r\n          <el-button type=\"primary\" @click=\"edit(scope.row)\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" @click=\"del(scope.row.id)\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" @click=\"openRole(scope.row)\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n	...\r\n    <!-- 编辑用户面板（对话框） -->\r\n    <el-dialog title=\"编辑用户\" :visible.sync=\"editVisible\">\r\n      <el-form :model=\"form\" status-icon :rules=\"rules3\" ref=\"editForm\">\r\n        <el-form-item disabled label=\"用户名\" prop=\"username\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.username\" autocomplete=\"off\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\" :label-width=\"addLabelWidth\">\r\n          <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"editSubmit(\'editForm\')\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      addLabelWidth: \'120px\', // 新增或编辑用户面板的表单宽度\r\n      form: { // 新增或编辑用户面板的表单数据\r\n        username: \'\',\r\n        password: \'\',\r\n        email: \'\',\r\n        mobile: \'\',\r\n        id: \'\' // 编辑的使用才用 id\r\n      },\r\n      ...\r\n      editVisible: false, // 编辑用户面板显示与否，默认不显示\r\n      rules3: { // 编辑用户面板的：验证规则\r\n        username: [{\r\n          required: true,\r\n          message: \'请输入用户名！\',\r\n          trigger: \'blur\'\r\n        }]\r\n      }\r\n    }\r\n  },\r\n ...\r\n  methods: {\r\n    ...\r\n    // 打开编辑用户面板（与新增面板相同）\r\n    edit (row) {\r\n      this.form.username = row.username\r\n      this.form.email = row.email\r\n      this.form.mobile = row.mobile\r\n      this.form.id = row.id\r\n      this.editVisible = true\r\n    },\r\n    // 提交编辑用户请求\r\n    editSubmit (formName) {\r\n      // 先进行前台表单规则验证\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          // 前台验证通过\r\n          this.$http({\r\n            url: \'users/\' + this.form.id,\r\n            method: \'put\',\r\n            headers: {\r\n              \'Authorization\': window.localStorage.getItem(\'token\')\r\n            },\r\n            data: {\r\n              email: this.form.email,\r\n              mobile: this.form.mobile\r\n            }\r\n          }).then(res => {\r\n            var { data, meta } = res.data\r\n            if (meta.status === 200) {\r\n              // 编辑成功\r\n              this.$message({\r\n                message: meta.msg,\r\n                type: \'success\'\r\n              })\r\n            } else {\r\n              // 编辑失败\r\n              this.$message.error(meta.msg)\r\n            }\r\n            // 关闭面板\r\n            this.editVisible = false\r\n            // 编辑成功后，重新请求列表并不划算（消耗服务器），应该只进行前端渲染\r\n            // this.getDataList() // 不划算\r\n            for (var key in this.dataList) {\r\n              // 因此，遍历前端已经拿到的数据，进行定点修改更新\r\n              if (this.dataList[key].id === data.id) {\r\n                this.dataList[key].email = data.email\r\n                this.dataList[key].mobile = this.form.mobile\r\n              }\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### loading 加载效果\r\nLoading加载 参考网址：http://element-cn.eleme.io/#/zh-CN/component/loading\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 用户列表 -->\r\n    <el-table  :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      ...\r\n    </el-table>\r\n    <br />\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      loading: true\r\n    }\r\n  },\r\n  ...\r\n  methods: {\r\n    // 请求用户列表数据\r\n    getDataList () {\r\n      let token = window.localStorage.getItem(\'token\')\r\n      this.$http({\r\n        ...\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.dataList = data.users\r\n          // 设置数据总条数,用于分页控件\r\n          this.total = data.total\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n        // 模式网络延时，然后再关闭 loading 效果\r\n        setTimeout(() => {\r\n          this.loading = false\r\n        }, 300)\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### 分配角色预览\r\n![VFtqeR.png](https://t1.picb.cc/uploads/2019/04/02/VFtqeR.png)\r\n### 分配角色代码 (下拉框)\r\nsrc/views/users/users.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 用户列表 -->\r\n    <el-table  :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n      ...\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- scope就是绑定的数据源，scope.row是行数据对象 -->\r\n          <el-button type=\"primary\" @click=\"edit(scope.row)\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" @click=\"del(scope.row.id)\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" @click=\"openRole(scope.row)\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <br />\r\n\r\n    <!-- 角色分配面板（对话框） -->\r\n    <el-dialog title=\"分配角色\" :visible.sync=\"roleVisible\">\r\n      <el-form :model=\"currentUser\">\r\n        <el-form-item label=\"当前用户\" :label-width=\"rolelabelWiddth\">\r\n          { { currentUser.username } }\r\n        </el-form-item>\r\n        <el-form-item label=\"选择角色\" :label-width=\"rolelabelWiddth\">\r\n          <el-select v-model=\"currentUser.rid\" placeholder=\"请选择\">\r\n            <!-- value为-1时表示该用户没有分配角色，label显示为“请选择角色” -->\r\n            <el-option label=\"请选择角色\" :value=\"-1\">\r\n            </el-option>\r\n            <el-option v-for=\"item in rolesList\" :key=\"item.id\" :label=\"item.roleName\" :value=\"item.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"roleVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"setRole\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      loading: true,\r\n      roleVisible: false, // 分配用户角色的面板显示与否，默认不显示\r\n      rolelabelWiddth: \'150px\',\r\n      currentUser: { // 分配角色面板的 当前用户\r\n        username: \'\',\r\n        id: \'\',\r\n        rid: \'\'\r\n      },\r\n      rolesList: [{ // 角色列表\r\n        rolename: \'aaa\',\r\n        id: 500\r\n      }, {\r\n        rolename: \'bbb\',\r\n        id: 600\r\n      }]\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getDataList()\r\n  },\r\n  methods: {\r\n    ...\r\n    // 打开角色分配面板\r\n    openRole (row) {\r\n      // 先查询用户信息，给当前用户数据赋值，渲染面板\r\n      this.$http({\r\n        url: `users/${row.id}`,\r\n        method: \'get\',\r\n        headers: {\r\n          \'Authorization\': window.localStorage.getItem(\'token\')\r\n        }\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.currentUser.id = data.id\r\n          this.currentUser.rid = data.rid\r\n          this.currentUser.username = data.username\r\n        } else {\r\n          this.$message.error(\'获取用户权限信息失败！\')\r\n        }\r\n      })\r\n      // 打开角色分配面板\r\n      this.roleVisible = true\r\n      // 获取角色列表数据\r\n      this.getRolesList()\r\n    },\r\n    // 获取角色列表(面板中要使用)\r\n    getRolesList () {\r\n      this.$http({\r\n        url: \'roles\',\r\n        method: \'get\',\r\n        headers: {\r\n          \'Authorization\': window.localStorage.getItem(\'token\')\r\n        }\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.rolesList = data\r\n        } else {\r\n          this.$message.error(\'获取角色列表失败！\')\r\n        }\r\n      })\r\n    },\r\n    // 提交用户角色分配请求\r\n    setRole () {\r\n      this.$http({\r\n        url: `users/${this.currentUser.id}/role`,\r\n        method: \'put\',\r\n        headers: {\r\n          \'Authorization\': window.localStorage.getItem(\'token\')\r\n        },\r\n        data: {\r\n          rid: this.currentUser.rid\r\n        }\r\n      }).then(res => {\r\n        var { meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.$message({\r\n            message: meta.msg,\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n        // 需在回调的最后，关闭面板\r\n        this.roleVisible = false\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n```\r\n### 封装 axios 拦截器（用于加 token）\r\nsrc/assets/js/myaxios.js\r\n```\r\nimport Axios from \'axios\'\r\nvar myPlugin = {}\r\nmyPlugin.install = function (vue) {\r\n  // 创建axios实例\r\n  var instance = Axios.create({\r\n    baseURL: \'http://192.168.10.10:8888/api/private/v1/\'\r\n  })\r\n  // axios 拦截器：可用于在请求发送之前，做一些事情，如加个请求头 token\r\n  instance.interceptors.request.use(function (config) {\r\n    // 请求非登录页面时，带上token\r\n    if (config.url !== \'login\') {\r\n      // instance.defaults.headers.Authorization = window.localStorage.getItem(\'token\')\r\n      // 上面的 instance.defaults 是给全局的 axios 请求带上token，这显然不对，我们要求是给除了 login 以外的请求带上 token\r\n      // 因此需要给每次的请求单独加上 token，每次的请求对象，就是 config ，在 config 上加 token 就好\r\n      config.headers.Authorization = window.localStorage.getItem(\'token\')\r\n    }\r\n    return config\r\n  })\r\n  vue.prototype.$http = instance\r\n}\r\n// 暴露\r\nexport default myPlugin\r\n\r\n```\r\n在 axios 拦截器中加了 headers.Authorization 请求头后，以后每次请求非 login 接口时，不用每次都设置 `headers: { \'Authorization\': token)}` 了。\r\n因此，去除 src/views/users/users.vue 中的 `headers: { \'Authorization\': token)} ` 设置，共8个方法中有设置，都需要去除。\r\n\r\n### 自定义全局组件（面包屑）\r\n定义**面包屑全局组件**文件：src/components/breadcrumb.vue\r\n```\r\n<template>\r\n  <el-card>\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ name: \'index\'}\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>{ {level2} }</el-breadcrumb-item>\r\n      <el-breadcrumb-item>{ {level3} }</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \'MybreadCrumb\', // 定义一个变量，作为导入组件、使用组件时的 组件名称，提前把组件名称设置好\r\n  props: [\'level2\', \'level3\'] // 定义组件的参数，将来导入组件时需从外部传入的参数变量\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n```\r\n引入和注册面包屑组件\r\nsrc/main.js\r\n```\r\n// 引入全局面包屑组件\r\nimport MybreadCrumb from \'@/components/breadcrumb.vue\'\r\n...\r\n// 注册全局面包屑组件，格式：Vue.component(\'组件名\' , 组件)\r\nVue.component(MybreadCrumb.name, MybreadCrumb)\r\n```\r\n使用面包屑组件\r\nsrc/views/users/users.vue\r\n```\r\n<!-- 面包屑 -->\r\n  <!-- <el-card>\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ name: \'index\' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n  </el-card> -->\r\n  <MybreadCrumb level2=\"用户管理\" level3=\"用户列表\" />\r\n```\r\n### 把 users.vue 一分为三（html/js/css）\r\n当 vue 文件内容太多时，可以把它拆分成 HTML、JS、CSS三部分，然后再引用拆分出去的内容。\r\n#### src/views/users/users.vue\r\n把 src/views/users/users.vue 的内容都拆分出去，然后引用其拆分出去的的内容\r\n```\r\n<template src=\"./users.html\">\r\n\r\n</template>\r\n\r\n<script src=\"./users.js\">\r\n\r\n</script>\r\n\r\n<style src=\"./users.css\">\r\n\r\n</style>\r\n\r\n```\r\n#### src/views/users/users.html\r\n拆分出来的 html 代码： src/views/users/users.html\r\n```\r\n<div>\r\n  <!-- 面包屑 -->\r\n  <!-- <el-card>\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ name: \'index\' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n  </el-card> -->\r\n  <MybreadCrumb level2=\"用户管理\" level3=\"用户列表\" />\r\n\r\n  <!-- 搜索与新增 -->\r\n  <el-row id=\"search\">\r\n    <el-col :span=\"6\">\r\n      <el-input placeholder=\"请输入内容\" v-model=\"query\" class=\"input-with-select\">\r\n        <el-button slot=\"append\" @click=\"search\" icon=\"el-icon-search\"></el-button>\r\n      </el-input>\r\n    </el-col>\r\n    <el-col :span=\"6\">\r\n        \r\n      <el-button @click=\"add\" type=\"success\" plain>新增</el-button>\r\n    </el-col>\r\n  </el-row>\r\n\r\n  <!-- 用户列表 -->\r\n  <!--\r\n    el-table: 会自动对绑定的(:data)数据源进行遍历\r\n    prop 属性：当前 table 数据中，哪个字段属性显示在这一列中\r\n    -->\r\n  <el-table  :data=\"dataList\" v-loading=\"loading\" border style=\"width: 100%\">\r\n    <el-table-column type=\"index\" width=\"50\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"username\" label=\"姓名\" width=\"150\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"email\" label=\"邮箱\" width=\"200\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"mobile\" label=\"电话\" width=\"200\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"mg_state\" label=\"状态\" width=\"120\">\r\n      <!--\r\n      1.0 表中添加开关switch、按钮button的话，需要外层套上template标签\r\n      2.0 并且template标签还要添加属性slot-scope\r\n        slot-scope属性：用来给这个template设置数据源（没有这个属性，内容无法显示）\r\n        scope是一个对象\r\n          属性：\r\n            row：会得到绑定给当前行的数据对象\r\n      -->\r\n      <template slot-scope=\"scope\">\r\n        <el-switch v-model=\"scope.row.mg_state\" @change=\"switchChange(scope.row)\" active-color=\"#67c23a\" inactive-color=\"#ccc\">\r\n        </el-switch>\r\n        { { scope.row.mg_state } }\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column label=\"操作\">\r\n      <template slot-scope=\"scope\">\r\n        <!-- scope就是绑定的数据源，scope.row是行数据对象 -->\r\n        <el-button type=\"primary\" @click=\"edit(scope.row)\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n        <el-button type=\"warning\" @click=\"del(scope.row.id)\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n        <el-button type=\"danger\" @click=\"openRole(scope.row)\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n      </template>\r\n    </el-table-column>\r\n  </el-table>\r\n  <br />\r\n\r\n  <!-- 分页控件 -->\r\n  <!--\r\n    el-pagination: 分页组件根元素\r\n      事件：\r\n        @size-change：页容量改变时触发\r\n        @current-change：页码改变时触发\r\n      属性：\r\n        current-page：当前第几页\r\n        page-sizes：页容量数组\r\n        page-size：当前选中的某个页容量\r\n        layout：分页控件的布局，设置包含哪里模块\r\n        total：分页控件的总数据条数\r\n  -->\r\n  <el-pagination\r\n    @size-change=\"pageSizeChange\"\r\n    @current-change=\"pageNumChange\"\r\n    :current-page=\"pagenum\"\r\n    :page-sizes=\"pagesizes\"\r\n    :page-size=\"pagesize\"\r\n    :total=\"total\"\r\n    layout=\"total, sizes, prev, pager, next, jumper\" >\r\n  </el-pagination>\r\n\r\n  <!-- 新增用户面板（对话框） -->\r\n  <el-dialog title=\"新增用户\" :visible.sync=\"addVisible\">\r\n    <el-form :model=\"form\" status-icon :rules=\"rules2\" ref=\"addForm\">\r\n      <el-form-item label=\"用户名\" prop=\"username\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码\" prop=\"password\" :label-width=\"addLabelWidth\">\r\n        <el-input type=\"password\" v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"邮箱\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"电话\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n    </el-form>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button @click=\"addVisible = false\">取 消</el-button>\r\n      <el-button type=\"primary\" @click=\"addSubmit(\'addForm\')\">确 定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n\r\n  <!-- 编辑用户面板（对话框） -->\r\n  <el-dialog title=\"编辑用户\" :visible.sync=\"editVisible\">\r\n    <el-form :model=\"form\" status-icon :rules=\"rules3\" ref=\"editForm\">\r\n      <el-form-item disabled label=\"用户名\" prop=\"username\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.username\" autocomplete=\"off\" disabled></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"邮箱\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"电话\" :label-width=\"addLabelWidth\">\r\n        <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n    </el-form>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button @click=\"editVisible = false\">取 消</el-button>\r\n      <el-button type=\"primary\" @click=\"editSubmit(\'editForm\')\">确 定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n\r\n  <!-- 角色分配面板（对话框） -->\r\n  <el-dialog title=\"分配角色\" :visible.sync=\"roleVisible\">\r\n    <el-form :model=\"currentUser\">\r\n      <el-form-item label=\"当前用户\" :label-width=\"rolelabelWiddth\">\r\n        { { currentUser.username } }\r\n      </el-form-item>\r\n      <el-form-item label=\"选择角色\" :label-width=\"rolelabelWiddth\">\r\n        <el-select v-model=\"currentUser.rid\" placeholder=\"请选择\">\r\n          <!-- value为-1时表示该用户没有分配角色，label显示为“请选择角色” -->\r\n          <el-option label=\"请选择角色\" :value=\"-1\">\r\n          </el-option>\r\n          <el-option v-for=\"item in rolesList\" :key=\"item.id\" :label=\"item.roleName\" :value=\"item.id\">\r\n          </el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n    </el-form>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button @click=\"roleVisible = false\">取 消</el-button>\r\n      <el-button type=\"primary\" @click=\"setRole\">确 定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n\r\n</div>\r\n```\r\n#### src/views/users/users.js\r\n拆分出来的 js 代码： src/views/users/users.js\r\n```\r\nexport default {\r\n  data () {\r\n    return {\r\n      dataList: [], // 用户列表数据\r\n      pagenum: 1,\r\n      pagesize: 2,\r\n      query: \'\', // 查询关键字\r\n      pagesizes: [2, 4, 6, 8, 10],\r\n      total: 0, // 用户列表总条数\r\n      addVisible: false, // 新增用户面板显示与否，默认不显示\r\n      addLabelWidth: \'120px\', // 新增或编辑用户面板的表单宽度\r\n      form: { // 新增或编辑用户面板的表单数据\r\n        username: \'\',\r\n        password: \'\',\r\n        email: \'\',\r\n        mobile: \'\',\r\n        id: \'\' // 编辑的使用才用 id\r\n      },\r\n      rules2: { // 新增用户面板的：验证规则\r\n        username: [{\r\n          required: true,\r\n          message: \'请输入用户名！\',\r\n          trigger: \'blur\'\r\n        }],\r\n        password: [{\r\n          required: true,\r\n          message: \'请输入密码\',\r\n          trigger: \'blur\'\r\n        }]\r\n      },\r\n      editVisible: false, // 编辑用户面板显示与否，默认不显示\r\n      rules3: { // 编辑用户面板的：验证规则\r\n        username: [{\r\n          required: true,\r\n          message: \'请输入用户名！\',\r\n          trigger: \'blur\'\r\n        }]\r\n      },\r\n      loading: true,\r\n      roleVisible: false, // 分配用户角色的面板显示与否，默认不显示\r\n      rolelabelWiddth: \'150px\',\r\n      currentUser: { // 分配角色面板的 当前用户\r\n        username: \'\',\r\n        id: \'\',\r\n        rid: \'\'\r\n      },\r\n      rolesList: [{ // 角色列表\r\n        rolename: \'aaa\',\r\n        id: 500\r\n      }, {\r\n        rolename: \'bbb\',\r\n        id: 600\r\n      }]\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getDataList()\r\n  },\r\n  methods: {\r\n    // 请求用户列表数据\r\n    getDataList () {\r\n      this.$http({\r\n        url: \'users\',\r\n        method: \'get\',\r\n        params: {\r\n          pagenum: this.pagenum,\r\n          pagesize: this.pagesize,\r\n          query: this.query\r\n        }\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.dataList = data.users\r\n          // 设置数据总条数,用于分页控件\r\n          this.total = data.total\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n        // 模式网络延时，然后再关闭 loading 效果\r\n        setTimeout(() => {\r\n          this.loading = false\r\n        }, 300)\r\n      })\r\n    },\r\n    // 页码改变事件\r\n    pageNumChange (val) {\r\n      // 页码改变时，重新赋值数据\r\n      this.pagenum = val\r\n      // 重新获取数据(因为这是服务器端分页)\r\n      this.getDataList()\r\n    },\r\n    // 页容量改变事件\r\n    pageSizeChange (val) {\r\n      // 页容量改变时，更新数据，从而驱动页面渲染\r\n      this.pagesize = val\r\n      // 改变页容量时，要初始化当前页码，以免造成页码超出范围（如最大页码为5，当前页页码却为10）\r\n      this.pagenum = 1\r\n      this.getDataList()\r\n    },\r\n    // 搜索方法\r\n    search () {\r\n      this.pagenum = 1\r\n      this.getDataList()\r\n    },\r\n    // 开关事件,修改用户状态\r\n    switchChange (row) {\r\n      // 修改用户状态接口put：users/:uId/state/:type\r\n      //  :uId：是要修改的用户的id(也就是row.id)\r\n      //  :type：是要修改的用户的状态（也就是row.mg_state)\r\n      this.$http({\r\n        url: `users/${row.id}/state/${row.mg_state}`,\r\n        method: \'put\'\r\n      }).then(res => {\r\n        var { meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.$message({\r\n            message: \'修改状态成功\',\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 删除用户事件\r\n    del (id) {\r\n      // 接口delete：users/:id\r\n      this.$confirm(\'确定要删除吗?\', \'温馨提示\', {\r\n        confirmButtonText: \'确定\',\r\n        cancelButtonText: \'取消\',\r\n        type: \'warning\'\r\n      }).then(() => {\r\n        this.$http({\r\n          url: \'users/\' + id,\r\n          method: \'delete\'\r\n        }).then(res => {\r\n          var { meta } = res.data\r\n          if (meta.status === 200) {\r\n            this.$message({\r\n              message: \'删除成功！\',\r\n              type: \'success\'\r\n            })\r\n            this.getDataList()\r\n          } else {\r\n            this.$message.error(\'删除失败\')\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: \'info\',\r\n          message: \'已取消删除\'\r\n        })\r\n      })\r\n    },\r\n    // 打开新增用户面板（对话框）\r\n    add () {\r\n      this.form.username = \'\'\r\n      this.form.password = \'\'\r\n      this.form.email = \'\'\r\n      this.form.mobile = \'\'\r\n      this.addVisible = true\r\n    },\r\n    // 提交新增用户请求\r\n    addSubmit (formName) {\r\n      // 先验证前台表单数据（使用 this.rule2 规则）\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          // 前台表单验证通过\r\n          this.$http({\r\n            url: \'users\',\r\n            method: \'post\',\r\n            data: {\r\n              username: this.form.username,\r\n              password: this.form.password,\r\n              email: this.form.email,\r\n              mobile: this.form.mobile\r\n            }\r\n          }).then(res => {\r\n            var { meta } = res.data\r\n            if (meta.status === 201) {\r\n              // 新增用户成功\r\n              this.$message({\r\n                message: meta.msg,\r\n                type: \'success\'\r\n              })\r\n            } else {\r\n              // 新增用户失败\r\n              this.$message.error(meta.msg)\r\n            }\r\n            // 关闭面板\r\n            this.addVisible = false\r\n            // 清空面板内容（特别注意：此处for循环遍历对象，key前面要加var声明，否则报错）\r\n            for (var key in this.form) {\r\n              this.form[key] = \'\'\r\n            }\r\n            // 重新渲染列表（必须在请求的回调函数中执行，因为请求是异步的）\r\n            this.getDataList()\r\n          })\r\n        } else {\r\n          // this.$message.error(\'请正确填写表单数据！\')\r\n        }\r\n      })\r\n    },\r\n    // 打开编辑用户面板（与新增面板相同）\r\n    edit (row) {\r\n      this.form.username = row.username\r\n      this.form.email = row.email\r\n      this.form.mobile = row.mobile\r\n      this.form.id = row.id\r\n      this.editVisible = true\r\n    },\r\n    // 提交编辑用户请求\r\n    editSubmit (formName) {\r\n      // 先进行前台表单规则验证\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          // 前台验证通过\r\n          this.$http({\r\n            url: \'users/\' + this.form.id,\r\n            method: \'put\',\r\n            data: {\r\n              email: this.form.email,\r\n              mobile: this.form.mobile\r\n            }\r\n          }).then(res => {\r\n            var { data, meta } = res.data\r\n            if (meta.status === 200) {\r\n              // 编辑成功\r\n              this.$message({\r\n                message: meta.msg,\r\n                type: \'success\'\r\n              })\r\n            } else {\r\n              // 编辑失败\r\n              this.$message.error(meta.msg)\r\n            }\r\n            // 关闭面板\r\n            this.editVisible = false\r\n            // 编辑成功后，重新请求列表并不划算（消耗服务器），应该只进行前端渲染\r\n            // this.getDataList() // 不划算\r\n            for (var key in this.dataList) {\r\n              // 因此，遍历前端已经拿到的数据，进行定点修改更新\r\n              if (this.dataList[key].id === data.id) {\r\n                this.dataList[key].email = data.email\r\n                this.dataList[key].mobile = this.form.mobile\r\n              }\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    // 打开角色分配面板\r\n    openRole (row) {\r\n      // 先查询用户信息，给当前用户数据赋值，渲染面板\r\n      this.$http({\r\n        url: `users/${row.id}`,\r\n        method: \'get\'\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.currentUser.id = data.id\r\n          this.currentUser.rid = data.rid\r\n          this.currentUser.username = data.username\r\n        } else {\r\n          this.$message.error(\'获取用户权限信息失败！\')\r\n        }\r\n      })\r\n      // 打开角色分配面板\r\n      this.roleVisible = true\r\n      // 获取角色列表数据\r\n      this.getRolesList()\r\n    },\r\n    // 获取角色列表(面板中要使用)\r\n    getRolesList () {\r\n      this.$http({\r\n        url: \'roles\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.rolesList = data\r\n        } else {\r\n          this.$message.error(\'获取角色列表失败！\')\r\n        }\r\n      })\r\n    },\r\n    // 提交用户角色分配请求\r\n    setRole () {\r\n      this.$http({\r\n        url: `users/${this.currentUser.id}/role`,\r\n        method: \'put\',\r\n        data: {\r\n          rid: this.currentUser.rid\r\n        }\r\n      }).then(res => {\r\n        var { meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.$message({\r\n            message: meta.msg,\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n        // 需在回调的最后，关闭面板\r\n        this.roleVisible = false\r\n      })\r\n    }\r\n  }\r\n}\r\n```\r\n#### src/views/users/users.css\r\n拆分出来的 css 代码： src/views/users/users.css\r\n```\r\n #search {\r\n	margin: 10px 0;\r\n}\r\n```',11,100,'2019-04-01 15:25:48','2019-04-06 05:29:39'),(302,'## 权限管理\r\n### 权限列表\r\n#### 权限列表路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport Rights from \'@/views/rights/rights.vue\'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        ...\r\n        // 权限列表路由\r\n        {\r\n          name: \'rights\',\r\n          path: \'rights\',\r\n          component: Rights\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n```\r\n新建权限列表组件：src/views/rights/rights.vue\r\n```\r\n<template>\r\n  <div>\r\n    rights\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n修改左侧栏导航链接\r\nsrc/components/asider.vue\r\n```\r\n<el-menu-item index=\"/rights\">\r\n	<template>\r\n		<i class=\"el-icon-menu\"></i>\r\n		<span>权限列表</span>\r\n	</template>\r\n</el-menu-item>\r\n```\r\n#### 权限列表预览\r\n![VFlNMw.png](https://t1.picb.cc/uploads/2019/04/03/VFlNMw.png)\r\n#### 权限列表代码\r\nTable 表格（带边框表格）参考网址：http://element-cn.eleme.io/#/zh-CN/component/table\r\nsrc/views/rights/rights.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑 -->\r\n    <MybreadCrumb level2=\"用户管理\" level3=\"用户列表\" />\r\n\r\n    <!-- 权限列表 -->\r\n    <el-table :data=\"rightsList\" border v-loading=\"loading\" height=\"500\" style=\"width: 100%\">\r\n      <el-table-column type=\"index\"  width=\"50\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"authName\" label=\"权限名称\" width=\"180\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"path\" label=\"路径\" width=\"180\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"level\" label=\"层级\">\r\n        <!-- 在表格列中显示自己的内容，用template -->\r\n        <template slot-scope=\"scope\">\r\n          <span v-if=\"scope.row.level === \'0\'\">一级</span>\r\n          <span v-else-if=\"scope.row.level === \'1\'\">二级</span>\r\n          <span v-else-if=\"scope.row.level === \'2\'\">三级</span>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      rightsList: [],\r\n      loading: true\r\n    }\r\n  },\r\n  created () {\r\n    this.getRightsList()\r\n  },\r\n  methods: {\r\n    getRightsList () {\r\n      // 得到所有权限数据\r\n      this.$http({\r\n        url: \'rights/list\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        var {data, meta} = res.data\r\n        if (meta.status === 200) {\r\n          this.rightsList = data\r\n          this.loading = false\r\n        } else {\r\n          this.$message.error(\'获取权限列表失败！\')\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n```\r\n### 角色列表\r\n#### 角色列表路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport Roles from \'@/views/rights/roles.vue\'\r\n...\r\nexport default new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n       ...\r\n        // 角色列表路由\r\n        {\r\n          name: \'roles\',\r\n          path: \'roles\',\r\n          component: Roles\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n\r\n```\r\n新建角色列表组件文件：src/views/rights/roles.vue\r\n```\r\n<template>\r\n  <div>\r\n    roles\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n修改左侧导航链接 src/components/asider.vue\r\n```\r\n<el-menu-item index=\"/roles\">\r\n	<template>\r\n		<i class=\"el-icon-menu\"></i>\r\n		<span>角色列表</span>\r\n	</template>\r\n</el-menu-item>\r\n```\r\n#### 角色列表UI预览\r\n![VFWoI0.png](https://t1.picb.cc/uploads/2019/04/03/VFWoI0.png)\r\n#### 角色列表UI代码（展开行）\r\nTable 表格（展开行） 参考网址：http://element-cn.eleme.io/#/zh-CN/component/table\r\nTag 标签 参考网址：http://element-cn.eleme.io/#/zh-CN/component/tag\r\nsrc/views/rights/roles.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"权限管理\" level3=\"角色列表\" />\r\n\r\n    <!-- 新增角色区域 -->\r\n    <el-row class=\"addRole\">\r\n      <el-button type=\"primary\" plain>新增角色</el-button>\r\n    </el-row>\r\n\r\n    <!-- 表格 -->\r\n    <el-table v-loading=\"loading\" border :data=\"rolesList\" style=\"widht: 100%\">\r\n      <!-- 在表格最前面加一个列可以展开的内容，即 tpye=\"expand\" -->\r\n      <el-table-column type=\"expand\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- 1.0 遍历角色的一级权限，children 是角色包含的树形结构的权限数据  -->\r\n          <el-row v-for=\"item1 in scope.row.children\" :key=\"item1.id\">\r\n            <el-col :span=\"4\">\r\n              <el-tag closable>{ { item1.authName } }</el-tag>\r\n            </el-col>\r\n            <el-col :span=\"20\">\r\n              <!-- 2.0 遍历角色的二级权限 -->\r\n              <el-row v-for=\"item2 in item1.children\" :key=\"item2.id\">\r\n                <el-col :span=\"4\">\r\n                  <el-tag type=\"success\" closable>{ { item2.authName } }</el-tag>\r\n                </el-col>\r\n                <el-col :span=\"20\">\r\n                  <el-row>\r\n                    <el-col>\r\n                      <!-- 3.0 在tag中角色的三级权限（tag未来生成span标签） -->\r\n                      <el-tag class=\"tagM\" v-for=\"item3 in item2.children\" :key=\"item3.id\" type=\"warning\" closable>\r\n                        { { item3.authName } }\r\n                      </el-tag>\r\n                    </el-col>\r\n                  </el-row>\r\n                </el-col>\r\n              </el-row>\r\n            </el-col>\r\n          </el-row>\r\n          <el-row v-if=\"scope.row.children.length<=0\">\r\n            <template>还没有分配权限</template>\r\n          </el-row>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 以上 expand 是表格的展开内容；以下是表格为未展开时的内容 -->\r\n      <el-table-column type=\"index\" widht=\"50\"></el-table-column>\r\n      <el-table-column prop=\"roleName\" label=\"角色名称\" width=\"250\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"roleDesc\" label=\"角色描述\" width=\"250\">\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <!-- 给模板绑定数据源scope -->\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" icon=\"el-icon-check\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n		return {\r\n			loading: false,\r\n      		rolesList: []\r\n		}\r\n	},\r\n	created () {\r\n		this.getRolesList()\r\n	},\r\n	methods: {\r\n		// 获取角色列表\r\n		getRolesList () {\r\n			this.$http({\r\n				url: \'roles\',\r\n				method: \'get\'\r\n			}).then(res => {\r\n				let { data, meta } = res.data\r\n				if (meta.status === 200) {\r\n					this.rolesList = data\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n			})\r\n		}\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n.addRole {\r\n	margin: 10px 0;\r\n}\r\n.tagM {\r\n	margin: 0px 5px 5px 5px;\r\n}\r\n</style>\r\n\r\n```\r\n#### 删除某角色的某权限\r\nsrc/views/rights/roles.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 表格 -->\r\n    <el-table v-loading=\"loading\" border :data=\"rolesList\" style=\"widht: 100%\">\r\n      <!-- 在表格最前面加一个列可以展开的内容，即 tpye=\"expand\" -->\r\n      <el-table-column type=\"expand\">\r\n        <template slot-scope=\"scope\">\r\n          <!-- 1.0 遍历角色的一级权限，children 是角色包含的树形结构的权限数据  -->\r\n          <el-row v-for=\"item1 in scope.row.children\" :key=\"item1.id\">\r\n            <el-col :span=\"4\">\r\n              <el-tag closable>{ { item1.authName } }</el-tag>\r\n			  <el-tag @close=\"tagClose(scope.row.children,item1,scope.row.id)\" closable>{ { item1.authName } }</el-tag>\r\n            </el-col>\r\n            <el-col :span=\"20\">\r\n              <!-- 2.0 遍历角色的二级权限 -->\r\n              <el-row v-for=\"item2 in item1.children\" :key=\"item2.id\">\r\n                <el-col :span=\"4\">\r\n				  <el-tag @close=\"tagClose(item1.children,item2,scope.row.id)\" type=\"success\" closable>{ { item2.authName } }</el-tag>\r\n                </el-col>\r\n                <el-col :span=\"20\">\r\n                  <el-row>\r\n                    <el-col>\r\n                      <!-- 3.0 在tag中角色的三级权限（tag未来生成span标签） -->\r\n                      <el-tag class=\"tagM\" @close=\"tagClose(item2.children,item3,scope.row.id)\" v-for=\"item3 in item2.children\" :key=\"item3.id\" type=\"warning\" closable>\r\n                        { { item3.authName } }\r\n                      </el-tag>\r\n                    </el-col>\r\n                  </el-row>\r\n                </el-col>\r\n              </el-row>\r\n            </el-col>\r\n          </el-row>\r\n          <el-row v-if=\"scope.row.children.length<=0\">\r\n            <template>还没有分配权限</template>\r\n          </el-row>\r\n        </template>\r\n      </el-table-column>\r\n      ...\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  ...\r\n	methods: {\r\n		...\r\n		// 关闭标签，删除指定角色指定权限\r\n		// 程序漏洞：在只删除上级权限时，其实没有在数据库层面关联删除其子集权限\r\n		tagClose (items, item, rid) {\r\n			// 本地删除权限，删除后自动渲染页面\r\n			items.splice(items.indexOf(item), 1)\r\n			// 本地删除后再更新服务器，请求删除角色权限接口delete：roles/:roleId/rights/:rightId\r\n			this.$http({\r\n				url: `roles/${rid}/rights/${item.id}`,\r\n				method: \'delete\'\r\n			}).then(res => {\r\n				var { meta } = res.data\r\n				if (meta.status === 200) {\r\n					this.$message({\r\n						message: meta.msg,\r\n						type: \'success\'\r\n					})\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n			})\r\n		}\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n\r\n```\r\n#### 给角色分配权限预览\r\n![VF3Z8R.png](https://t1.picb.cc/uploads/2019/04/03/VF3Z8R.png)\r\n#### 给角色分配权限代码 (Tree层级折叠)\r\nTree 树形控件 参考网址：http://element-cn.eleme.io/#/zh-CN/component/tree\r\nsrc/views/rights/roles.vue\r\n\r\n```\r\n<template>\r\n  <div>\r\n   ...\r\n    <!-- 表格 -->\r\n    <el-table v-loading=\"loading\" border :data=\"rolesList\" style=\"widht: 100%\">\r\n      ...\r\n      <el-table-column label=\"操作\">\r\n        <!-- 给模板绑定数据源scope -->\r\n        <template slot-scope=\"scope\">\r\n          ...\r\n          <el-button type=\"warning\" icon=\"el-icon-check\" @click=\"openSetRights(scope.row)\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 给角色分配权限面板 -->\r\n    <el-dialog title=\"设置权限\" :visible.sync=\"setRightsVisible\">\r\n      <!--\r\n        el-tree: 树形组件根元素\r\n          属性：\r\n            data: 用来设置当前组件的数据源\r\n            node-key: 每个树节点用来作为唯一标识的属性，整棵树应该是唯一的(通常是节点的id)\r\n            props: 用来设置当前 tree 组件的节点，是一个对象\r\n              lable：指定节点的标签（即节点显示的文字），其为节点对象的某个属性值\r\n              children：指定子树，其为节点对象的某个属性值\r\n            default-checked-keys: 默认勾选的节点的 key(通常是节点的id) 的数组\r\n          方法：\r\n            getCheckedKeys: 若节点可被选择（即 show-checkbox 为 true），则返回目前被选中的节点的 key 所组成的数组\r\n            halfCheckedKeys: 若节点可被选择（即 show-checkbox 为 true），则返回目前半选中的节点的 key 所组成的数组\r\n          事件：\r\n            node-click: 节点被点击时的回调\r\n       -->\r\n      <el-tree ref=\"tree\" show-checkbox default-expand-all :default-checked-keys=\'defaultCheckedKeys\' node-key=\'id\' :data=\"rightsTree\" :props=\"defaultProps\"></el-tree>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"setRightsVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"setRoleRights\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n	data () {\r\n		return {\r\n			...\r\n			rightsTree: [],\r\n			setRightsVisible: false,\r\n			defaultProps: {\r\n				label: \'authName\',\r\n				children: \'children\'\r\n			},\r\n			defaultCheckedKeys: [],\r\n			currentRoleId: \'\'\r\n		}\r\n	},\r\n	created () {\r\n		this.getRolesList()\r\n	},\r\n	methods: {\r\n		...\r\n		// 获取权限树tree，用于分配权限面板中使用\r\n    getRightsTree () {\r\n      this.$http({\r\n        url: \'rights/tree\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        let {data, meta} = res.data\r\n        if (meta.status === 200) {\r\n          this.rightsTree = data\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 打开分配权限面板,并初始化：默认勾选的权限\r\n    openSetRights (roleRow) {\r\n      this.defaultCheckedKeys = []\r\n      this.getRightsTree()\r\n      // 注意，只用添加三级权限即可，因为一级二级添加的话，会导致三级全选，而只选三级的话，一级二级会自动关联\r\n      roleRow.children.forEach(item1 => {\r\n        item1.children.forEach(item2 => {\r\n          item2.children.forEach(item3 => {\r\n            this.defaultCheckedKeys.push(item3.id)\r\n          })\r\n        })\r\n      })\r\n      this.currentRoleId = roleRow.id\r\n      // 打开分配权限的面板\r\n      this.setRightsVisible = true\r\n    },\r\n    // 给角色分配权限\r\n    setRoleRights (id) {\r\n      // 获取选中的节点的 key(权限节点id) 数组\r\n      var checkedKeys = this.$refs.tree.getCheckedKeys()\r\n      // 获取半选中的节点的 key(权限节点id) 数组\r\n      var halfCheckedKeys = this.$refs.tree.getHalfCheckedKeys()\r\n      // 全选中和半选中节点的 key(权限节点id) 合并成 权限id数组\r\n      var rightsArr = halfCheckedKeys.concat(checkedKeys).join(\',\')\r\n      this.$http({\r\n        url: \'roles/\' + this.currentRoleId + \'/rights\',\r\n        method: \'post\',\r\n        data: {\r\n          rids: rightsArr\r\n        }\r\n      }).then(res => {\r\n        var {meta} = res.data\r\n        if (meta.status === 200) {\r\n          // 需要重新获取角色列表（以便更新角色的默认权限）\r\n          this.getRolesList()\r\n          this.$message({\r\n            message: meta.msg,\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n      this.setRightsVisible = false\r\n    }\r\n	}\r\n}\r\n</script>\r\n\r\n```\r\n### 动态生成左侧菜单栏 asider.vue\r\nsrc/components/asider.vue\r\n```\r\n<template>\r\n  <el-row>\r\n    <!--\r\n      router: 是 Menu Attribute ，是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转\r\n      unique-opened: 是 Menu Attribute ，是否只保持一个子菜单的展开，默认 false\r\n      open/close: 是 Menu Methods\r\n     -->\r\n    <el-menu :router=\"menuOptions.router\" :unique-opened=\"menuOptions.uniqueOpened\">\r\n      <el-submenu class=\"position\" v-for=\"(item1, index) in menus\" :key=\"item1.id\" :index=\"index.toString()\">\r\n        <template slot=\"title\">\r\n          <i class=\"el-icon-location\"></i>\r\n          <span>{ { item1.authName } }</span>\r\n        </template>\r\n        <!-- 加\'/\',把inxex由相对路径，变成绝对路径 -->\r\n        <el-menu-item v-for=\"item2 in item1.children\" :key=\"item2.id\" :index=\"\'/\' + item2.path\">\r\n          <template>\r\n            <i class=\"el-icon-menu\"></i>\r\n            <span>{ { item2.authName } }</span>\r\n          </template>\r\n        </el-menu-item>\r\n      </el-submenu>\r\n    </el-menu>\r\n  </el-row>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      menuOptions: {\r\n        router: true,\r\n        uniqueOpened: true\r\n      },\r\n      menus: []\r\n    }\r\n  },\r\n  created () {\r\n    this.getMenus()\r\n  },\r\n  methods: {\r\n    getMenus () {\r\n      this.$http({\r\n        url: \'menus\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        var { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.menus = data\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.el-row {\r\n  height: 100%;\r\n}\r\n.el-row ul {\r\n  height: 100%;\r\n}\r\n.position {\r\n  text-align: left;\r\n}\r\n</style>\r\n\r\n```\r\n### 登录判断 （用导航守卫）\r\n导航守卫（路由守卫）参考网址：https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB\r\nsrc/router/index.js\r\n```\r\nimport Vue from \'vue\'\r\nimport Router from \'vue-router\'\r\nimport Login from \'@/views/login/login.vue\'\r\nimport Home from \'@/views/home.vue\'\r\nimport Index from \'@/views/index.vue\'\r\nimport Users from \'@/views/users/users.vue\'\r\nimport Rights from \'@/views/rights/rights.vue\'\r\nimport Roles from \'@/views/rights/roles.vue\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    // 登录路由 （/login 路由对应的组件会替换 App.vue 中的 <router-view />）\r\n    {\r\n      name: \'login\',\r\n      path: \'/login\',\r\n      component: Login\r\n    },\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        {\r\n          name: \'index\',\r\n          path: \'index\',\r\n          component: Index\r\n        },\r\n        // 用户列表路由\r\n        {\r\n          name: \'users\',\r\n          path: \'users\',\r\n          component: Users\r\n        },\r\n        // 权限列表路由\r\n        {\r\n          name: \'rights\',\r\n          path: \'rights\',\r\n          component: Rights\r\n        },\r\n        // 角色列表路由\r\n        {\r\n          name: \'roles\',\r\n          path: \'roles\',\r\n          component: Roles\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n\r\n// 使用导航守卫（路由守卫）作 登录判断\r\nrouter.beforeEach((to, from, next) => {\r\n  if (to.path !== \'/login\') {\r\n    // 如果要跳转的路由不是登录页\r\n    let token = window.localStorage.getItem(\'token\')\r\n    if (token) {\r\n      // 如果已登录，则放行\r\n      next()\r\n    } else {\r\n      // 如果未登录，则跳转到 登录页\r\n      // router.app就是Vue对象，可以打印看看\r\n      router.app.$message.error(\'对不起，您还没有登录！！！\')\r\n      setTimeout(function () {\r\n        router.push({\r\n          name: \'login\'\r\n        })\r\n      }, 1000)\r\n    }\r\n  } else {\r\n    // 如果跳转的登录页则直接放行\r\n    next()\r\n  }\r\n})\r\n\r\nexport default router\r\n\r\n```\r\n同时取消在 `src/views/home.vue` 中的`登录判断方法1`，如下：\r\n```\r\nexport default {\r\n	// 登录判断方法1：用生命周期钩子函数(只要是进入home路由，也就是根目录\'/\'，就需要登录判断，包括home的子路由,其实就是所有路由了)\r\n	// 登录判断方法2：在src/router/index.js 中用导航守卫（或路由守卫）实现登录判断功能\r\n	// beforeCreate () {\r\n	// 	var token = window.localStorage.getItem(\'token\')\r\n	// 	if (!token) {\r\n	// 		this.$message.error(\'对不起，您还没有登录！\')\r\n	// 		this.$router.push({ name: \'login\' })\r\n	// 	}\r\n	// },\r\n	// 注册组件\r\n	components: {\r\n		Header,\r\n		Asider\r\n	}\r\n}\r\n```',11,100,'2019-04-03 04:30:47','2019-04-06 05:28:41'),(303,'## 商品管理\r\n### 商品分类\r\n#### 商品分类路由\r\nsrc/router/index.js\r\n```\r\nimport Categories from \'@/views/goods/categories.vue\'\r\n...\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n	  	...\r\n        // 商品分类路由\r\n        {\r\n          name: \'categories\',\r\n          path: \'categories\',\r\n          component: Categories\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n...\r\n```\r\n#### 商品分类预览\r\n![VFXdRy.png](https://t1.picb.cc/uploads/2019/04/03/VFXdRy.png)\r\n#### 安装 element-tree-grid\r\n`element-tree-grid` 是一个基于vue和element的可以折叠的table表格，用于折叠显示层级信息很方便，比如商品分类数据\r\n其github的网址：https://github.com/foolishchow/element-tree-grid\r\n\r\n安装 element-tree-grid\r\n```\r\nyarn add element-tree-grid\r\n或\r\nnpm install element-tree-grid\r\n```\r\n在下面的代码中有使用 element-tree-grid\r\n#### 商品分类代码 (表格层级折叠显示)\r\n表格层级折叠显示效果：用 element-tree-grid 来实现\r\nsrc/views/categories/categories.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"商品管理\" level3=\"商品分类\" />\r\n    <!-- 添加分类 -->\r\n    <el-card>\r\n      <el-button type=\"success\" @click=\"openAddCat\" plain>添加分类</el-button>\r\n    </el-card>\r\n\r\n    <!-- 商品分类列表：需要安装element-tree-grid第三方插件 -->\r\n    <!--\r\n      :data：用来设置数据源（tree型结构的数据）\r\n      el-table-tree-column：表示能够展开的表格的标签\r\n        prop：（必选）用来控制当前行显示的属性（展示的文字）\r\n        label： （必选）表头展示的文字\r\n        treekey：（必选）设置当前行唯一标识，通常绑定此项的id（设置此key后，其子项目才能展开）\r\n        parentKey：（必选）用来设置当前项的父id，绑定此项的父id（设置此key后，其子项目才能折叠起来）\r\n        levelKey：（必选）设置当前项的级别，绑定此项在tree数据中的级别字段（设置此key后，父项展开子项才会有缩进）\r\n    -->\r\n    <!-- 给tabel绑定分页的数据，而不是总数据。因总数据太多了，得到总数据后，用客户端分页的方式来一页一页对总数据进行展示 -->\r\n    <el-table :data=\"pageDataList\" border>\r\n      <!-- 注意第一列用的是：el-table-tree-column -->\r\n      <el-table-tree-column file-icon=\"icon icon-file\" folder-icon=\"icon icon-folder\" treeKey=\"cat_id\" parentKey=\"cat_pid\" levelKey=\"cat_level\" prop=\"cat_name\" label=\"商品分类\" width=\"220\">\r\n			</el-table-tree-column>\r\n      <el-table-column label=\"级别\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span v-if=\"scope.row.cat_level === 0\">一级</span>\r\n          <span v-else-if=\"scope.row.cat_level === 1\">二级</span>\r\n          <span v-else-if=\"scope.row.cat_level === 2\">三级</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"是否有效\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          { { scope.row.cat_deleted === false ? \'有效\' : \'无效\'} }\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页组件：客户端分页(不必再请求服务器了) -->\r\n    <el-pagination @current-change=\"pageNumChange\" @size-change=\"pageSizeChange\" :current-page=\"pageNum\" :page-size=\"pageSize\" :page-sizes=\"pageSizes\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\">\r\n    </el-pagination>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入和注册：element-tree-grid\r\nimport ElTreeGrid from \'element-tree-grid\'\r\nimport Vue from \'vue\'\r\nVue.component(ElTreeGrid.name, ElTreeGrid)\r\nexport default {\r\n  data () {\r\n		return {\r\n			dataList: [], // 总的数据\r\n			pageDataList: [], // 客户端分页的数据（分页的数据）\r\n			pageNum: 1,\r\n			pageSize: 6,\r\n			pageSizes: [6, 12, 18, 24],\r\n      total: 0\r\n		}\r\n  },\r\n	methods: {\r\n		// 获取总数据\r\n		getDataList () {\r\n			this.$http({\r\n				url: \'categories\',\r\n				method: \'get\'\r\n			}).then(res => {\r\n				let { data, meta } = res.data\r\n				if (meta.status === 200) {\r\n					this.dataList = data\r\n					this.total = data.length\r\n					// 获取总数据后，计算一下分页数据\r\n					this.getPageDataList()\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n			})\r\n		},\r\n		// 获取分页数据\r\n		getPageDataList () {\r\n			var startIndex = (this.pageNum - 1) * this.pageSize\r\n			var endIndex = this.pageNum * this.pageSize - 1\r\n      // 截取总数据的一部分，作为分页数据\r\n      // slice()函数截取数组从 startIndex 到 endIndex 之前的元素，包括 startIndex，但不包括 endIndex\r\n			this.pageDataList = this.dataList.slice(startIndex, endIndex + 1)\r\n		},\r\n		// 页码改变事件\r\n		pageNumChange (val) {\r\n			this.pageNum = val\r\n			this.getPageDataList()\r\n		},\r\n		// 页容量改变事件\r\n		pageSizeChange (val) {\r\n			this.pageSize = val\r\n			this.pageNum = 1 // 页容量改变时，要重新初始化页码，以防止页码超出范围\r\n			this.getPageDataList()\r\n		}\r\n	},\r\n	created () {\r\n		this.getDataList()\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n##### 商品分类所需的数据结构\r\n```\r\ndata: [\r\n  {\r\n    cat_deleted: false,\r\n    cat_id: 1,\r\n    cat_level: 0,\r\n    cat_name: \"大家电\",\r\n    cat_pid: 0,\r\n    children: [\r\n      {\r\n        cat_deleted: false,\r\n        cat_id: 3,\r\n        cat_level: 1,\r\n        cat_name: \"电视\",\r\n        cat_pid: 1,\r\n        children: [\r\n          {\r\n            cat_deleted: false,\r\n            cat_id: 6,\r\n            cat_level: 2,\r\n            cat_name: \"曲面电视\",\r\n            cat_pid: 3\r\n          },\r\n          {\r\n            cat_deleted: false,\r\n            cat_id: 8,\r\n            cat_level: 2,\r\n            cat_name: \"夏普\",\r\n            cat_pid: 3\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        cat_deleted: false,\r\n        cat_id: 4,\r\n        cat_level: 1,\r\n        cat_name: \"空调\",\r\n        cat_pid: 1,\r\n        children: [...]\r\n      }\r\n    ]\r\n  },{\r\n    cat_deleted: false,\r\n    cat_id: 52,\r\n    cat_level: 0,\r\n    cat_name: \"热门推荐\",\r\n    cat_pid: 0,\r\n    children: [...]\r\n  }\r\n]\r\n```\r\n#### 新增分类预览\r\n![VFRjrD.png](https://t1.picb.cc/uploads/2019/04/04/VFRjrD.png)\r\n#### 新增分类代码 (级联框)\r\nCascader 级联选择器 参考网址：http://element-cn.eleme.io/#/zh-CN/component/cascader\r\nscr/views/categories/categories.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 添加分类 -->\r\n    <el-card>\r\n      <el-button type=\"success\" @click=\"openAddCat\" plain>添加分类</el-button>\r\n    </el-card>\r\n\r\n    <!-- 商品分类列表：需要安装element-tree-grid第三方插件 -->\r\n    ...\r\n\r\n    <!-- 分页组件：客户端分页(不必再请求服务器了) -->\r\n    ...\r\n\r\n    <!-- 新增分类面板 -->\r\n    <el-dialog title=\"添加分类\" :visible.sync=\"dialogFormVisible\">\r\n      <el-form :model=\"form\">\r\n        <el-form-item label=\"分类名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form.name\" auto-complete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <!--\r\n          el-cascader：级联组件根元素\r\n            属性：\r\n              options：tree型数据源\r\n              v-model：双向绑定级联框选中的值，可能的值的形式如：[]、[1]、[1,2]\r\n              clearable：可以清空选中的数据\r\n              change-on-select：bool值，为 true 时表示 可以选中任意一级选项（如: 可选一级分类，也可以选二级分类）\r\n              props：绑定一个对象，设置数据源属性与组件属性的对应关系，如{label: \'name\', value: \'id\'}\r\n            事件：\r\n              change：选项改变的事件\r\n        -->\r\n        <el-form-item label=\"选择父类\" :label-width=\"formLabelWidth\">\r\n          { { selectedValues } }\r\n          <el-cascader placeholder=\"若不选择，则默认是一级分类\" :change-on-select=\"true\" clearable :props=\"propsObj\" :options=\"options\" v-model=\"selectedValues\">\r\n          </el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCat\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入和注册：element-tree-grid\r\n...\r\nexport default {\r\n  data () {\r\n		return {\r\n			...\r\n      		// 以下是新增分类面板所需的数据\r\n      		dialogFormVisible: false,\r\n			formLabelWidth: \'80px\',\r\n			form: { // 新增分类表单的值，name 双向绑定给分类名称\r\n				name: \'\'\r\n			},\r\n			options: [], // 用于级联框的 tree 型数据源\r\n			propsObj: { // 用于级联框，设置数据源属性与组件属性的【对应关系】\r\n				label: \'cat_name\', // 级联框上显示的文字\r\n				value: \'cat_id\', // 选中后，级联框对应的值\r\n				children: \'children\' // 级联框的子项\r\n			},\r\n			selectedValues: [] // 双向绑定级联框选中的值，可能的值的形式如：[]、[1]、[1,2]\r\n		}\r\n  },\r\n	methods: {\r\n		...\r\n    	// 打开“新增分类”面板\r\n		openAddCat () {\r\n			this.dialogFormVisible = true\r\n			this.getOptions()\r\n		},\r\n    	// 获取级联框商品分类数据（获取2级分类即可）\r\n		getOptions () {\r\n			this.$http({\r\n				url: \'categories\',\r\n				method: \'get\',\r\n				params: {\r\n					type: \'2\'\r\n				}\r\n			}).then(res => {\r\n				let { data, meta } = res.data\r\n				if (meta.status === 200) {\r\n					this.options = data\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n			})\r\n		},\r\n		// 新增分类\r\n		addCat () {\r\n      		// 父id，取数组最后一个；若数组为空（即没有选择父级分类），则默认为一级分类，则取0\r\n      		// selectedOptions 可能的值为：\r\n     		 //   []：空数组，没有选择父级分类，表示新增一级分类\r\n      		//   [1]：选中了一级分类，表示新增二级分类\r\n      		//   [1,2]：选择了一级分类和二级分类，其父级取二级分类，表示新增三级分类\r\n			var pid = this.selectedValues.length > 0 ? this.selectedValues[this.selectedValues.length - 1] : 0\r\n			var level = this.selectedValues.length\r\n			this.$http({\r\n				url: \'categories\',\r\n				method: \'post\',\r\n				data: {\r\n					cat_pid: pid,\r\n					cat_name: this.form.name,\r\n					cat_level: level\r\n				}\r\n			}).then(res => {\r\n				let { meta } = res.data\r\n				if (meta.status === 201) {\r\n					this.$message({\r\n						message: meta.msg,\r\n						type: \'success\'\r\n					})\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n				this.dialogFormVisible = false\r\n       			 this.form.name = \'\'\r\n       			 this.getDataList()\r\n      		})\r\n   		 }\r\n	},\r\n	created () {\r\n		this.getDataList()\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n### 商品列表\r\n#### 商品列表路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport Goods from \'@/views/goods/goods.vue\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n	  	...\r\n        // 商品分类列表路由\r\n        {\r\n          name: \'categories\',\r\n          path: \'categories\',\r\n          component: Categories\r\n        },\r\n        // 商品列表路由\r\n        {\r\n          name: \'goods\',\r\n          path: \'goods\',\r\n          component: Goods\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n\r\n// 使用导航守卫（路由守卫）作 登录判断\r\n...\r\n\r\nexport default router\r\n\r\n```\r\n#### 使用 moment 格式化时间\r\n在商品列表中需要格式化时间，所以在商品列表之前，先准备好时间格式化工具：moment\r\n安装 moment\r\n```\r\nyarn add moment\r\n或\r\nnpm i moment\r\n```\r\n在 src/main.js 中全局注册 moment ，并配合【全局过滤器】一起使用\r\n```\r\n// 引入moment\r\nimport moment from \'moment\'\r\n...\r\n// 注册全局过滤器(时间格式化)\r\nVue.filter(\'myTime\', function (time) {\r\n  return moment(time).format(\'YYYY-MM-DD hh:mm:ss\') // 使用 moment 格式化时间\r\n})\r\n```\r\n使用 全局过滤器（时间格式化）\r\n```\r\n<!-- scope.row.add_time 是时间戳格式 -->\r\n<el-table-column label=\"创建时间\" width=\"180\">\r\n	<template slot-scope=\"scope\">\r\n		{ { scope.row.add_time | myTime } }\r\n	</template>\r\n</el-table-column>\r\n````\r\n#### 商品列表预览\r\n![VFxA98.png](https://t1.picb.cc/uploads/2019/04/04/VFxA98.png)\r\n#### 商品列表代码 (格式化时间和人民币)\r\n知识点：用全局过滤器 格式化时间和人民币\r\nsrc/views/goods/goods.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"商品管理\" level3=\"商品列表\" />\r\n    <!-- 搜索与新增 -->\r\n    <el-row id=\"search\">\r\n      <el-col :span=\"6\">\r\n        <el-input placeholder=\"请输入内容\" class=\"input-with-select\">\r\n          <el-button slot=\"append\" icon=\"el-icon-search\"></el-button>\r\n        </el-input>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n          \r\n        <el-button type=\"success\" plain>新增商品</el-button>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 用户列表 -->\r\n    <el-table v-loading=\"loading\" :data=\"tableData\" border style=\"widht: 100%\">\r\n      <el-table-column type=\"index\" width=\"50\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"goods_name\" label=\"商品名称\" width=\"500\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"goods_price\" label=\"商品价格\" width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          { { scope.row.goods_price | myRMB } }\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"goods_weight\" label=\"商品重量\" width=\"100\">\r\n      </el-table-column>\r\n      <el-table-column label=\"创建时间\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          { { scope.row.add_time | myTime } }\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" plain></el-button>\r\n          <el-button type=\"warning\" icon=\"el-icon-delete\" size=\"mini\" plain></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <!-- 分页组件 -->\r\n    <el-pagination\r\n      @size-change=\"sizeChange\"\r\n      @current-change=\"currentChange\"\r\n      :current-page=\"pagenum\"\r\n      :page-sizes=\"pagesizes\"\r\n      :page-size=\"pagesize\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"total\">\r\n    </el-pagination>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n	data () {\r\n		return {\r\n			loading: false,\r\n			tableData: [],\r\n			query: \'\',\r\n			pagenum: 1,\r\n      		pagesize: 6,\r\n     		 pagesizes: [6, 10, 20, 30, 40],\r\n      		total: 0\r\n		}\r\n	},\r\n	methods: {\r\n    	// 获取商品列表数据\r\n		getTableData () {\r\n			this.$http({\r\n				url: \'goods\',\r\n				method: \'get\',\r\n				params: {\r\n					query: this.query,\r\n					pagenum: this.pagenum,\r\n					pagesize: this.pagesize\r\n				}\r\n			}).then(res => {\r\n				let { data, meta } = res.data\r\n				if (meta.status === 200) {\r\n          			this.tableData = data.goods\r\n         			 this.total = data.total\r\n				} else {\r\n					this.$message.error(meta.msg)\r\n				}\r\n			})\r\n    	},\r\n		// 页容量改变事件\r\n		sizeChange (val) {\r\n		  this.pagesize = val\r\n		  // 重新初始化页码（页码可能变少），防止页码超出范围\r\n		  this.pagenum = 1\r\n		  this.getTableData()\r\n		},\r\n		// 页码改变事件\r\n		currentChange (val) {\r\n		  this.pagenum = val\r\n		  this.getTableData()\r\n		}\r\n	},\r\n	created () {\r\n		this.getTableData()\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```\r\n在 src/main.js 中注册【全局过滤器（格式化人民币）】\r\n```\r\n// 注册q全局过滤器(人民币格式化)\r\nVue.filter(\'myRMB\', function (rmb) {\r\n  return rmb.toFixed(2) + \' ¥\'\r\n})\r\n```\r\n### 新增商品\r\n#### 新增商品路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport GoodsAdd from \'@/views/goods/goodsAdd.vue\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n	  	...\r\n        // 新增商品路由\r\n        {\r\n          name: \'goodsAdd\',\r\n          path: \'goods/add\',\r\n          component: GoodsAdd\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n...\r\n\r\nexport default router\r\n```\r\n给商品列表 src/views/goods/goods.vue 中的“新增商品”按钮添加 `点击事件(跳转至新增商品页面)`\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 搜索与新增 -->\r\n    <el-row id=\"search\">\r\n      <el-col :span=\"6\">\r\n        ...\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n          \r\n        <el-button type=\"success\" @click=\"$router.push({name: \'goodsAdd\'})\" plain>新增商品</el-button>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n```\r\n#### 新增商品概况预览\r\n![VFdXms.png](https://t1.picb.cc/uploads/2019/04/04/VFdXms.png)\r\n#### 新增商品概况代码 (步骤条 tab标签页)\r\nSteps 步骤条 参考网址：http://element-cn.eleme.io/#/zh-CN/component/steps\r\nTabs 标签页 参考网址：http://element-cn.eleme.io/#/zh-CN/component/tabs\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"商品管理\" level3=\"新增商品\" />\r\n    <!-- 提示文本 -->\r\n    <el-alert class=\"alertM\" type=\"info\" title=\"新增商品信息\" center show-icon></el-alert>\r\n    <!-- 步骤条 -->\r\n    <el-steps :active=\"active\" align-center class=\"stepsM\" finish-status=\"success\">\r\n      <el-step title=\"基本信息\"></el-step>\r\n      <el-step title=\"商品参数\"></el-step>\r\n      <el-step title=\"商品属性\"></el-step>\r\n      <el-step title=\"商品图片\"></el-step>\r\n      <el-step title=\"商品内容\"></el-step>\r\n    </el-steps>\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      <!-- pane1 基本信息 -->\r\n      <el-tab-pane label=\"基本信息\">\r\n        基本信息区域\r\n      </el-tab-pane>\r\n      <!-- pane2 商品参数 显示在“基本信息”中选择的“商品分类”所对应的“动态参数” -->\r\n      <el-tab-pane label=\"商品参数\">\r\n        商品参数区域\r\n      </el-tab-pane>\r\n      <!-- pane3 商品属性 显示在“基本信息”中选择的“商品分类”所对应的“静态参数” -->\r\n      <el-tab-pane label=\"商品属性\">\r\n        商品属性区域\r\n      </el-tab-pane>\r\n      <!-- pane4 商品图片 上传商品图片 -->\r\n      <el-tab-pane label=\"商品图片\">\r\n        商品图片区域\r\n      </el-tab-pane>\r\n      <!-- pane5 商品内容 编辑商品介绍，用富文本框 -->\r\n      <el-tab-pane label=\"商品内容\">\r\n        商品内容区域\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      active: 1\r\n    }\r\n  },\r\n  methods: {\r\n    // tab 点击事件\r\n    tabClick (e) {\r\n      // 设置 tab 与步骤条一致\r\n      this.active = Number(e.index) + 1\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.alertM {\r\n	margin-top: 10px;\r\n}\r\n.stepsM {\r\n	margin: 20px 0;\r\n}\r\n.el-step__title {\r\n	font-size: 12px;\r\n}\r\n</style>\r\n\r\n```\r\n#### 第一步基本信息预览\r\n![VFobvu.png](https://t1.picb.cc/uploads/2019/04/04/VFobvu.png)\r\n#### 第一步基本信息代码 (级联框)\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      <!-- pane1 基本信息 -->\r\n      <el-tab-pane label=\"基本信息\">\r\n        <el-form label-position=\"top\" label-width=\"80px\" :model=\"formObj\">\r\n          <el-form-item label=\"商品名称\">\r\n            <el-input v-model=\"formObj.goods_name\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"商品价格\">\r\n            <el-input v-model=\"formObj.goods_price\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"商品重量\">\r\n            <el-input v-model=\"formObj.goods_weight\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"商品数量\">\r\n            <el-input v-model=\"formObj.goods_number\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"商品分类\">\r\n            <!-- 商品分类【级联框】 -->\r\n            <el-cascader expand-trigger=\"hover\" :options=\"options\" :props=\"propsObj\" v-model=\"selectedValues\">\r\n            </el-cascader>\r\n          </el-form-item>\r\n        </el-form>\r\n        <el-row><br/><br/></el-row>\r\n      </el-tab-pane>\r\n      ...\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      active: 1, // 步骤条处在第几步\r\n      formObj: { // 新增商品所需的表单数据\r\n        goods_name: \'\',\r\n        goods_price: \'\',\r\n        goods_weight: \'\',\r\n        goods_number: \'\',\r\n        goods_cat: \'\',\r\n        attrs: [],\r\n        pics: [],\r\n        goods_introduce: \'\'\r\n      },\r\n      // 级联框数据\r\n      options: [], // 用于级联框的 tree 型数据源\r\n      propsObj: { // 用于级联框，设置数据源属性与组件属性的【对应关系】\r\n        label: \'cat_name\', // 级联框上显示的文字\r\n        value: \'cat_id\', // 选中后，级联框对应的值\r\n        children: \'children\' // 级联框的子项\r\n      },\r\n      selectedValues: [] // 用于级联框，双向绑定级联框选中的值，可能的值的形式如：[]、[1]、[1,2]、[1,2,3]\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据 用作 级联框 的数据源\r\n    getOptions () {\r\n      this.$http({\r\n        url: \'categories\',\r\n        method: \'get\',\r\n        params: {\r\n          tpye: 3\r\n        }\r\n      }).then(res => {\r\n        let { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.options = data\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    ...\r\n  },\r\n  created () {\r\n    this.getOptions()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n```\r\n#### 第二步商品参数预览\r\n![VPZq1i.png](https://t1.picb.cc/uploads/2019/04/05/VPZq1i.png)\r\n#### 第二步商品参数代码\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      ...\r\n      <!-- pane2 商品参数 显示在“基本信息”中选择的“商品分类”所对应的“动态参数” -->\r\n      <el-tab-pane label=\"商品参数\">\r\n        <div v-for=\"item in dynamicParams\" :key=\"item.attr_id\">\r\n          <p v-if=\"item.attr_vals_arr_forRender.length !== 0\">{ { item.attr_name } }</p>\r\n          <!-- 使用了两个相同的数组 arr 和 arr_forRender 是为了区分，避免 group 模型选中项 和 checkbox 循环渲染相冲突 -->\r\n          <!-- 如果用同一个数组 arr 的话，checkbox 取消选中一项时，就会影响 arr 的值，arr 又反过来影响 checkbox，导致选择的项消失了 -->\r\n          <el-checkbox-group v-model=\"item.attr_vals_arr\" v-if=\"item.attr_vals_arr_forRender.length !== 0\">\r\n            <el-checkbox v-for=\"(item1, index) in item.attr_vals_arr_forRender\" :key=\"index\" :label=\"item1\" border></el-checkbox>\r\n          </el-checkbox-group>\r\n        </div>\r\n      </el-tab-pane>\r\n      ...\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      // 商品分类的 动态参数\r\n      dynamicParams: []\r\n    }\r\n  },\r\n  methods: {\r\n    ...\r\n    // tab 点击事件\r\n    tabClick (e) {\r\n      ...\r\n      // 如果点击的是“商品参数”，请求动态参数\r\n      if (e.index === \'1\') {\r\n        if (this.selectedValues.length > 0) {\r\n          this.$http({\r\n            url: `categories/${this.selectedValues[this.selectedValues.length - 1]}/attributes`,\r\n            method: \'get\',\r\n            params: {\r\n              sel: \'many\'\r\n            }\r\n          }).then(res => {\r\n            let { data, meta } = res.data\r\n            if (meta.status === 200) {\r\n              // 遍历动态参数，将动态参数的值由字符串 attr_vals(\"big,nice\") 生成一个数组 attr_vals_arr([\"big\",\"nice\"])\r\n              for (var i = 0; i < data.length; i++) {\r\n                if (data[i].attr_vals.length !== 0) {\r\n                  data[i].attr_vals_arr = data[i].attr_vals.split(\',\')\r\n                  data[i].attr_vals_arr_forRender = data[i].attr_vals_arr\r\n                }\r\n              }\r\n              this.dynamicParams = data\r\n            } else {\r\n              this.$message.error(meta.msg)\r\n            }\r\n          })\r\n        } else {\r\n          this.$message.error(\'请先选择分类\')\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ...\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n\r\n```\r\n请求到的动态参数原始的数据结构如下：\r\n```\r\ndata: [\r\n	{\r\n		attr_id: 3077,\r\n		attr_name: \"版式2\",\r\n		attr_sel: \"many\",\r\n		attr_vals: \"asfd,asdf\",\r\n		attr_write: \"list\",\r\n		cat_id: 6,\r\n		delete_time: null,\r\n	},{\r\n		attr_id: 3079,\r\n		attr_name: \"版式3\",\r\n		attr_sel: \"many\",\r\n		attr_vals: \"1244,xxxx\",\r\n		attr_write: \"list\",\r\n		cat_id: 6,\r\n		delete_time: null,\r\n	}\r\n]\r\n```\r\n#### 第三步商品属性预览\r\n![VPrh7g.png](https://t1.picb.cc/uploads/2019/04/05/VPrh7g.png)\r\n#### 第三步商品属性代码\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      ...\r\n      <!-- pane3 商品属性 显示在“基本信息”中选择的“商品分类”所对应的“静态参数” -->\r\n      <el-tab-pane label=\"商品属性\">\r\n        <el-form label-position=\"top\" label-width=\"80px\">\r\n          <el-form-item :label=\"item.attr_name\" v-for=\"item in staticParams\" :key=\"item.attr_id\">\r\n            <el-input v-model=\"item.attr_vals\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-tab-pane>\r\n      ...\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      // 商品分类的 静态参数\r\n      staticParams: []\r\n    }\r\n  },\r\n  methods: {\r\n    ...\r\n    // tab 点击事件\r\n    tabClick (e) {\r\n      ...\r\n      // 如果点击的是“商品属性”，请求 静态参数(商品属性)\r\n      if (e.index === \'2\') {\r\n        if (this.selectedValues.length > 0) {\r\n          this.$http({\r\n            url: `categories/${this.selectedValues[this.selectedValues.length - 1]}/attributes`,\r\n            method: \'get\',\r\n            params: {\r\n              sel: \'only\'\r\n            }\r\n          }).then(res => {\r\n            let { data, meta } = res.data\r\n            if (meta.status === 200) {\r\n              this.staticParams = data\r\n              // console.log(this.staticParams)\r\n            } else {\r\n              this.$message.error(meta.msg)\r\n            }\r\n          })\r\n        } else {\r\n          this.$message.error(\'前选择分类\')\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    this.getOptions()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n\r\n```\r\n请求到的【静态参数】原始的数据结构如下：\r\n```\r\ndata: [\r\n	{\r\n		attr_id: 3068,\r\n		attr_name: \"主体-商品名称\",\r\n		attr_sel: \"only\",\r\n		attr_vals: \"TCL电视 55A950C\",\r\n		attr_write: \"manual\",\r\n		cat_id: 6,\r\n		delete_time: null\r\n	},\r\n	{\r\n		attr_id: 3069,\r\n		attr_name: \"显示-曲面\",\r\n		attr_sel: \"only\",\r\n		attr_vals: \"是\",\r\n		attr_write: \"manual\",\r\n		cat_id: 6,\r\n		delete_time: null,\r\n	}\r\n]\r\n```\r\n#### 第四步上传图片预览\r\n![VP528D.png](https://t1.picb.cc/uploads/2019/04/05/VP528D.png)\r\n#### 第四步上传图片代码 (upload)\r\nUpload 上传组件 参考网址：http://element-cn.eleme.io/#/zh-CN/component/upload\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      ...\r\n      <!-- pane4 商品图片 上传商品图片 -->\r\n      <el-tab-pane label=\"商品图片\">\r\n        <el-upload class=\"upload-demo\" :headers=\"headerObj\" action=\"http://192.168.10.10:8888/api/private/v1/upload\" :on-success=\"uploadSuccess\" :on-preview=\"preview\" :on-remove=\"remove\" list-type=\"picture\">\r\n          <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n        </el-upload>\r\n      </el-tab-pane>\r\n      ...\r\n    </el-tabs>\r\n    <!-- 图片预览对话框 -->\r\n      <el-dialog title=\"图片预览\" :visible=\"dialogImgVisible\" width=\"50%\">\r\n        <img ref=\"img\">\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"dialogImgVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"dialogImgVisible = false\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      formObj: { // 新增商品所需的表单数据\r\n        goods_name: \'\',\r\n        goods_price: \'\',\r\n        goods_weight: \'\',\r\n        goods_number: \'\',\r\n        goods_cat: \'\',\r\n        attrs: [],\r\n        pics: [],\r\n        goods_introduce: \'\'\r\n      },\r\n      ...\r\n      // 图片上传 所需的数据\r\n      headerObj: { // 图片上传 form 表单的 aciton 请求图片上传 api 时，需要授权 header\r\n        Authorization: window.localStorage.getItem(\'token\')\r\n      },\r\n      dialogImgVisible: false\r\n    }\r\n  },\r\n  methods: {\r\n    ...\r\n    // 上传图片成功\r\n    uploadSuccess (res, file, fileList) {\r\n      let { data, meta } = res\r\n      if (meta.status === 200) {\r\n        // 上传成功，存储文件名如：tmp_uplaods/xxxxx.jpg 到foromObj对象中，用作将来生成商品的图片\r\n        this.formObj.pics.push({\r\n          pic: data.tmp_path\r\n        })\r\n      } else {\r\n        this.$message.error(meta.msg)\r\n      }\r\n    },\r\n    // 图片预览：点击已上传图片列表时触发，file是添加的图片对象\r\n    preview (file) {\r\n      this.dialogImgVisible = true\r\n      // 动态设置图片预览对话框中的img的src属性\r\n      // 特别注意：第一次点击时，加载对话框了、子元素img加载、打印、set属性同时进行，所以出现bug:\"Cannot set property \'src\' of undefined\"，第二次点击时，img已经加载好了，就没问题\r\n      /* 具体原因：是element-ui的问题，dialog在未打开和打开状态是使用v-if来判断,当未打开的时候,值为false,都知道v-if如果是false的话,他就不会渲染出来,\r\n          你这时候使用jquery去查找dom时肯定找不到,但是为什么在打开状态下也找不到呢?这个问题在于初始化那个函数的时候,element-ui有个渐现的效果,\r\n          里面的dom并不是一下子就有的,而是会有延迟,这个时候你获取dom肯定获取不到,我目前的解决办法是加一个setTimeout,改变执行顺序,这时候就能获取到了,\r\n		  【最新发现】vue 提供了绝交方法：$nextTick\r\n      */\r\n      // console.log(this.$refs.img) // undefined\r\n      // this.$refs.img.src = file.response.data.url // 报错：Cannot set property \'src\' of undefined\r\n      setTimeout(() => {\r\n        // console.log(this.$refs.img); // 不报错： <img src=\"http://......234.png\" />\r\n        this.$refs.img.src = \'http://home.test:8888/\' + file.response.data.tmp_path\r\n      }, 0)\r\n    },\r\n    // 移除图片时触发，file是移除的图片对象\r\n    remove (file) {\r\n      var index = this.formObj.pics.findIndex(item => {\r\n        return item.pic === file.response.data.tmp_path\r\n      })\r\n      this.formObj.pics.splice(index, 1) // 移除一个元素\r\n    }\r\n  },\r\n  created () {\r\n    this.getOptions()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n```\r\n##### dialog(v-if)获取不到dom的解决方法\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- 图片预览对话框 -->\r\n      <el-dialog title=\"图片预览\" :visible=\"dialogImgVisible\" width=\"50%\">\r\n        <img ref=\"img\">\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"dialogImgVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"dialogImgVisible = false\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  ...\r\n  methods: {\r\n    ...\r\n    // 图片预览：点击已上传图片列表时触发，file是添加的图片对象\r\n    preview (file) {\r\n      this.dialogImgVisible = true\r\n      // 动态设置图片预览对话框中的img的src属性\r\n      // 特别注意：第一次点击时，加载对话框了、子元素img加载、打印、set属性同时进行，所以出现bug:\"Cannot set property \'src\' of undefined\"，第二次点击时，img已经加载好了，就没问题\r\n      /* 具体原因：是element-ui的问题，dialog在未打开和打开状态是使用v-if来判断,当未打开的时候,值为false,都知道v-if如果是false的话,他就不会渲染出来,\r\n          你这时候使用jquery去查找dom时肯定找不到,但是为什么在打开状态下也找不到呢?这个问题在于初始化那个函数的时候,element-ui有个渐现的效果,\r\n          里面的dom并不是一下子就有的,而是会有延迟,这个时候你获取dom肯定获取不到,我目前的解决办法是加一个setTimeout,改变执行顺序,这时候就能获取到了,\r\n		  【最新发现】vue 提供了绝交方法：$nextTick\r\n      */\r\n      // console.log(this.$refs.img) // undefined\r\n      // this.$refs.img.src = file.response.data.url // 报错：Cannot set property \'src\' of undefined\r\n      setTimeout(() => {\r\n        // console.log(this.$refs.img); // 不报错： <img src=\"http://......234.png\" />\r\n        this.$refs.img.src = \'http://home.test:8888/\' + file.response.data.tmp_path\r\n      }, 0)\r\n    },\r\n    ...\r\n  },\r\n  ...\r\n}\r\n</script>\r\n```\r\n#### 使用 vue-quill-editor 富文本编辑器\r\nvue-quill-editor github网址：https://github.com/surmon-china/vue-quill-editor\r\n安装 vue-quill-editor\r\n```\r\nyarn add vue-quill-editor\r\n或\r\nnpm i vue-quill-editor\r\n```\r\nvue-quill-editor 的使用，详见“第五步商品内容代码 (vue-quill-editor)” 章节\r\n#### 第五步商品内容预览\r\n![VP5c4c.png](https://t1.picb.cc/uploads/2019/04/05/VP5c4c.png)\r\n#### 第五步商品内容代码 (富文本编辑)\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      ...\r\n      <!-- pane5 商品内容 编辑商品介绍，用富文本框 -->\r\n      <el-tab-pane label=\"商品内容\">\r\n        <!-- 使用 vue-quill-editor 富文本编辑框 -->\r\n        <quillEditor v-model=\"formObj.goods_introduce\" />\r\n        <!-- 新增商品按钮 -->\r\n        <br/>\r\n        <el-button type=\"primary\" @click=\"addGood\">新增商品</el-button>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入vue-quill-editor富文本编辑框\r\nimport \'quill/dist/quill.core.css\'\r\nimport \'quill/dist/quill.snow.css\'\r\nimport \'quill/dist/quill.bubble.css\'\r\nimport { quillEditor } from \'vue-quill-editor\'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      formObj: { // 新增商品所需的表单数据\r\n        goods_name: \'\',\r\n        goods_price: \'\',\r\n        goods_weight: \'\',\r\n        goods_number: \'\',\r\n        goods_cat: \'\',\r\n        attrs: [],\r\n        pics: [],\r\n        goods_introduce: \'\'\r\n      },\r\n      ...\r\n    }\r\n  },\r\n  methods: {\r\n    ...\r\n  },\r\n  created () {\r\n    ...\r\n  },\r\n  // 注册vue-quill-editor富文本编辑框\r\n  components: {\r\n    quillEditor\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n.ql-editor {\r\n	height: 350px;\r\n}\r\n</style>\r\n\r\n```\r\n#### 最后一步提交数据新增商品代码\r\nsrc/views/goods/goodsAdd.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab标签页 -->\r\n    <el-tabs tab-position=\"left\" @tab-click=\"tabClick\">\r\n      ...\r\n      <!-- pane5 商品内容 编辑商品介绍，用富文本框 -->\r\n      <el-tab-pane label=\"商品内容\">\r\n        ...\r\n        <!-- 新增商品按钮 -->\r\n        <br/>\r\n        <el-button type=\"primary\" @click=\"addGood\">新增商品</el-button>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n    ...\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n...\r\n\r\nexport default {\r\n  ...\r\n  methods: {\r\n    ...\r\n    // 新增商品：将所有数据提交到服务器\r\n    addGood () {\r\n      // 需要提交的数据：good_name、goods_cat、goods_price、goods_number、goods_weight、goods_introduce、pics、attrs\r\n      this.formObj.goods_cat = this.selectedValues.join(\',\')\r\n      // 拼接attrs\r\n      var newDynamicParams = []\r\n      for (var i = 0; i < this.dynamicParams.length; i++) {\r\n        newDynamicParams.push({\r\n          attr_id: this.dynamicParams[i].attr_id,\r\n          attr_value: this.dynamicParams[i].attr_vals_arr.length > 0 ? this.dynamicParams[i].attr_vals_arr.join(\',\') : \'\'\r\n        })\r\n      }\r\n      var newStaticParams = []\r\n      for (var j = 0; j < this.staticParams.length; j++) {\r\n        newStaticParams.push({\r\n          attr_id: this.staticParams[j].attr_id,\r\n          attr_value: this.staticParams[j].attr_vals\r\n        })\r\n      }\r\n      this.formObj.attrs = newStaticParams.concat(newDynamicParams)\r\n      // 数据都准备好了，开始提交\r\n      this.$http({\r\n        url: \'goods\',\r\n        method: \'post\',\r\n        data: this.formObj\r\n      }).then(res => {\r\n        if (res.data.meta.status === 201) {\r\n          this.$message({\r\n            message: res.data.meta.msg,\r\n            type: \'success\'\r\n          })\r\n          this.$router.push({name: \'goods\'})\r\n        } else {\r\n          this.$message.error(res.data.meta.msg)\r\n        }\r\n      })\r\n    }\r\n  },\r\n  ...\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n</style>\r\n```\r\n服务器 bug 注意\r\n```\r\n当新增商品有图片时，有可能会导致服务器崩溃，原因是从github下载服务器（api-server）代码时，服务器缺少2个放图片的目录，补上即可。\r\n在服务器根目录创建2个文件夹：\r\nmkdir uploads\r\nmkdir uplaads/goodspics\r\n```\r\n### 分类参数\r\n#### 分类参数路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport Params from \'@/views/goods/params\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        ...\r\n        // 商品参数路由\r\n        {\r\n          name: \'params\',\r\n          path: \'params\',\r\n          component: Params\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n...\r\nexport default router\r\n```\r\n#### 分类参数概况预览\r\n![VPMKpv.png](https://t1.picb.cc/uploads/2019/04/05/VPMKpv.png)\r\n#### 分类参数概况代码\r\nsrc/views/goods/params.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"商品管理\" level3=\"分类参数\" />\r\n    <!-- 警告提示框 -->\r\n    <el-alert class=\"alertM\" title=\"注意：只允许为第三级分类设置相关参数\" type=\"warning\" :closable=\"false\" show-icon></el-alert>\r\n    <!-- 商品分类级联框 -->\r\n    <el-cascader class=\"cascaderM\" expand-trigger=\"hover\" :options=\"options\" :props=\"propsObj\" v-model=\"seletedValues\" @change=\"change\" clearable ></el-cascader>\r\n    <!-- tab -->\r\n    <el-tabs class=\"tabsM\" v-model=\"active\">\r\n      <!-- 动态参数 -->\r\n      <el-tab-pane label=\"动态参数\" name=\"many\" ref=\"btn\">\r\n        <el-button type=\"primary\" :disabled=\"disabled\">添加动态参数</el-button>\r\n      </el-tab-pane>\r\n      <!-- 静态属性（静态参数） -->\r\n      <el-tab-pane label=\"静态属性\" name=\"only\">\r\n        <el-button type=\"primary\" :disabled=\"disabled\">添加静态属性</el-button>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      options: [],\r\n      seletedValues: [],\r\n      propsObj: {\r\n        label: \'cat_name\',\r\n        value: \'cat_id\',\r\n        children: \'children\'\r\n      },\r\n      active: \'many\', // 定义 tab 活跃的项\r\n      disabled: true\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据 用于级联框\r\n    getOptions () {\r\n      this.$http({\r\n        url: \'categories\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        let { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.options = data\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 商品分类级联框改变事件\r\n    change () {\r\n      if (this.seletedValues.length === 3) {\r\n        // 当选中了第三级商品分类时，就激活“添加动态参数”和“添加静态属性”的按钮\r\n        this.disabled = false\r\n      } else {\r\n        // 若还没有选中第三级商品分类时，使“添加动态参数”和“添加静态属性”的按钮保持禁用\r\n        this.disabled = true\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    this.getOptions()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.alertM,\r\n.cascaderM,\r\n.tabsM {\r\n  margin-top: 10px;\r\n}\r\n.el-cascader {\r\n  width: 300px;\r\n}\r\n</style>\r\n```\r\n#### 动态参数预览\r\n![VPOPrX.png](https://t1.picb.cc/uploads/2019/04/06/VPOPrX.png)\r\n#### 动态参数代码 (tag用作新增与删除)\r\n##### $nextTick 解决dom还未渲染的问题\r\nTab 标签 参考网址：http://element-cn.eleme.io/#/zh-CN/component/tag\r\nsrc/views/goods/params.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab -->\r\n    <el-tabs class=\"tabsM\" v-model=\"active\">\r\n      <!-- 动态参数 -->\r\n      <el-tab-pane label=\"动态参数\" name=\"many\" ref=\"btn\">\r\n        <el-button type=\"primary\" :disabled=\"disabled\">添加动态参数</el-button>\r\n        <el-table class=\"dynamicTableM\" :data=\"dynamicData\" stripe border style=\"width: 100%\">\r\n          <el-table-column type=\"expand\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag v-for=\"(item, index) in scope.row.temp_vals\" :key=\"index\" closable @close=\"tagClose(scope.row,item)\">\r\n                { { item } }\r\n              </el-tag>\r\n              <el-input v-if=\"inputVisible\" class=\"input-new-tag\" v-model=\"inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\r\n              </el-input>\r\n              <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput\">+ New Tag</el-button>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column type=\"index\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"attr_name\" label=\"商品参数\">\r\n          </el-table-column>\r\n          <el-table-column label=\"操作\">\r\n            <template slot-scope=\"scope\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" plain size=\"mini\"></el-button>\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" plain size=\"mini\"></el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-tab-pane>\r\n      <!-- 静态属性（静态参数） -->\r\n      ...\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      // 静态参数所用的数据\r\n      dynamicData: [],\r\n      inputVisible: false,\r\n      inputValue: \'\'\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据 用于级联框\r\n    ...\r\n    // 商品分类级联框改变事件\r\n    change () {\r\n      if (this.seletedValues.length === 3) {\r\n        // 当选中了第三级商品分类时，就激活“添加动态参数”和“添加静态属性”的按钮\r\n        this.disabled = false\r\n        // 请求 动态参数\r\n        this.getAttributes(\'many\', data => {\r\n          this.dynamicData = data\r\n          this.dynamicData.forEach(item => {\r\n            // 在vue中，如果要动态设置数据的属性（如后来添加的新属性），必须用$set()方法来设置，属性值更新时页面才会渲染； 否则不会渲染\r\n            // item.temp_vals = item.attr_vals.split(\',\') // 这种方式设置的动态属性，数据更新时页面不会渲染\r\n            this.$set(item, \'temp_vals\', item.attr_vals ? item.attr_vals.split(\',\') : [])\r\n          })\r\n        })\r\n      } else {\r\n        // 若还没有选中第三级商品分类时，使“添加动态参数”和“添加静态属性”的按钮保持禁用\r\n        this.disabled = true\r\n      }\r\n    },\r\n    // 封装请求分类参数的方法\r\n    getAttributes (selValue, callback) {\r\n      this.$http({\r\n        url: `categories/${this.seletedValues[this.seletedValues.length - 1]}/attributes`,\r\n        method: \'get\',\r\n        params: {\r\n          sel: selValue\r\n        }\r\n      }).then(res => {\r\n        let { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          callback(data) // 成功的回调函数\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 关闭tag标签：请求服务器删除某个动态参数的某一项\r\n    tagClose (row, item) {\r\n      // 1.0 前端删除\r\n      row.temp_vals.splice(row.temp_vals.indexOf(item), 1)\r\n      // 2.0再更新服务器数据\r\n      this.$http({\r\n        url: `categories/${this.seletedValues[2]}/attributes/${row.attr_id}`,\r\n        method: \'put\',\r\n        data: {\r\n          attr_name: row.attr_name,\r\n          attr_sel: \'many\',\r\n          attr_vals: row.temp_vals.join(\',\')\r\n        }\r\n      }).then(res => {\r\n        let { meta } = res.data\r\n        if (meta.status === 200) {\r\n          // console.log(res)\r\n          // row.temp_vals.push(\'我是测试添加的，不会到服务器，哈哈哈\') // 看看动态属性(temp_vals)能不能渲染，答案是“可以的”\r\n          this.$message({\r\n            message: meta.msg,\r\n            type: \'success\'\r\n          })\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n          this.change() // 3.0若服务器添加数据失败，则重新请求服务器数据，重新渲染\r\n        }\r\n      })\r\n    },\r\n    // tag失焦 新增某个动态参数的一项：handleInputConfirm()这个函数会执行2次，第1次keyup触发，第2次是onblur触发\r\n    handleInputConfirm (row) {\r\n      this.inputVisible = false\r\n      // 保证添加1次（第1次inputValue有值，则添加动态参数到服务器，并置空inputValue；当第2次执行时，inputValue为空则什么也干不了）\r\n      if (this.inputValue) {\r\n        // 1.0先更新客户端数据\r\n        row.temp_vals.push(this.inputValue)\r\n        // 2.0再更新服务器数据\r\n        this.$http({\r\n          url: `categories/${this.seletedValues[2]}/attributes/${row.attr_id}`,\r\n          method: \'put\',\r\n          data: {\r\n            attr_name: row.attr_name,\r\n            attr_sel: \'many\',\r\n            attr_vals: row.temp_vals.join(\',\')\r\n          }\r\n        }).then(res => {\r\n          let { meta } = res.data\r\n          if (meta.status === 200) {\r\n            this.$message({\r\n            message: meta.msg,\r\n            type: \'success\'\r\n          })\r\n          } else {\r\n            this.$message.error(meta.msg)\r\n            this.change() // 3.0若服务器添加数据失败，则重新请求服务器数据，重新渲染\r\n          }\r\n        })\r\n      }\r\n      this.inputValue = \'\'\r\n      // console.log(\'如果按enter键，我会执行2次，第1次由enter键keyup触发，第2次由onblur触发\')\r\n    },\r\n    showInput () {\r\n      this.inputVisible = true\r\n      // $nextTick将自己的回调函数 延迟到下次 DOM 更新循环之后执行，这样就能保证回调函数执行时，DOM都更新好了\r\n      // console.log(this.$refs.saveTagInput); // undefined\r\n      // 因为el-input默认隐藏（v-if），dom还没更新，还没渲染出来，所以为undefined\r\n      this.$nextTick(_ => {\r\n        // console.log(this.$refs.saveTagInput); // VueComponent{_uid: 82, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: VueComponent,…}\r\n        this.$refs.saveTagInput.$refs.input.focus()\r\n      })\r\n    }\r\n  },\r\n  created () {\r\n    this.getOptions()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n.dynamicTableM {\r\n  margin-top: 10px;\r\n}\r\n.el-cascader {\r\n  width: 300px;\r\n}\r\n.el-tag {\r\n	margin-right: 10px;\r\n}\r\n.button-new-tag {\r\n	margin-left: 10px;\r\n	height: 32px;\r\n	line-height: 30px;\r\n	padding-top: 0;\r\n	padding-bottom: 0;\r\n}\r\n.input-new-tag {\r\n	width: 90px;\r\n	margin-left: 10px;\r\n	vertical-align: bottom;\r\n}\r\n</style>\r\n\r\n```\r\n#### 静态属性预览\r\n![VPORSG.png](https://t1.picb.cc/uploads/2019/04/06/VPORSG.png)\r\n#### 静态属性代码\r\nsrc/views/goods/params.vue\r\n```\r\n<template>\r\n  <div>\r\n    ...\r\n    <!-- tab -->\r\n    <el-tabs class=\"tabsM\" v-model=\"active\">\r\n      <!-- 动态参数 -->\r\n      ...\r\n      <!-- 静态属性（静态参数） -->\r\n      <el-tab-pane label=\"静态属性\" name=\"only\">\r\n        <el-button type=\"primary\" :disabled=\"disabled\">添加静态属性</el-button>\r\n        <el-table class=\"staticTableM\" :data=\"staticData\" stripe border style=\"width: 100%\">\r\n          <el-table-column type=\"index\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"attr_name\" label=\"属性名称\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"attr_vals\" label=\"属性值\">\r\n          </el-table-column>\r\n          <el-table-column label=\"操作\">\r\n            <template slot-scope=\"scope\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" plain size=\"mini\"></el-button>\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" plain size=\"mini\"></el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ...\r\n      // 静态属性所用的数据\r\n      staticData: []\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据 用于级联框\r\n    ...\r\n    // 商品分类级联框改变事件\r\n    change () {\r\n      if (this.seletedValues.length === 3) {\r\n        ...\r\n        // 请求 动态参数\r\n        ...\r\n        // 请求 静态属性（静态参数）\r\n        this.getAttributes(\'only\', data => {\r\n          this.staticData = data\r\n        })\r\n      } else {\r\n        ...\r\n      }\r\n    },\r\n    ...\r\n  },\r\n  created () {\r\n    ...\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n...\r\n.staticTableM {\r\n  margin-top: 10px;\r\n}\r\n...\r\n</style>\r\n```',11,100,'2019-04-03 13:15:27','2019-04-06 06:49:51'),(304,'## 订单管理\r\n### 订单列表路由\r\nsrc/router/index.js\r\n```\r\n...\r\nimport Orders from \'@/views/orders/orders\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        ...\r\n        // 订单列表路由\r\n        {\r\n          name: \'orders\',\r\n          path: \'orders\',\r\n          component: Orders\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n\r\n...\r\nexport default router\r\n\r\n```\r\n### 订单列表预览\r\n![VP72sr.png](https://t1.picb.cc/uploads/2019/04/06/VP72sr.png)\r\n### 订单列表代码\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"订单管理\" level3=\"订单列表\" />\r\n    <!-- 订单列表 -->\r\n    <el-table :data=\"ordersList\" style=\"width: 100%\" height=\"530\">\r\n    <el-table-column type=\"index\" width=\"50\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"order_number\" label=\"订单编号\" width=\"200\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"order_price\" label=\"订单价格\" width=\"120\">\r\n    </el-table-column>\r\n    <el-table-column label=\"是否付款\" width=\"120\">\r\n      <template slot-scope=\"scope\">\r\n        <el-tag type=\"danger\" v-if=\"scope.row.order_pay === \'0\'\">未付款</el-tag>\r\n        <el-tag type=\"danger\" v-else>已付款</el-tag>\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column prop=\"is_send\" label=\"是否发货\" width=\"100\">\r\n    </el-table-column>\r\n    <el-table-column prop=\"create_time\" label=\"下单时间\" width=\"180\">\r\n      <template slot-scope=\"scope\">\r\n        { { scope.row.create_time | myTime } }\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column label=\"操作\">\r\n      <template slot-scope=\"scope\">\r\n        <el-button type=\"primary\" icon=\"el-icon-edit\" plain size=\"mini\"></el-button>\r\n      </template>\r\n    </el-table-column>\r\n    </el-table>\r\n    <!-- 分页组件 -->\r\n    <el-pagination\r\n      @size-change=\"sizeChange\"\r\n      @current-change=\"currentChange\"\r\n      :current-page=\"pagenum\"\r\n      :page-sizes=\"pagesizes\"\r\n      :page-size=\"pagesize\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"total\">\r\n    </el-pagination>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      ordersList: [],\r\n      query: \'\',\r\n      pagenum: 1,\r\n      pagesize: 10,\r\n      pagesizes: [10, 20, 30, 40],\r\n      total: 0\r\n    }\r\n  },\r\n  methods: {\r\n    getOrdersList () {\r\n      this.$http({\r\n        url: \'orders\',\r\n        method: \'get\',\r\n        params: {\r\n          query: this.query,\r\n          pagenum: this.pagenum,\r\n          pagesize: this.pagesize\r\n        }\r\n      }).then(res => {\r\n        let { data, meta } = res.data\r\n        if (meta.status === 200) {\r\n          this.ordersList = data.goods\r\n          this.total = data.total\r\n        } else {\r\n          this.$message.error(meta.msg)\r\n        }\r\n      })\r\n    },\r\n    // 页容量改变事件\r\n    sizeChange (val) {\r\n      this.pagesize = val\r\n      // 重新初始化页码（页码可能变少），防止页码超出范围\r\n      this.pagenum = 1\r\n      this.getOrdersList()\r\n    },\r\n    // 页码改变事件\r\n    currentChange (val) {\r\n      this.pagenum = val\r\n      this.getOrdersList()\r\n    }\r\n	},\r\n	created () {\r\n		this.getOrdersList()\r\n	}\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n\r\n```',11,100,'2019-04-06 05:07:16','2019-04-06 05:25:46'),(305,'## 数据统计\r\n### 数据报表路由\r\nsrc/router/index.js\r\n```\r\nimport Reports from \'@/views/reports/reports.vue\'\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n  routes: [\r\n    ...\r\n    // 首页路由\r\n    {\r\n      name: \'home\',\r\n      path: \'/\',\r\n      component: Home,\r\n      // 给 Home 组件设置子路由（子路由对应的子组件会替换 父组件Home中的 <router-view />）\r\n      children: [\r\n        ...\r\n        // 数据报表路由\r\n        {\r\n          name: \'reports\',\r\n          path: \'reports\',\r\n          component: Reports\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n...\r\nexport default router\r\n\r\n```\r\n### 安装 ECharts 数据图表\r\nECharts 官方文档：https://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts\r\n```\r\nyarn add echarts\r\n或\r\nnpm i echarts\r\n```\r\nECharts 的使用 见以下章节 “数据图表代码 (ECharts)”\r\n### 数据图表预览\r\n![VP7gO0.png](https://t1.picb.cc/uploads/2019/04/06/VP7gO0.png)\r\n### 数据图表代码 (ECharts)\r\nsrc/views/reports/reports.vue\r\n```\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <MybreadCrumb level2=\"数据统计\" level3=\"数据报表\" />\r\n    <!-- 数据图表: ECharts要操作的dom元素 -->\r\n    <div id=\"main\" style=\"width: 600px; height: 400px\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入 ECharts\r\nimport echarts from \'echarts\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      option: {\r\n        title: {\r\n          text: \'堆叠区域图\'\r\n        },\r\n        tooltip: {\r\n          trigger: \'axis\',\r\n          axisPointer: {\r\n            type: \'cross\',\r\n            label: {\r\n              backgroundColor: \'#6a7985\'\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          left: \'3%\',\r\n          right: \'4%\',\r\n          bottom: \'3%\',\r\n          containLabel: true\r\n        }\r\n      },\r\n      newOption: {}\r\n    }\r\n  },\r\n  mounted () {\r\n    // 准备好dom，初始化 ECharts 实例\r\n    var myChart = echarts.init(document.getElementById(\'main\'))\r\n    // 显示loading效果\r\n    myChart.showLoading()\r\n    // 请求数据\r\n    this.$http({\r\n      url: \'reports/type/1\',\r\n      method: \'get\'\r\n    }).then(res => {\r\n      var { data, meta } = res.data\r\n      if (meta.status === 200) {\r\n        this.newOption = { ...this.option, ...data }\r\n        this.newOption.xAxis[0].boundaryGap = false\r\n        // 使用刚指定的配置项和数据显示图表\r\n        myChart.setOption(this.newOption)\r\n        myChart.hideLoading()\r\n        console.log(this.newOption)\r\n      } else {\r\n        this.$message.error(meta.msg)\r\n      }\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n```\r\n数据表格中的完整数据结构如下：\r\n```\r\nnewOption: {\r\n  title: {\r\n    text: \"堆叠区域图\"\r\n  },\r\n  tooltip: {\r\n    trigger: \"axis\",\r\n    axisPointer: {\r\n      type: \"cross\",\r\n      label: {\r\n        backgroundColor: \"#6a7985\"\r\n      }\r\n    }\r\n  },\r\n  grid: {\r\n    left: \"3%\",\r\n    right: \"4%\",\r\n    bottom: \"3%\",\r\n    containLabel: true\r\n  },\r\n  legend: {\r\n    data: [ \"华东\",\"华南\",\"华北\",\"西部\",\"其他\" ]\r\n  },\r\n  series : [\r\n    {\r\n      name:\'华东\',\r\n      type:\'line\',\r\n      stack: \'总量\',\r\n      areaStyle: {},\r\n      data:[2999,3111,4100,3565,3528,6000]\r\n    },\r\n    {\r\n      name:\'华南\',\r\n      type:\'line\',\r\n      stack: \'总量\',\r\n      areaStyle: {},\r\n      data:[5090,2500,3400,6000,6400,7800]\r\n    },\r\n    {\r\n      name:\'华北\',\r\n      type:\'line\',\r\n      stack: \'总量\',\r\n      areaStyle: {},\r\n      data:[6888,4000,8010,12321,13928,12984]\r\n    },\r\n    {\r\n      name:\'西部\',\r\n      type:\'line\',\r\n      stack: \'总量\',\r\n      areaStyle: {},\r\n      data:[9991,4130,7777,12903,13098,14028]\r\n    },\r\n    {\r\n      name:\'其他\',\r\n      type:\'line\',\r\n      stack: \'总量\',\r\n      areaStyle: {},\r\n      data:[15212,5800,10241,14821,15982,14091]\r\n    },\r\n  ],\r\n  xAxis: [{\r\n    boundaryGap: false,\r\n    data: [\"2017-12-27\",\"2017-12-28\",\"2017-12-29\",\"2017-12-30\",\"2017-12-31\",\"2018-1-1\"]\r\n  }],\r\n  yAxis: [{\r\n    type:\"value\"\r\n  }]\r\n}\r\n```',11,100,'2019-04-06 05:25:34','2019-04-06 06:26:40'),(306,'## 首屏优化\r\n### 路由懒加载\r\n使用vue与webpack结合起来，在打包时将路由文件从app和vendor文件中分离出来\r\n官网讲解：https://router.vuejs.org/zh/guide/advanced/lazy-loading.html\r\n```\r\nconst Foo = () => import(\'./Foo.vue\')\r\n```\r\n实际应用举例，在router/index.js中，把路由改造成路由懒加载\r\n改造后再打包，就会把路由组件从app（js）和vendor（js）文件中分离出来，使app和vendor的size会大幅减少，但是如果没有用cdn的话，vendor还是会比较大。\r\nsrc/router/index.js\r\n```\r\n// 常规路由加载\r\n// import Login from \'@/views/login/login.vue\'\r\n// import Home from \'@/views/home.vue\'\r\n// import Index from \'@/views/index.vue\'\r\n// import Users from \'@/views/users/users.vue\'\r\n// import Rights from \'@/views/rights/rights.vue\'\r\n// import Roles from \'@/views/rights/roles.vue\'\r\n// import Categories from \'@/views/goods/categories.vue\'\r\n// import Goods from \'@/views/goods/goods.vue\'\r\n// import GoodsAdd from \'@/views/goods/goodsAdd.vue\'\r\n// import Params from \'@/views/goods/params\'\r\n// import Orders from \'@/views/orders/orders\'\r\n// import Reports from \'@/views/reports/reports.vue\'\r\n\r\n// 首屏优化：路由懒加载\r\nconst Login = () => import(\'@/views/login/login.vue\')\r\nconst Home = () => import(\'@/views/home.vue\')\r\nconst Index = () => import(\'@/views/index.vue\')\r\nconst Users = () => import(\'@/views/users/users.vue\')\r\nconst Rights = () => import(\'@/views/rights/rights.vue\')\r\nconst Roles = () => import(\'@/views/rights/roles.vue\')\r\nconst Categories = () => import(\'@/views/goods/categories.vue\')\r\nconst Goods = () => import(\'@/views/goods/goods.vue\')\r\nconst GoodsAdd = () => import(\'@/views/goods/goodsAdd.vue\')\r\nconst Params = () => import(\'@/views/goods/params\')\r\nconst Orders = () => import(\'@/views/orders/orders\')\r\nconst Reports = () => import(\'@/views/reports/reports.vue\')\r\n```\r\n路由懒加载之前打包结果size情况\r\n\r\n\r\n| Asset  | 懒加载之前 Size  | 懒加载之后 Size  | 对应的路由组件 |\r\n| ------------: | ------------: | ------------: |  ------------: |\r\n| static/fonts/element-icons.6f0a763.ttf  | 11 kB  | 11 kB | 没有对应 |\r\n| static/js/vendor.05ab866211a3a75dcd3a.js  | 2.01 MB  | 963 kB | 没有对应 |\r\n| static/js/app.146eb1ca146b6d08a67f.js  | 47.1 kB  | 7.38 kB | 没有对应 |\r\n| static/js/manifest.2ae2e69a05c33dfc65f8.js  | 857 bytes  | 1.74 kB | 没有对应 |\r\n| static/css/app.f1c39caf50fd06fda3a8da42aa15762f.css  | 228 kB  | 228 kB | 没有对应 |\r\n| static/js/0.7d01559f4294d130508d.js | 之前没有 | 806 kB | Reports |\r\n|static/js/1.e214983609ef821f52d9.js | 之前没有 | 247 kB | GoodsAdd |\r\n| static/js/2.a43acfec7179e6a15444.js | 之前没有 | 2.42 kB | Home |\r\n| static/js/3.7ff7d8dc861b4e9787c5.js | 之前没有 | 10.9 kB | Categories |\r\n| static/js/4.b68e8e4475dbebed37ad.js | 之前没有 | 2.77 kB | Goods |\r\n| static/js/5.7cbbfc29e586e1805fd0.js | 之前没有 | 9.7 kB | Users |\r\n|static/js/6.10a529f0b55ba25fef6a.js | 之前没有 | 1.39 kB | Rights |\r\n| static/js/7.05cf49d075aa41761833.js | 之前没有 | 1.72 kB | Login |\r\n| static/js/8.74cc2cdb85c441beb70a.js |之前没有 | 5.07 kB | Params |\r\n|static/js/9.747371dab54f4e866454.js | 之前没有 | 398 bytes | Index |\r\n| static/js/10.d5c31dc49eec463b82bb.js | 之前没有| 2.29 kB | Orders |\r\n| static/js/11.fdbbaa290985932d2aba.js | 之前没有 | 4.44 kB | Roles |\r\n\r\n### cdn静态资源托管\r\n主要是把main.js中import的插件，用cdn代替。并且把main.js中import的css也用cdn代替，且必须注释掉import css语句（import 插件 语句不可以注释掉），从而能使app(css)大为缩减。\r\n使用cdn加载资源，然后再npm run build 打包，会使vendor（js）的size减少很多，一般能减少到25k左右（且使用了路由懒加载的情况下）\r\n步骤：\r\n——  第一步：找cdn资源 相关网站：https://www.bootcdn.cn/\r\n根据 package.json 中的插件版本，在cdn网站找到对应版本的cnd资源\r\n```\r\n// https://www.bootcdn.cn/vue，找到对应版本资源（在package.json中查看版本）\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js\"></script>\r\n```\r\n—— 第二步：在index.html页面中引入cnd资源\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <title>vue-demo</title>\r\n    <!-- cdn资源 -->\r\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/element-ui/2.6.3/theme-chalk/index.css\">\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <script src=\"https://cdn.bootcss.com/vue/2.5.2/vue.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/element-ui/2.6.3/index.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/axios/0.18.0/axios.min.js\"></script>\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n\r\n```\r\n—— 第三步：在项目中配置第三方包相应信息（直接去webpack官网去找）\r\n———— webpack官网：www.webpackjs.com\r\n———— 找到webpack官网 > 外部扩展：https://www.webpackjs.com/configuration/externals/#externals\r\n```\r\n// 这样就剥离了jQuery模块，从 CDN 引入 jQuery，而不是把它打包\r\nexternals: {\r\n  jquery: \'jQuery\'\r\n}\r\n```\r\n———— 在build/webpack.base.conf.js中，加入exernals配置就ok\r\n```\r\n// 将来从cnd中加载，而不是从第三方包中加载\r\nmodule.exports = { \r\n  context: path.resolve(__dirname, \'../\'),\r\n  entry: {\r\n    app: \'./src/main.js\'\r\n  },\r\n  externals: {\r\n    // \'第三方包名\'： \'第三方包中导出对象的名称\'\r\n    // 这两个名称都是固定的，第一个是node_modules的名称，第二个名称在第三方包js文件中查看（即导出的对象名称）\r\n    vue: \'Vue\',\r\n    \'element-ui\': \'ELEMENT\',\r\n    \'moment\': \'moment\',\r\n    \'axios\': \'axios\'\r\n  },\r\n  ...\r\n}\r\n```\r\n—— 第四步：注释（删除）main.js中import css的语句\r\n```\r\n// 引入 elementUI 样式\r\n// import \'element-ui/lib/theme-chalk/index.css\' // import css注释掉，缩减app(css)体积，因为在index.html中已经用cdn加载过这个css样式了\r\n// 引入公共样式\r\nimport \'@/assets/css/index.css\'\r\n\r\n// import 插件对象，这些不能注释，这代表的是从cdn下载后的包中，导入插件到项目中\r\n// 引入 elementUI 对象(但是：当vue是从cdn和element都是cdn引入的话，element可以不用import引入和Vue.use注册，因为element是基于vue封装的)\r\n// import Element from \'element-ui\'\r\n// 引入封装的 axios 插件\r\nimport axios from \'@/assets/js/myaxios.js\'\r\n// 引入全局面包屑组件\r\nimport MybreadCrumb from \'@/components/breadcrumb.vue\'\r\n// 引入moment\r\nimport moment from \'moment\'\r\n\r\n// 注意，所有的 import 必须放在前面，import 语句之前不能有其他的代码\r\n\r\n// 全局注册 element ，将来任何位置都可以使用 element 组件\r\n// Vue.use(Element)(但是：当vue是从cdn和element都是cdn引入的话，element可以不用import引入和Vue.use注册，因为element是基于vue封装的)\r\n// 全局注册 axios\r\nVue.use(axios)\r\n// 注册全局面包屑组件，格式：Vue.component(\'组件名\' , 组件)\r\nVue.component(MybreadCrumb.name, MybreadCrumb)\r\n// 注册全局过滤器(时间格式化)\r\nVue.filter(\'myTime\', function (time) {\r\n  return moment(time).format(\'YYYY-MM-DD hh:mm:ss\') // 使用 moment 格式化时间\r\n})\r\n// 注册q全局过滤器(人民币格式化)\r\nVue.filter(\'myRMB\', function (rmb) {\r\n  return rmb.toFixed(2) + \' ¥\'\r\n})\r\n```\r\ncdn优化后的size情况\r\n\r\n| Asset  | 懒加载之前 Size  | 懒加载之后 Size  | 对应的路由组件 | cdn vue后 | cdn Element-ui后 | cdn Element-ui后 | cdn axios后 |\r\n| ------------: | ------------: | ------------: |  ------------: | ------------: | ------------: | ------------: |------------: |\r\n| static/fonts/element-icons.6f0a763.ttf  | 11 kB  | 11 kB | 没有对应 | —— | 0kB(变没了) | —— | —— |\r\n| static/js/vendor.05ab866211a3a75dcd3a.js  | 2.01 MB  | 963 kB | 没有对应 | 869 kB | 274 kB | 39.4 kB | 25.1 kB |\r\n| static/js/app.146eb1ca146b6d08a67f.js  | 47.1 kB  | 7.38 kB | 没有对应 |—— | —— | 3.01 kB | 3.05 kB |\r\n| static/js/manifest.2ae2e69a05c33dfc65f8.js  | 857 bytes  | 1.74 kB | 没有对应 |—— | —— | —— | —— |\r\n| static/css/app.f1c39caf50fd06fda3a8da42aa15762f.css  | 228 kB  | 228 kB | 没有对应 |—— | 37.9 kB | —— | —— |\r\n| static/js/0.7d01559f4294d130508d.js | 之前没有 | 806 kB | Reports |—— | 812 kB | —— | —— |\r\n|static/js/1.e214983609ef821f52d9.js | 之前没有 | 247 kB | GoodsAdd |—— | 248 kB | —— | —— |\r\n| static/js/2.a43acfec7179e6a15444.js | 之前没有 | 2.42 kB | Home |—— | —— | —— | —— |\r\n| static/js/3.7ff7d8dc861b4e9787c5.js | 之前没有 | 10.9 kB | Categories |—— | —— | —— | —— |\r\n| static/js/4.b68e8e4475dbebed37ad.js | 之前没有 | 2.77 kB | Goods |—— | —— | —— | —— |\r\n| static/js/5.7cbbfc29e586e1805fd0.js | 之前没有 | 9.7 kB | Users |—— | —— | —— | —— |\r\n|static/js/6.10a529f0b55ba25fef6a.js | 之前没有 | 1.39 kB | Rights |—— | —— | —— | —— |\r\n| static/js/7.05cf49d075aa41761833.js | 之前没有 | 1.72 kB | Login |—— | —— | —— | —— |\r\n| static/js/8.74cc2cdb85c441beb70a.js |之前没有 | 5.07 kB | Params |—— | —— | —— | —— |\r\n|static/js/9.747371dab54f4e866454.js | 之前没有 | 398 bytes | Index |—— | —— | —— | —— |\r\n| static/js/10.d5c31dc49eec463b82bb.js | 之前没有| 2.29 kB | Orders |—— | —— | —— | —— |\r\n| static/js/11.fdbbaa290985932d2aba.js | 之前没有 | 4.44 kB | Roles |—— | —— | —— | —— |',11,100,'2019-04-08 09:10:59','2019-04-11 07:37:30'),(307,'## mint-ui 的使用\r\n### mint-ui 介绍\r\nMint UI 包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要。通过它，可以快速构建出风格统一的页面，提升开发效率。真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件，无需再纠结文件体积过大。考虑到移动端的性能门槛，Mint UI 采用 CSS3 处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。依托 Vue.js 高效的组件化方案，Mint UI 做到了轻量化。即使全部引入，压缩后的文件体积也仅有 ~30kb (JS + CSS) gzip。\r\n\r\n注意：MUI不同于Mint-ui，Mui只是开发出来一套好用的代码片段，里面提供了配套的样式，配套的HTML代码段，类似于bootstrap，而Mint-UI是真正的组件库，是使用VUE技术封装出来的成套的组件可以无缝的和VUE项目进行集成开发；因此从体验上来说，Mint-UI体验更好，因为这是别人帮我们开发好的现成组件，从体验上看来MUI和Bootstrapt类似；理论上，任何项目都可以使用MUI和Bootstrapt，但是Mint-U只适用于Vue项目。\r\n\r\n### mint-ui 官网\r\n官方文档：http://mint-ui.github.io/docs/#/zh-cn2\r\n各个组件 demo 的地址：https://github.com/mint-ui\r\n示例演示：http://elemefe.github.io/mint-ui/#/\r\n### vue2.x中引入mint-ui的方法\r\n三种引入方法，参考网址：https://www.jianshu.com/p/db776b507065\r\n推荐使用第二种。第二种方法过程如下：\r\n1.在`index.html` 中引入mint-ui的css和js\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\">\r\n    <link href=\"https://cdn.bootcss.com/mint-ui/2.2.13/style.css\" rel=\"stylesheet\">\r\n    <title>vue-mint</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <!-- 在cdn引入mint-ui的js之前，需要先引入vue的js -->\r\n    <script src=\"https://cdn.bootcss.com/vue/2.5.2/vue.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/mint-ui/2.2.13/index.js\"></script>\r\n\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n\r\n```\r\n2.在 `webpack.base.conf.js` 中配置 externals 参数\r\n```\r\nmodule.exports = {\r\n  context: path.resolve(__dirname, \'../\'),\r\n  entry: {\r\n    app: \'./src/main.js\'\r\n  },\r\n  externals: {\r\n    // \'mint-ui\': \'MINT\' // 配置了vue就不用配置mint-ui了\r\n    \'vue\': \'Vue\'\r\n  }\r\n  ...\r\n}\r\n```\r\n### 下拉刷新 和 上拉加载更多\r\n```\r\n<template>\r\n  <div class=\"page-loadmore\">\r\n    <h1 class=\"page-title\">Pull up</h1>\r\n    <p class=\"page-loadmore-desc\">在列表底部, 按住 - 上拉 - 释放可以获取更多数据</p>\r\n    <p class=\"page-loadmore-desc\">translate : { { translate } }</p>\r\n    <div\r\n      class=\"loading-background\"\r\n      :style=\"{ transform: \'scale3d(\' + moveTranslate + \',\' + moveTranslate + \',1)\' }\"\r\n    >translateScale : { { moveTranslate } }</div>\r\n    <div class=\"page-loadmore-wrapper\" ref=\"wrapper\" :style=\"{ height: wrapperHeight + \'px\' }\">\r\n      <mt-loadmore\r\n        :top-method=\"loadTop\"\r\n        @translate-change=\"translateChange\"\r\n        @top-status-change=\"handleTopChange\"\r\n        :bottom-method=\"loadBottom\"\r\n        @bottom-status-change=\"handleBottomChange\"\r\n        :bottom-all-loaded=\"allLoaded\"\r\n        ref=\"loadmore\"\r\n      >\r\n        <ul class=\"page-loadmore-list\">\r\n          <li v-for=\"(item, index) in list\" :key=\"index\" class=\"page-loadmore-listitem\">{ { item } }</li>\r\n        </ul>\r\n        <div slot=\"top\" class=\"mint-loadmore-top\">\r\n          <span v-show=\"topStatus !== \'loading\'\" :class=\"{ \'is-rotate\': topStatus === \'drop\' }\">↓</span>\r\n          <span v-show=\"topStatus === \'loading\'\">\r\n            <mt-spinner type=\"snake\"></mt-spinner>\r\n          </span>\r\n        </div>\r\n        <div slot=\"bottom\" class=\"mint-loadmore-bottom\">\r\n          <span\r\n            v-show=\"bottomStatus !== \'loading\'\"\r\n            :class=\"{ \'is-rotate\': bottomStatus === \'drop\' }\"\r\n          >↑</span>\r\n          <span v-show=\"bottomStatus === \'loading\'\">\r\n            <mt-spinner type=\"snake\"></mt-spinner>\r\n          </span>\r\n        </div>\r\n      </mt-loadmore>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.loading-background,\r\n.mint-loadmore-top span {\r\n  -webkit-transition: 0.2s linear;\r\n  transition: 0.2s linear;\r\n}\r\n.mint-loadmore-top span {\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n\r\n.mint-loadmore-top span.is-rotate {\r\n  -webkit-transform: rotate(180deg);\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.page-loadmore .mint-spinner {\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n\r\n.page-loadmore-desc {\r\n  text-align: center;\r\n  color: #666;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.page-loadmore-desc:last-of-type,\r\n.page-loadmore-listitem {\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.page-loadmore-listitem {\r\n  height: 50px;\r\n  line-height: 50px;\r\n  text-align: center;\r\n}\r\n\r\n.page-loadmore-listitem:first-child {\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.page-loadmore-wrapper {\r\n  overflow: scroll;\r\n}\r\n\r\n.mint-loadmore-bottom span {\r\n  display: inline-block;\r\n  -webkit-transition: 0.2s linear;\r\n  transition: 0.2s linear;\r\n  vertical-align: middle;\r\n}\r\n\r\n.mint-loadmore-bottom span.is-rotate {\r\n  -webkit-transform: rotate(180deg);\r\n  transform: rotate(180deg);\r\n}\r\n</style>\r\n\r\n<script type=\"text/babel\">\r\nexport default {\r\n  data () {\r\n    return {\r\n      list: [],\r\n      allLoaded: false,\r\n      bottomStatus: \'\',\r\n      wrapperHeight: 0,\r\n      topStatus: \'\',\r\n      // wrapperHeight: 0,\r\n      translate: 0,\r\n      moveTranslate: 0\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    handleBottomChange (status) {\r\n      this.bottomStatus = status\r\n    },\r\n    loadBottom () {\r\n      setTimeout(() => {\r\n        let lastValue = this.list[this.list.length - 1]\r\n        if (lastValue < 40) {\r\n          for (let i = 1; i <= 10; i++) {\r\n            this.list.push(lastValue + i)\r\n          }\r\n        } else {\r\n          this.allLoaded = true\r\n        }\r\n        this.$refs.loadmore.onBottomLoaded()\r\n      }, 1500)\r\n    },\r\n    handleTopChange (status) {\r\n      this.moveTranslate = 1\r\n      this.topStatus = status\r\n    },\r\n    translateChange (translate) {\r\n      const translateNum = +translate\r\n      this.translate = translateNum.toFixed(2)\r\n      this.moveTranslate = (1 + translateNum / 70).toFixed(2)\r\n    },\r\n    loadTop () {\r\n      setTimeout(() => {\r\n        let firstValue = this.list[0]\r\n        for (let i = 1; i <= 10; i++) {\r\n          this.list.unshift(firstValue - i)\r\n        }\r\n        this.$refs.loadmore.onTopLoaded()\r\n      }, 1500)\r\n    }\r\n  },\r\n  created () {\r\n    for (let i = 1; i <= 20; i++) {\r\n      this.list.push(i)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.wrapperHeight =\r\n      document.documentElement.clientHeight -\r\n      this.$refs.wrapper.getBoundingClientRect().top\r\n  }\r\n}\r\n</script>\r\n\r\n```',30,100,'2019-04-10 14:35:35','2019-04-18 07:57:03'),(308,'## 项目介绍\r\n项目背景：用 vue和mint-ui 重新构建letao项目\r\n项目地址：https://github.com/andy-love-coding/vue-mint-letao\r\n### 项目服务器安装\r\n1.git clone 项目\r\n```\r\ngit clone https://github.com/andy-love-coding/letao_demo.git\r\n```\r\n2.安装第三放包：npm install 或 npm i\r\n3.用`docs/letao初始化.sql`文件，创建`letao`数据库 (默认用户名：itcast  密码：111111)\r\n4.修改数据库配置文件：models/db.js\r\n```\r\nconst pool  = mysql.createPool({\r\n    host : \'127.0.0.1\',\r\n    user : \'homestead\',\r\n    password : \'secret\',\r\n    database : \'letao\'\r\n});\r\n```\r\n5.启动服务器\r\n服务器端口是：3000\r\n接口举例：GET http://home.test:3000/category/queryTopCategory\r\n前端页面访问举例：http://home.test:3000/mobile/category.html\r\n```\r\n// 在项目根目录下执行以下命令\r\nnpm start\r\n```\r\n### 项目原型图\r\n原型图：\r\n![](http://note.test/uploads/markdown/20190424-070748-175.png)',32,100,'2019-04-11 09:30:44','2019-04-24 07:36:25'),(309,'## 初始化空项目\r\n### 搭建一个空的vue2.x项目\r\n下载空的 vue2.x 项目\r\n```\r\nvue init webpack veu-min\r\n```\r\n删除不必要文件：src/components/HelloWorld.vue\r\n然后去除HelloWorld.vue在路由文件中的引用\r\n### CDN引入 mint-ui 和 font-awesome\r\nmint-ui官方文档：http://mint-ui.github.io/docs/#/zh-cn2\r\n各个组件 demo 的地址：https://github.com/mint-ui\r\nmint-ui示例演示：http://elemefe.github.io/mint-ui/#/\r\nsrc/index.html\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\">\r\n    <link href=\"https://cdn.bootcss.com/mint-ui/2.2.13/style.css\" rel=\"stylesheet\">\r\n    <title>vue-mint</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <!-- 在cdn引入mint-ui的js之前，需要先引入vue的js -->\r\n    <script src=\"https://cdn.bootcss.com/vue/2.5.2/vue.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/mint-ui/2.2.13/index.js\"></script>\r\n\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n\r\n```\r\n在 build/webpack.base.conf.js 中配置 externals 参数\r\n```\r\nmodule.exports = {\r\n  context: path.resolve(__dirname, \'../\'),\r\n  entry: {\r\n    app: \'./src/main.js\'\r\n  },\r\n  externals: {\r\n    // \'mint-ui\': \'MINT\' // 配置了vue就不用配置mint-ui了\r\n    \'vue\': \'Vue\'\r\n  }\r\n  ...\r\n}\r\n```\r\n### vue 项目使用 less\r\n只需安装  less-loader 即可 （因为：build/utils.js对css各种预处理语言已经进行了配置加载器）\r\n```\r\nyarn add less less-loader --dev\r\n或\r\nnpm install less less-loader --save-dev\r\n```\r\n安装之后，就也可以使用 less 了，之后不论是 npm run dev 还是 npm run build 都能对 less 进行编译。',32,100,'2019-04-12 07:16:20','2019-04-18 07:57:41'),(310,'## 搭建项目布局\r\n### 布局路由\r\nsrc/router/index.js\r\n```\r\nimport Vue from \'vue\'\r\nimport Router from \'vue-router\'\r\nimport Index from \'@/views/index.vue\'\r\nimport Categories from \'@/views/categories.vue\'\r\nimport Cart from \'@/views/cart.vue\'\r\nimport User from \'@/views/user.vue\'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\n  routes: [\r\n    {\r\n      path: \'/\',\r\n      name: \'root\',\r\n      redirect: {name: \'index\'}\r\n    },\r\n    // 首页\r\n    {\r\n      path: \'/index\',\r\n      name: \'index\',\r\n      component: Index\r\n    },\r\n    // 分类\r\n    {\r\n      path: \'/categories\',\r\n      name: \'categories\',\r\n      component: Categories\r\n    },\r\n    // 购物车\r\n    {\r\n      path: \'/cart\',\r\n      name: \'cart\',\r\n      component: Cart\r\n    },\r\n    // 个人中心\r\n    {\r\n      path: \'/user\',\r\n      name: \'user\',\r\n      component: User\r\n    }\r\n  ]\r\n})\r\n\r\n```\r\n### 整体布局预览\r\n![](http://note.test/uploads/markdown/20190414-122431-574.png)\r\n### 头部组件 header.vue\r\nsrc/components/header.vue\r\n```\r\n<template>\r\n  <header class=\"lt_header\">\r\n    <div class=\"banxin\" v-if=\"hasWings === \'both\'\">\r\n      <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n      <h3>{ { title } }</h3>\r\n      <router-link :to=\"{name: routeName}\" class=\"right\"><span :class=\"iconType\"></span></router-link>\r\n    </div>\r\n    <div class=\"banxin\" v-else-if=\"hasWings === \'none\'\">\r\n      <h3>{ { title } }</h3>\r\n    </div>\r\n    <div class=\"banxin\" v-else-if=\"hasWings === \'right\'\">\r\n      <h3>{ { title } }</h3>\r\n      <router-link :to=\"{name: routeName}\" class=\"right\"><span :class=\"iconType\"></span></router-link>\r\n    </div>\r\n    <div class=\"banxin\" v-else-if=\"hasWings === \'left\'\">\r\n      <a href=\"javascript:history.back()\" class=\"left\"><span class=\"fa fa-chevron-left\"></span></a>\r\n      <h3>{ { title } }</h3>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: [\'hasWings\', \'iconType\', \'routeName\', \'title\'] // 接收父组件传递过来的参数 hasWings，参数值：both/left/right/none\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n/*\r\n  fixed/absolute 基于浏览器窗口大小，lt_container 版心管不住 fixed/absolute 容器\r\n  解决办法是：在 header和footer 容器中，再放一个版心，这个版心(.banxin)与版心(lt_container)宽度重合\r\n*/\r\n/* 头部 */\r\n.lt_header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 45px;\r\n  z-index: 999;\r\n  .banxin {\r\n    // max-width: 750px;\r\n    max-width: 1080px;\r\n    min-width: 320px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    background: #069;\r\n    position: relative;\r\n    color: #fff;\r\n    height: 45px;\r\n    line-height: 45px;\r\n    h3 {\r\n      font-size: 18px;\r\n      text-align: center;\r\n      margin: 0;\r\n      line-height: 45px;\r\n      font-weight: normal;\r\n    }\r\n    a {\r\n      color: #fff;\r\n      width: 45px;\r\n      height: 45px;\r\n      text-align: center;\r\n      position: absolute;\r\n      top: 0;\r\n    }\r\n    .left {\r\n      left: 0;\r\n    }\r\n    .right {\r\n      right: 0;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n```\r\n### 底部组件 footer.vue\r\nsrc/components/footer.vue\r\n```\r\n<template>\r\n  <footer class=\"lt_tabs\">\r\n    <div class=\"banxin\">\r\n      <router-link :to=\"{name:\'index\'}\" active-class=\"now\">\r\n        <span class=\"fa fa-home\"></span><p>首页</p>\r\n      </router-link>\r\n      <router-link :to=\"{name:\'categories\'}\" active-class=\"now\">\r\n        <span class=\"fa fa-bars\"></span><p>分类</p>\r\n      </router-link>\r\n      <router-link :to=\"{name:\'cart\'}\" active-class=\"now\">\r\n        <span class=\"fa fa-shopping-cart\"></span><p>购物车</p>\r\n      </router-link>\r\n      <router-link :to=\"{name:\'user\'}\" active-class=\"now\">\r\n        <span class=\"fa fa-user\"></span><p>个人中心</p>\r\n      </router-link>\r\n    </div>\r\n  </footer>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n/*\r\n  fixed/absolute 基于浏览器窗口大小，lt_container 版心管不住 fixed/absolute 容器\r\n  解决办法是：在 header和footer 容器中，再放一个版心，这个版心(.banxin)与版心(lt_container)宽度重合\r\n*/\r\n/* 底部 */\r\n.lt_tabs {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 55px;\r\n  .banxin {\r\n    // max-width: 750px;\r\n    max-width: 1080px;\r\n    min-width: 320px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    background: #069;\r\n    position: relative;\r\n    color: #fff;\r\n    height: 55px;\r\n    a {\r\n      width: 25%;\r\n      float: left;\r\n      text-align: center;\r\n      color: #fff;\r\n      padding-top: 9px;\r\n      p {\r\n        color: #fff;\r\n        font-size: 12px;\r\n        margin-bottom: 0;\r\n      }\r\n      &.now {\r\n        color: #fa0;\r\n        p {\r\n          color: #fa0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n```\r\n### 布局首页代码 index.vue\r\nsrc/views/index.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"none\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <p>首页</p>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n\r\n</style>\r\n\r\n```\r\n### 分类页代码 categories.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-search\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <p>分类</p>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n### 购物车页代码 cart.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-refresh\"/>\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <p>购物车</p>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n### 个人中心页代码 user.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"none\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <p>个人中心</p>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```\r\n### 公共样式 App.vue\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <router-view/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \'App\'\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n// mint-ui App.vue 中公用样式\r\n/**\r\n * 1. Change the default font family in all browsers (opinionated).\r\n * 2. Prevent adjustments of font size after orientation changes in IE and iOS.\r\n */\r\nhtml {\r\n  -ms-text-size-adjust: 100%;\r\n  /* 1 */\r\n  -webkit-text-size-adjust: 100%;\r\n  /* 1 */ /* 清除点击高亮效果 */\r\n  -webkit-tap-highlight-color: transparent;\r\n  /* 2 */\r\n  height: 100%;\r\n}\r\n/**\r\n * Remove the margin in all browsers (opinionated).\r\n */\r\nbody {\r\n  margin: 0;\r\n  /* 1 */\r\n  font-size: 14px;\r\n  font-family: \"Helvetica Neue\", Helvetica, STHeiTi, Arial, sans-serif;\r\n}\r\n/* HTML5 display definitions\r\n   ========================================================================== */\r\n/**\r\n * Add the correct display in IE 9-.\r\n * 1. Add the correct display in Edge, IE, and Firefox.\r\n * 2. Add the correct display in IE.\r\n */\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmain,\r\nmenu,\r\nnav,\r\nsection,\r\nsummary {\r\n  display: block;\r\n}\r\n/**\r\n * Add the correct display in iOS 4-7.\r\n */\r\naudio:not([controls]) {\r\n  display: none;\r\n  height: 0;\r\n}\r\n/**\r\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\r\n */\r\nprogress {\r\n  vertical-align: baseline;\r\n}\r\n/**\r\n * Add the correct display in IE 10-.\r\n * 1. Add the correct display in IE.\r\n */\r\ntemplate, /* 1 */\r\n[hidden] {\r\n  display: none;\r\n}\r\n/* Links\r\n   ========================================================================== */\r\n/**\r\n * 1. Remove the gray background on active links in IE 10.\r\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\r\n */\r\na {\r\n  background-color: transparent;\r\n  /* 1 */\r\n  -webkit-text-decoration-skip: objects;\r\n  /* 2 */\r\n  text-decoration: none;\r\n}\r\n/**\r\n * Remove the outline on focused links when they are also active or hovered\r\n * in all browsers (opinionated).\r\n */\r\na:active,\r\na:hover {\r\n  outline-width: 0;\r\n}\r\n/* Text-level semantics\r\n   ========================================================================== */\r\n/**\r\n * 1. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\r\n */\r\nabbr[title] {\r\n  text-decoration: underline;\r\n  /* 1 */\r\n  text-decoration: underline dotted;\r\n  /* 1 */\r\n}\r\n/**\r\n * Add the correct font weight in Chrome, Edge, and Safari.\r\n */\r\nb,\r\nstrong {\r\n  font-weight: bolder;\r\n}\r\n/**\r\n * Add the correct font style in Android 4.3-.\r\n */\r\ndfn {\r\n  font-style: italic;\r\n}\r\n/**\r\n * Add the correct font size in all browsers.\r\n */\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n/**\r\n * Prevent `sub` and `sup` elements from affecting the line height in\r\n * all browsers.\r\n */\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\nsup {\r\n  top: -0.5em;\r\n}\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n/* Embedded content\r\n   ========================================================================== */\r\n/**\r\n * Remove the border on images inside links in IE 10-.\r\n */\r\nimg {\r\n  border-style: none;\r\n}\r\n/**\r\n * Hide the overflow in IE.\r\n */\r\nsvg:not(:root) {\r\n  overflow: hidden;\r\n}\r\n/* Grouping content\r\n   ========================================================================== */\r\n/**\r\n * 1. Correct the inheritance and scaling of font size in all browsers.\r\n * 2. Correct the odd `em` font sizing in all browsers.\r\n */\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  /* 1 */\r\n  font-size: 1em;\r\n  /* 2 */\r\n}\r\n/**\r\n * 1. Contain overflow in all browsers.\r\n * 2. Improve readability of pre-formatted text in all browsers.\r\n */\r\npre {\r\n  overflow: auto;\r\n  /* 1 */\r\n  white-space: pre;\r\n  /* 2 */\r\n  white-space: pre-wrap;\r\n  /* 2 */\r\n  word-wrap: break-word;\r\n  /* 2 */\r\n}\r\n/* Forms\r\n   ========================================================================== */\r\n/**\r\n * 1. Correct color not being inherited.\r\n      Known issue: affects color of disabled elements.\r\n * 2. Change font properties to `inherit` in all browsers (opinionated).\r\n * 3. Remove the margin in Firefox and Safari.\r\n */\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  color: inherit;\r\n  /* 1 */\r\n  font: inherit;\r\n  /* 2 */\r\n  margin: 0;\r\n  /* 3 */\r\n  vertical-align: middle;\r\n}\r\n/**\r\n * Show the overflow in IE.\r\n * 1. Show the overflow in Edge.\r\n * 2. Show the overflow in Edge, Firefox, and IE.\r\n */\r\nbutton,\r\ninput,  /* 1 */\r\ninput {\r\n  /* 2 */\r\n  overflow: visible;\r\n}\r\n/**\r\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\r\n * 1. Remove the inheritance of text transform in Firefox.\r\n */\r\nbutton,\r\nselect {\r\n  /* 1 */\r\n  text-transform: none;\r\n}\r\n/**\r\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\r\n *    controls in Android 4.\r\n * 2. Correct the inability to style clickable types in iOS and Safari.\r\n */\r\nbutton,\r\nhtml [type=\"button\"], /* 1 */\r\n[type=\"reset\"],\r\n[type=\"submit\"] {\r\n  -webkit-appearance: button;\r\n  /* 2 */\r\n}\r\n/* Re-set default cursor for disabled elements. */\r\n[disabled] {\r\n  cursor: default;\r\n}\r\n/**\r\n * 1. Add the correct box sizing in IE 10-.\r\n * 2. Remove the padding in IE 10-.\r\n */\r\n[type=\"checkbox\"],\r\n[type=\"radio\"] {\r\n  box-sizing: border-box;\r\n  /* 1 */\r\n  padding: 0;\r\n  /* 2 */\r\n}\r\n/**\r\n * Correct the cursor style of increment and decrement buttons in Chrome.\r\n */\r\n[type=\"number\"]::-webkit-inner-spin-button,\r\n[type=\"number\"]::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n/**\r\n * 1. Correct the odd appearance in Chrome and Safari.\r\n * 2. Correct the outline style in Safari.\r\n */\r\n[type=\"search\"] {\r\n  -webkit-appearance: textfield;\r\n  /* 1 */\r\n  outline-offset: -2px;\r\n  /* 2 */\r\n}\r\n/**\r\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\r\n */\r\n[type=\"search\"]::-webkit-search-cancel-button,\r\n[type=\"search\"]::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n/**\r\n * 1. Correct the inability to style clickable types in iOS and Safari.\r\n * 2. Change font properties to `inherit` in Safari.\r\n */\r\n::-webkit-file-upload-button {\r\n  -webkit-appearance: button;\r\n  /* 1 */\r\n  font: inherit;\r\n  /* 2 */\r\n}\r\n/* 1. Remove default vertical scrollbar in IE 8/9/10/11. */\r\ntextarea {\r\n  overflow: auto;\r\n  /* 1 */\r\n  resize: none;\r\n  vertical-align: top;\r\n}\r\n/* Don\'t inherit the `font-weight` (applied by a rule above).\r\nNOTE: the default cannot safely be changed in Chrome and Safari on OS X. */\r\noptgroup {\r\n  font-weight: 700;\r\n}\r\n/* webkit focus outline */\r\ninput,\r\nselect,\r\ntextarea {\r\n  outline: 0;\r\n}\r\n/* Android 下 input focus 消除高亮外框 */\r\ntextarea,\r\ninput {\r\n  -webkit-user-modify: read-write-plaintext-only;\r\n}\r\ninput::-ms-clear,\r\ninput::-ms-reveal {\r\n  display: none;\r\n}\r\n/**\r\n * placeholder text color\r\n */\r\ninput:-ms-input-placeholder,\r\ntextarea:-ms-input-placeholder {\r\n  color: inherit;\r\n  opacity: 0.54;\r\n}\r\ninput::-webkit-input-placeholder,\r\ntextarea::-webkit-input-placeholder {\r\n  color: inherit;\r\n  opacity: 0.54;\r\n}\r\n/* table\r\n   ========================================================================== */\r\n/* Remove table cell spacing and padding */\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\ntd,\r\nth {\r\n  padding: 0;\r\n}\r\nh1, h2, h3, h4, h5, h6, p, figure, form, blockquote {\r\n  margin: 0;\r\n}\r\nul, ol, li, dl, dd {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nul, ol {\r\n  list-style: none outside none;\r\n}\r\nh1, h2, h3, h4, h5, h6 {\r\n  font-size: 100%;\r\n  font-weight: 400;\r\n  line-height: 2;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nhtml, body {\r\n  background-color: #fafafa;\r\n  -webkit-overflow-scrolling: touch;\r\n  -webkit-user-select: none;\r\n     -moz-user-select: none;\r\n      -ms-user-select: none;\r\n          user-select: none;\r\n}\r\na {\r\n  color: inherit;\r\n}\r\n.page-back {\r\n  display: inline-block;\r\n  top: 12px;\r\n  left: 10px;\r\n  position: absolute;\r\n  width: 40px;\r\n  height: 40px;\r\n  text-align: center;\r\n}\r\n.page-back i {\r\n  font-size: 24px;\r\n  line-height: 40px;\r\n}\r\n/* 自己写的公共的css样式 */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  -webkit-box-sizing: border-box;\r\n}\r\n\r\np {\r\n  font-size: 14px;\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  color: #8f8f94;\r\n}\r\n// 清除浮动\r\n.clearfix::before,\r\n.clearfix::after {\r\n  content: \"\";\r\n  clear: both;\r\n  /* 只有块级元素才管用 */\r\n  display: block;\r\n  height: 0;\r\n  line-height: 0;\r\n  visibility: hidden;\r\n}\r\n// 1行、2行溢出省略号，参考：https://www.jianshu.com/p/33284f21753d\r\n.ellipsis-1 {\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  white-space: normal!important;\r\n  text-overflow: ellipsis;\r\n  word-wrap: break-word;\r\n  /*! autoprefixer: off */\r\n  -webkit-box-orient: vertical;\r\n  /* autoprefixer: on */\r\n  -webkit-line-clamp: 1;\r\n}\r\n.ellipsis-2 {\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  white-space: normal!important;\r\n  text-overflow: ellipsis;\r\n  word-wrap: break-word;\r\n  /*! autoprefixer: off */\r\n  -webkit-box-orient: vertical;\r\n  /* autoprefixer: on */\r\n  -webkit-line-clamp: 2;\r\n}\r\n\r\nbody {\r\n  // body 公用样式\r\n  line-height: 21px;\r\n  color: #000;\r\n  background-color: #efeff4;\r\n  // body 全屏容器\r\n  position: absolute; /* absolute 基于最近的有定位的上级元素，这里会找到 window，所以这个是全屏容器  */\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  #app {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n}\r\n/* 版心 */\r\n.lt_container {\r\n  max-width: 1080px;\r\n  // max-width: 750px;\r\n  min-width: 320px;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n}\r\n\r\n/* 中间部分 */\r\n.lt_content {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-top: 45px;\r\n  padding-bottom: 55px;\r\n  /* lt_wrapper 用这个容器来承载内容，是因为 lt_content 容器有padding，如果lt_content的孩子有定位的话，依然会从lt_content的(0,0)位置开始计算而忽略padding，这样会不方便计算，所以在lt_content中加一个盒子(lt_wrapper) 来承载内容 */\r\n  .lt_wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #fff;\r\n    /* 在使用 mint-ui 时，页面中部分区域实现无限滚动时(infinite-scroll)，包裹 infinite-scroll 组件的div元素需要设置一个高度，并且overflow要为auto，不能为hidden(为hidden时滚动不了)*/\r\n    overflow: auto;\r\n  }\r\n}\r\n\r\n/* 产品容器 */\r\n.lt_product {\r\n  padding: 0 10px;\r\n  padding-bottom: 10px;\r\n}\r\n.lt_product ul {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  width: 100%;\r\n  li {\r\n    width: 50%;\r\n    float: left;\r\n    margin-top: 10px;\r\n    a{\r\n      display: block;\r\n      width: 100%;\r\n      /* height: 200px; */\r\n      box-shadow: 0 0 1px #666;\r\n      /* border: 1px solid #666; */\r\n    }\r\n  }\r\n  li:nth-child(2n+1) {\r\n    padding-right: 5px;\r\n  }\r\n  li:nth-child(2n+2) {\r\n    padding-left: 5px;\r\n  }\r\n  .loading {\r\n    text-align: center;\r\n    margin-top: 10px;\r\n    .mint-spinner-fading-circle {\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      margin-right:5px;\r\n    }\r\n  }\r\n}\r\n.lt_proBox {\r\n  padding-bottom: 5px;\r\n  img  {\r\n    width: 100%;\r\n    display: block;\r\n    color: #444;\r\n  }\r\n  .name {\r\n    padding: 0 5px;\r\n  }\r\n  .price {\r\n    font-size: 12px;\r\n    text-align: center;\r\n    .nowPrice {\r\n      color: red;\r\n    }\r\n    .oldPrice {\r\n      color: #ccc;\r\n      text-decoration: line-through;\r\n    }\r\n  }\r\n  button {\r\n    display: block;\r\n    margin: 0 auto;\r\n    background: #069;\r\n    border-color: #069;\r\n    color: #fff;\r\n  }\r\n}\r\n\r\n/* 搜索框 */\r\n.lt_search {\r\n  width: 100%;\r\n  padding: 10px;\r\n  position: relative;\r\n  input {\r\n    width: 100%;\r\n    height: 30px;\r\n    border: 1px solid #069;\r\n    border-radius: 2px;\r\n    background: #fff;\r\n    margin: 0;\r\n    padding: 0 70px 0 10px;\r\n    text-align: left;\r\n    font-size: 12px;\r\n  }\r\n  a{\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    width: 60px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    background: #069;\r\n    color: #fff;\r\n    font-size: 14px;\r\n    text-align: center;\r\n    /* border-radius: 0 2px 2px 0; */\r\n    border-top-right-radius: 2px;\r\n    border-bottom-right-radius: 2px;\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n```',32,100,'2019-04-12 08:17:03','2019-04-20 08:27:08'),(311,'## 首页\r\n### 引入封装 axios (并实现跨域)\r\n#### CDN 引入 axios\r\n在 index.html 中以 CDN 方式引入axios\r\n```\r\n...\r\n<script src=\"https://cdn.bootcss.com/mint-ui/2.2.13/index.js\"></script>\r\n<script src=\"https://cdn.bootcss.com/axios/0.18.0/axios.min.js\"></script>\r\n```\r\n#### 声明 axios 来自外部\r\n在 build/webpack.base.conf.js 中声明 axios 来自外部 (告诉webpack将来打包时，axios是从cdn引入的，不用从node_modules中去引入打包)\r\n```\r\nmodule.exports = {\r\n  context: path.resolve(__dirname, \'../\'),\r\n  entry: {\r\n    app: \'./src/main.js\'\r\n  },\r\n  externals: {\r\n    // \'mint-ui\': \'MINT\' // 配置了vue就不用配置mint-ui了\r\n    \'vue\': \'Vue\',\r\n    \'axios\': \'axios\'\r\n  }\r\n  ...\r\n}\r\n```\r\n#### 封装 axios 并实现开发环境的跨域\r\n前端域名：http://home.test:8080\r\n后端域名：http://home.test:3000\r\n前后端端口不同，因此产生了跨域问题\r\nsrc/assets/js/myaxios.js\r\n```\r\nimport Axios from \'axios\'\r\nvar myPlugin = {}\r\nmyPlugin.install = function (vue) {\r\n  // 创建axios实例\r\n  var instance = Axios.create({\r\n    // 开发环境中跨域解决方法：/api 代理成了 http://home.test:3000（代理在config/index.js中设置），这是 vue 内置的 devServer 服务器作为代理服务器，尤其代理请求实现了跨域\r\n    // 生产环境中跨域还需要在服务器中设置\r\n    baseURL: process.env.NODE_ENV === \'development\' ? \'/api\' : \'http://home.test:3000\'\r\n  })\r\n  vue.prototype.$http = instance\r\n}\r\n// 暴露\r\nexport default myPlugin\r\n\r\n```\r\n在 config/index.js 中设置代理服务器中 proxyTable 的内容\r\n```\r\nmodule.exports = {\r\n  dev: {\r\n    // Paths\r\n    assetsSubDirectory: \'static\',\r\n    assetsPublicPath: \'/\',\r\n    proxyTable: {\r\n      \'/api\': {\r\n        target: \'http://home.test:3000\',\r\n        // secure: true, //https必须添加这个设置\r\n        changeOrigin: true,\r\n        pathRewrite: {\r\n          \'^/api\': \'\'\r\n        }\r\n      }\r\n    }\r\n	...\r\n}\r\n```\r\n\r\n### 首页预览\r\n![](http://note.test/uploads/markdown/20190415-154831-189.png)\r\n### 首页代码 index.vue\r\nscr/views/index.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"none\" title=\"乐淘电商\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <div v-infinite-scroll=\"loadMore\" infinite-scroll-disabled=\"notScroll\" infinite-scroll-distance=\"10\">\r\n          <!-- 轮播图：记得设置轮播图组件 mt-swipe 的高度（必须设置高度） -->\r\n          <mt-swipe :auto=\"3000\">\r\n            <mt-swipe-item><a href=\"#\"><img src=\"@/images/banner1.png\" /></a></mt-swipe-item>\r\n            <mt-swipe-item><a href=\"#\"><img src=\"@/images/banner2.png\" /></a></mt-swipe-item>\r\n            <mt-swipe-item><a href=\"#\"><img src=\"@/images/banner3.png\" /></a></mt-swipe-item>\r\n            <mt-swipe-item><a href=\"#\"><img src=\"@/images/banner4.png\" /></a></mt-swipe-item>\r\n          </mt-swipe>\r\n          <!-- 导航栏：六宫格 -->\r\n          <div class=\"lt_nav clearfix\">\r\n            <a href=\"#\"><img src=\"@/images/nav1.png\" alt=\"\"></a>\r\n            <a href=\"#\"><img src=\"@/images/nav2.png\" alt=\"\"></a>\r\n            <a href=\"#\"><img src=\"@/images/nav3.png\" alt=\"\"></a>\r\n            <a href=\"#\"><img src=\"@/images/nav4.png\" alt=\"\"></a>\r\n            <a href=\"#\"><img src=\"@/images/nav5.png\" alt=\"\"></a>\r\n            <a href=\"#\"><img src=\"@/images/nav6.png\" alt=\"\"></a>\r\n          </div>\r\n          <!-- 产品区域 -->\r\n          <div class=\"lt_product\">\r\n            <ul class=\"mui-clearfix clearfix\">\r\n              <li>\r\n                <a href=\"#\" class=\"lt_proBox\">\r\n                  <img src=\"@/images/detail.jpg\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">¥100.00</span>\r\n                    <span class=\"oldPrice\">¥1000.00</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\" class=\"lt_proBox\">\r\n                  <img src=\"@/images/detail.jpg\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">¥100.00</span>\r\n                    <span class=\"oldPrice\">¥1000.00</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\" class=\"lt_proBox\">\r\n                  <img src=\"@/images/detail.jpg\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">¥100.00</span>\r\n                    <span class=\"oldPrice\">¥1000.00</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\" class=\"lt_proBox\">\r\n                  <img src=\"@/images/detail.jpg\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">¥100.00</span>\r\n                    <span class=\"oldPrice\">¥1000.00</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\" class=\"lt_proBox\">\r\n                  <img src=\"@/images/detail.jpg\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">adidas阿迪达斯 男式 场下休闲篮球鞋s83700</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">¥100.00</span>\r\n                    <span class=\"oldPrice\">¥1000.00</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n/*假设的设备  320px(5/5s) 375px(6/7/8) 414px(6/7/8plus) 768px(ipad) 1024px(ipad pro)，图片按 16:9 显示*/\r\n@media screen and (min-width: 320px) {\r\n  .mint-swipe {\r\n    height: 180px;\r\n  }\r\n}\r\n@media (min-width: 375px) {\r\n  .mint-swipe {\r\n    height: 211px;\r\n  }\r\n}\r\n@media (min-width: 414px) {\r\n  .mint-swipe {\r\n    height: 233px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .mint-swipe {\r\n    height: 432px;\r\n  }\r\n}\r\n@media (min-width: 1024px) {\r\n  .mint-swipe {\r\n    height: 576px;\r\n  }\r\n}\r\n// 轮播图\r\n.mint-swipe {\r\n  a {\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  }\r\n}\r\n// 导航栏：六宫格\r\n.lt_nav {\r\n  width: 100%;\r\n  padding: 10px;\r\n  padding-bottom: 0;\r\n  a {\r\n    float: left;\r\n    width: 33.3333%;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    display: block;\r\n  }\r\n}\r\n</style>\r\n\r\n```',32,100,'2019-04-15 15:49:36','2019-04-19 05:19:14'),(312,'## 分类\r\n### 分类预览\r\n![](http://note.test/uploads/markdown/20190416-043754-644.png)\r\n### 分类代码 categories.vue\r\nsrc/views/categories.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-search\" routeName=\"search\" title=\"商品分类\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <!-- 左侧 -->\r\n      <aside class=\"cateLeft\">\r\n        <ul ref=\"leftUl\">\r\n          <!-- router-link 会渲染成一下html代码\r\n            <li class=\"router-link-exact-active now\">\r\n              <a href=\"#/categories#1\">运动馆</a>\r\n            </li>\r\n            <li class=\"\">\r\n              <a href=\"#/categories#2\">女士馆</a>\r\n            </li>\r\n           -->\r\n          <router-link v-for=\"(item, index) in categories\" :key=\"index\" tag=\"li\" :to=\"\'#\'+item.id\" active-class=\"now\" @click.native=\"tapLeft(item.id, index)\">\r\n            <a>{ { item.categoryName } }</a>\r\n          </router-link>\r\n        </ul>\r\n      </aside>\r\n      <!-- 右侧 -->\r\n      <article class=\"cateRight\">\r\n        <ul>\r\n          <div v-if=\"secondCategories.length>0\">\r\n            <li v-for=\"item in secondCategories\" :key=\"item.id\">\r\n              <a href=\"#\">\r\n                <img :src=\"item.brandLogo\" alt=\"\">\r\n                <p>{ { item.brandName } }</p>\r\n              </a>\r\n            </li>\r\n          </div>\r\n          <p style=\"text-align: center; padding: 5px;\" v-else>还没有二级分类</p>\r\n        </ul>\r\n      </article>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      categories: [], // 一级分类\r\n      secondCategories: [], // 二级分类\r\n      init_category_id: \'\' // 默认显示哪个二级分类所对应的一级分类\r\n    }\r\n  },\r\n  components: {\r\n    Header,\r\n    Footer\r\n  },\r\n  methods: {\r\n    // 获取一级分类\r\n    getCategories () {\r\n      this.$http({\r\n        url: \'/category/queryTopCategory\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        this.categories = res.data.rows\r\n        this.getSecondCategories(res.data.rows[0].id) // 获取初始的二级分类\r\n        // 初始化或刷新时选中第一个一级类目\r\n        this.$nextTick(_ => {\r\n          this.$refs.leftUl.childNodes.forEach((element, index) => {\r\n            element.classList.remove(\'now\')\r\n            if (index === 0) {\r\n              element.classList.add(\'now\')\r\n            }\r\n          })\r\n        })\r\n      })\r\n    },\r\n    // 获取二级分类\r\n    getSecondCategories (id) {\r\n      this.$http({\r\n        url: \'/category/querySecondCategory\',\r\n        method: \'get\',\r\n        params: {\r\n          id: id\r\n        }\r\n      }).then(res => {\r\n        res.data.rows.forEach(element => {\r\n          element.brandLogo = \'http://home.test:3000\' + element.brandLogo\r\n        })\r\n        this.secondCategories = res.data.rows\r\n      })\r\n    },\r\n    // 点击一级分类\r\n    tapLeft (id, index) {\r\n      // H5 用dom元素的 classList 对象的原生链方法来操作 元素的类名。\r\n      this.$refs.leftUl.childNodes.forEach((element, index1) => {\r\n        element.classList.remove(\'now\')\r\n        if (index1 === index) {\r\n          element.classList.add(\'now\')\r\n        }\r\n      })\r\n      // 根据点击的一级分类，获取二级分类\r\n      this.getSecondCategories(id)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.getCategories()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.lt_content {\r\n  background: #fff;\r\n}\r\n/* 两栏自适应：左侧 */\r\n.cateLeft {\r\n  width: 90px;\r\n  height: 100%;\r\n  float: left;\r\n  overflow: hidden;\r\n  ul {\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    li {\r\n      width: 90px;\r\n      height: 50px;\r\n      line-height: 50px;\r\n      background: #f3f4f5;\r\n      border-right: 1px solid #ccc;\r\n      border-bottom: 1px solid #ccc;\r\n      a {\r\n        display: block;\r\n        text-align: center;\r\n        color: #666;\r\n        font-size: 12px;\r\n      }\r\n      &.now {\r\n        border-right: none;\r\n        background: #fff;\r\n        a {\r\n          color: red;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* 两栏自适应：右侧 */\r\n.cateRight {\r\n  overflow: hidden;\r\n  height: 100%;\r\n  ul {\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    li {\r\n      width: 33.3333%;\r\n      float: left;\r\n      a {\r\n        display: block;\r\n        width: 100%;\r\n        img {\r\n          display: block;\r\n          width: 60px;\r\n          height: 60px;\r\n          margin: 0 auto;\r\n        }\r\n        p {\r\n          font-size: 12px;\r\n          color: #666;\r\n          text-align: center;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n```',32,100,'2019-04-15 16:04:08','2019-04-19 03:54:36'),(313,'## 搜索中心\r\n### 搜索中心路由\r\nsrc/router/index.js\r\n```\r\n// 搜索页\r\nimport Search from \'@/views/search\'\r\n...\r\n    {\r\n      path: \'/search\',\r\n      name: \'search\',\r\n      component: Search\r\n    },\r\n```\r\n### 搜索中心预览\r\n![](http://note.test/uploads/markdown/20190416-091601-775.png)\r\n### 搜索中心代码 search.vue\r\nsrc/views/search.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-search\" routeName=\"search\" title=\"搜索中心\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <!-- 搜索框 -->\r\n        <div class=\"lt_search\">\r\n          <input type=\"search\" placeholder=\"根据商品关键字进行搜索\" v-model=\"inputValue\">\r\n          <a href=\"javascript:;\" @click=\"search\">搜索</a>\r\n        </div>\r\n        <!-- 搜索历史 -->\r\n        <div class=\"lt_history\">\r\n          <div v-if=\"list.length\">\r\n            <div class=\"tit\">\r\n              <span>搜索历史</span>\r\n              <a href=\"javascript:;\" @click=\"clear\"><span class=\"fa fa-trash\"></span> 清空历史</a>\r\n            </div>\r\n            <ul class=\"con\">\r\n              <li v-for=\"(item, index) in list\" :key=\"index\">\r\n                <router-link :to=\"{name: \'searchList\', query: {key: encodeURIComponent(item)} }\">{ { item } }</router-link>\r\n                <span class=\"fa fa-close\" @click=\"del(index)\"></span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div v-else>\r\n            <div class=\"tit\">\r\n              <span>您没有搜索记录</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      inputValue: \'\',\r\n      KEY: \'key_search_keywords\', // 约定好 localstorage 的存储key\r\n      list: []\r\n    }\r\n  },\r\n  components: {\r\n    Header,\r\n    Footer\r\n  },\r\n  methods: {\r\n    // 追加搜索历史，跳转搜索列表页\r\n    search () {\r\n      // 1.校验数据\r\n      if (!this.inputValue) {\r\n        // 友好提示\r\n        this.$toast(\'请输入搜索关键字\')\r\n        // 终止执行\r\n        return\r\n      }\r\n      // 2.跳转\r\n      // 注意对【传参】进行URL编码，以过滤特殊字符的影响，如 & 、 = 等\r\n      // window.location.href = \'/searchList?key=\' + encodeURIComponent(this.inputValue)\r\n      this.$router.push({name: \'searchList\', query: {key: encodeURIComponent(this.inputValue)} })\r\n      // 3.追加历史\r\n      this.add()\r\n    },\r\n    // 追加搜索历史\r\n    add () {\r\n      var isSame = false\r\n      var sameIndex = null\r\n      this.list.forEach((element, i) => {\r\n        if (element === this.inputValue) {\r\n          isSame = true\r\n          sameIndex = i\r\n        }\r\n      })\r\n      if (isSame) {\r\n        // 有重复：先删除，后追加\r\n        this.list.splice(sameIndex, 1)\r\n      } else {\r\n        // 没有重复\r\n        if (this.list.length >= 10) {\r\n          // 超过10条，先删除最早的一条，再追加\r\n          this.list.splice(this.list.length - 1, 1)\r\n        }\r\n      }\r\n      // 追加\r\n      this.list.unshift(this.inputValue) // 数组头部插入\r\n      // 存储\r\n      window.localStorage.setItem(this.KEY, JSON.stringify(this.list))\r\n    },\r\n    // 删除某条历史记录\r\n    del (index) {\r\n      this.list.splice(index, 1)\r\n      window.localStorage.setItem(this.KEY, JSON.stringify(this.list))\r\n    },\r\n    // 清空历史记录\r\n    clear () {\r\n      this.list = []\r\n      window.localStorage.setItem(this.KEY, JSON.stringify(this.list))\r\n    }\r\n  },\r\n  created () {\r\n    this.list = JSON.parse(localStorage.getItem(this.KEY) || \'[]\')\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.lt_content {\r\n  background: #fff;\r\n}\r\n/* 搜索框 */\r\n.lt_search {\r\n  width: 100%;\r\n  padding: 10px;\r\n  position: relative;\r\n  input {\r\n    width: 100%;\r\n    height: 30px;\r\n    border: 1px solid #069;\r\n    border-radius: 2px;\r\n    background: #fff;\r\n    margin: 0;\r\n    padding: 0 70px 0 10px;\r\n    text-align: left;\r\n    font-size: 12px;\r\n  }\r\n  a{\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    width: 60px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    background: #069;\r\n    color: #fff;\r\n    font-size: 14px;\r\n    text-align: center;\r\n    /* border-radius: 0 2px 2px 0; */\r\n    border-top-right-radius: 2px;\r\n    border-bottom-right-radius: 2px;\r\n  }\r\n}\r\n// 搜索历史\r\n.lt_history {\r\n  padding: 0 10px;\r\n  .tit {\r\n    font-size: 12px;\r\n    span {\r\n      color: #666;\r\n    }\r\n    a {\r\n      color: #666;\r\n      float: right;\r\n    }\r\n  }\r\n  .con {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    border: 1px dashed #ccc;\r\n    border-bottom: none;\r\n    li {\r\n      border-bottom: 1px dashed #ccc;\r\n      height: 30px;\r\n      line-height: 30px;\r\n      padding: 0 10px;\r\n      position: relative;\r\n      a {\r\n        font-size: 12px;\r\n      }\r\n      span {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        width: 30px;\r\n        font-size: 12px;\r\n        color: #666;\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n```',32,100,'2019-04-16 09:16:51','2019-04-19 03:54:17'),(314,'## 搜索结果页（下拉刷新 上拉加载）\r\n### 结果页路由\r\nsrc/router/index.js\r\n```\r\nimport SearchList from \'@/views/searchList\'\r\n...\r\n	// 搜索结果页\r\n    {\r\n      path: \'/searchList\',\r\n      name: \'searchList\',\r\n      component: SearchList\r\n    }\r\n```\r\n### 结果页预览\r\n![](http://note.test/uploads/markdown/20190419-034630-816.png)\r\n### 封装了一个插件 GetParamsByUrl\r\nsrc/assets/js/utils.js 用来获取地址栏参数。其实可以直接用 $route 获取路由参数，只是熟练一下封装插件的熟悉程度。\r\n```\r\nimport router from \'@/router/index.js\'\r\n\r\nvar myPlugin = {}\r\nmyPlugin.install = function (Vue) {\r\n  Vue.prototype.$utils = {\r\n    // 封装一个获取地址栏传参的方法\r\n    GetParamsByUrl: () => {\r\n      return router.currentRoute.query\r\n    }\r\n  }\r\n}\r\n// 暴露\r\nexport default myPlugin\r\n\r\n```\r\n### 结果页代码 searchList.vue\r\nsrc/views/searchList.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-search\" routeName=\"search\" title=\"商品列表\"/>\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content for_search_list\">\r\n      <div class=\"lt_wrapper\">\r\n        <!-- 注意：滚动组件 mint-loadMore 的父容器必须设置高度 -->\r\n        <!-- mint-loadmore 配置参考网址: https://github.com/mint-ui/mint-loadmore -->\r\n        <mt-loadmore :top-method=\"loadTop\" :bottom-method=\"loadBottom\" :bottom-all-loaded=\"allLoaded\" ref=\"loadmore\" :autoFill=\"isAutoFill\" :topPullText=\"topPullText\" :bottomPullText=\"bottomPullText\" :topDropText=\"topDropText\" :bottomDropText=\"bottomDropText\">\r\n          <!-- 搜索框 -->\r\n          <div class=\"lt_search\">\r\n            <input type=\"search\" placeholder=\"根据商品关键字进行搜索\" v-model=\"inputValue\">\r\n            <a href=\"javascript:;\" @click=\"search\">搜索</a>\r\n          </div>\r\n          <!-- 排序区域 -->\r\n          <div class=\"lt_order\" @click=\"orderChange\">\r\n            <a data-type=\"time\" href=\"javascript:;\" class=\"now\">上架时间 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"price\" href=\"javascript:;\">价格 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"num\" href=\"javascript:;\">销量 <span class=\"fa fa-angle-down\"></span></a>\r\n            <a data-type=\"sale\" href=\"javascript:;\">折扣 <span class=\"fa fa-angle-down\"></span></a>\r\n          </div>\r\n          <!-- 产品区域 -->\r\n          <div class=\"lt_product\">\r\n            <ul class=\"clearfix\" v-if=\"isLoading\">\r\n              <p class=\"loading\">\r\n                <mt-spinner type=\"fading-circle\" size=\"17\"></mt-spinner>\r\n                <span class=\"loadingText\">正在加载中...</span>\r\n              </p>\r\n            </ul>\r\n            <ul class=\"clearfix\" v-if=\"productList.length\">\r\n              <li v-for=\"item in productList\" :key=\"item.id\">\r\n                <router-link :to=\"{name: \'product\', query: {productId: item.id} }\" class=\"lt_proBox\">\r\n                  <img :src=\"item.defaultPicAddr\" alt=\"\">\r\n                  <p class=\"name ellipsis-2\">{ { item.proName } }</p>\r\n                  <p class=\"price\">\r\n                    <span class=\"nowPrice\">{ { item.price } }</span>\r\n                    <span class=\"oldPrice\">{ { item.oldPrice } }</span>\r\n                  </p>\r\n                  <mt-button type=\"primary\" size=\"small\">立即购买</mt-button>\r\n                </router-link>\r\n              </li>\r\n            </ul>\r\n            <ul class=\"clearfix\" v-if=\"!isLoading && productList.length === 0\">\r\n              <p class=\"loading\">很遗憾，没有您要找的商品</p>\r\n            </ul>\r\n          </div>\r\n          <!-- 底线区 -->\r\n          <div class=\"nomore\" v-if=\"allLoaded\">\r\n            <span class=\"line\"></span>\r\n            <span class=\"lineText\">\r\n              我是有底线的\r\n            </span>\r\n          </div>\r\n        </mt-loadmore>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入自定义插件：getParamsByUrl\r\nimport Vue from \'vue\'\r\nimport GetParamsByUrl from \'@/assets/js/utils.js\'\r\n// 注册 GetParamsByUrl 插件\r\nVue.use(GetParamsByUrl)\r\nexport default {\r\n  data () {\r\n    return {\r\n      isLoading: false,\r\n      productList: [],\r\n      arr: [1, 2],\r\n      allLoaded: false, // 数据是否已经加载完毕，加载完毕后，将禁用“上拉加载更多”\r\n      isAutoFill: false, // 页面初始化时，是否自动触发上拉加载更多\r\n      topPullText: \'↓ 下拉刷新\',\r\n      topDropText: \'↑ 释放更新\',\r\n      bottomPullText: \'↑ 上拉加载更多\',\r\n      bottomDropText: \'↓ 释放更新\',\r\n      proName: \'\', // 搜索关键字\r\n      page: 1,\r\n      pageSize: 4,\r\n      orderType: \'time\',\r\n      orderValue: 2,\r\n      // 搜索区\r\n      inputValue: \'\',\r\n      KEY: \'key_search_keywords\', // 约定好 localstorage 的存储key\r\n      list: [] // 历史记录\r\n    }\r\n  },\r\n  created () {\r\n    this.inputValue = decodeURIComponent(this.$utils.GetParamsByUrl().key) || \'\' // 绕个路，自己封装一个插件来获取 路由参数\r\n    // this.inputValue = decodeURIComponent(this.$route.query.key) || \'\' // 直接用 $route 获取路由参数\r\n    this.proName = this.inputValue\r\n    // 开始加载：这个放在 refresh() 的外面是为了避免下拉刷新时，出现2个加载中的圆圈效果（一个是下拉加载自动的圆圈，一个是自定义isLoading的spinner的圆圈）\r\n    this.isLoading = true\r\n    this.refresh()\r\n    this.list = JSON.parse(localStorage.getItem(this.KEY) || \'[]\')\r\n  },\r\n  methods: {\r\n    // 下拉刷新\r\n    loadTop () {\r\n      this.refresh()\r\n    },\r\n    // 上拉加载更多\r\n    loadBottom () {\r\n      this.loadMore()\r\n    },\r\n    // 刷新\r\n    refresh () {\r\n      // 重置 allLoaded page\r\n      this.allLoaded = false\r\n      this.page = 1\r\n      var params = {\r\n        proName: this.proName,\r\n        page: this.page,\r\n        pageSize: this.pageSize\r\n      }\r\n      params[this.orderType] = this.orderValue\r\n      this.$http({\r\n        url: \'/product/queryProduct\',\r\n        method: \'get\',\r\n        params: params\r\n      }).then(res => {\r\n        // 模拟网络很慢\r\n        setTimeout(() => {\r\n          res.data.data.forEach(element => { // 为每个产品加一个封面图片\r\n            element.defaultPicAddr = \'http://home.test:3000/mobile/images/none01.jpg\'\r\n            if (element.pic && element.pic[0] && element.pic[0].picAddr) {\r\n              element.defaultPicAddr = \'http://home.test:3000\' + element.pic[0].picAddr\r\n            }\r\n          })\r\n          this.productList = res.data.data\r\n          this.isLoading = false // 加载结束\r\n          this.$refs.loadmore.onTopLoaded() // 必须有这一句，表示下拉刷新结束\r\n        }, 1500)\r\n      })\r\n    },\r\n    // 加载更多\r\n    loadMore () {\r\n      this.page++\r\n      var params = {\r\n        proName: this.proName,\r\n        page: this.page,\r\n        pageSize: this.pageSize\r\n      }\r\n      params[this.orderType] = this.orderValue\r\n      this.$http({\r\n        url: \'/product/queryProduct\',\r\n        method: \'get\',\r\n        params: params\r\n      }).then(res => {\r\n        // 模拟网络很慢\r\n        setTimeout(() => {\r\n          // 如果请求到数据则累加\r\n          if (res.data.data.length) {\r\n            res.data.data.forEach(element => { // 为每个产品加一个封面图片\r\n              element.defaultPicAddr = \'http://home.test:3000/mobile/images/none01.jpg\'\r\n              if (element.pic && element.pic[0] && element.pic[0].picAddr) {\r\n                element.defaultPicAddr = \'http://home.test:3000\' + element.pic[0].picAddr\r\n              }\r\n            })\r\n            // 产品列表累加\r\n            this.productList = this.productList.concat(res.data.data)\r\n          }\r\n          // 如果产品列表长度 等于 数据库总产品条数，则表示已经加载完所所有数据\r\n          if (this.productList.length === res.data.count) {\r\n            this.allLoaded = true\r\n          }\r\n          // 必须有这一句，表示上拉加载结束。\r\n          // 【注意】: onBottomLoaded() 这一句必须放在异步回调(then)之中，如果放在then之后，会导致上拉加载提前结束，结束后再给this.productList赋值，再驱动渲染页面。\r\n          // 这样做会导致：先结束了上拉加载效果，然后再增加更多内容来渲染页面，而此时由于上拉已经结束了，后面的页面渲染不会使mint-loadmore组件发生位移，也就是加载的更多内容，不会漏出来。\r\n          this.$refs.loadmore.onBottomLoaded()\r\n        }, 1500)\r\n      })\r\n    },\r\n    // 追加搜索历史，跳转搜索列表页\r\n    search () {\r\n      // 1.校验数据\r\n      if (!this.inputValue) {\r\n        // 友好提示\r\n        this.$toast(\'请输入搜索关键字\')\r\n        // 终止执行\r\n        return\r\n      }\r\n      // 2.跳转\r\n      // 注意对【传参】进行URL编码，以过滤特殊字符的影响，如 & 、 = 等\r\n      // window.location.href = \'/searchList?key=\' + encodeURIComponent(this.inputValue)\r\n      this.$router.push({name: \'searchList\', query: {key: encodeURIComponent(this.inputValue)} })\r\n      // 3.刷新：上一步跳转的路由没有变化，知识参数变化，所有没有向后端请求数据，这里主动请求刷新一下\r\n      this.proName = this.inputValue\r\n      this.productList = []\r\n      // 开始加载：这个放在 refresh() 的外面是为了避免下拉刷新时，出现2个加载中的圆圈效果（一个是下拉加载自动的圆圈，一个是自定义isLoading的spinner的圆圈）\r\n      this.isLoading = true\r\n      this.refresh()\r\n      // 4.追加历史\r\n      this.add()\r\n    },\r\n    // 追加搜索历史\r\n    add () {\r\n      var isSame = false\r\n      var sameIndex = null\r\n      this.list.forEach((element, i) => {\r\n        if (element === this.inputValue) {\r\n          isSame = true\r\n          sameIndex = i\r\n        }\r\n      })\r\n      if (isSame) {\r\n        // 有重复：先删除，后追加\r\n        this.list.splice(sameIndex, 1)\r\n      } else {\r\n        // 没有重复\r\n        if (this.list.length >= 10) {\r\n          // 超过10条，先删除最早的一条，再追加\r\n          this.list.splice(this.list.length - 1, 1)\r\n        }\r\n      }\r\n      // 追加\r\n      this.list.unshift(this.inputValue) // 数组头部插入\r\n      // 存储\r\n      window.localStorage.setItem(this.KEY, JSON.stringify(this.list))\r\n    },\r\n    // 排序功能\r\n    orderChange (e) {\r\n      var a = e.target\r\n      var span = a.querySelector(\'span\')\r\n      // 点击的选中的(有now的)，则切换箭头朝向；点击未选中的，则移除所有的now并重置其箭头(朝下)，给当前加 now\r\n      if (e.target.classList.contains(\'now\')) {\r\n        // 切换箭头朝向\r\n        if (span.classList.contains(\'fa-angle-down\')) {\r\n          span.classList.remove(\'fa-angle-down\')\r\n          span.classList.add(\'fa-angle-up\')\r\n        } else {\r\n          span.classList.add(\'fa-angle-down\')\r\n          span.classList.remove(\'fa-angle-up\')\r\n        }\r\n      } else {\r\n        // 重置：移除所有now，将所有箭头朝向\r\n        a.parentNode.querySelectorAll(\'a\').forEach((item) => {\r\n          item.classList.remove(\'now\')\r\n          var spanInItem = item.querySelector(\'span\')\r\n          if (spanInItem.classList.contains(\'fa-angle-up\')) {\r\n            spanInItem.classList.remove(\'fa-angle-up\')\r\n            spanInItem.classList.add(\'fa-angle-down\')\r\n          }\r\n        })\r\n        // 给当前加 now\r\n        a.classList.add(\'now\')\r\n      }\r\n      // 获取最终的 orderType  和 orderValue\r\n      // 排序参数：price 1升序 2降序；num 1升序 2降序\r\n      this.orderType = a.dataset.type\r\n      this.orderValue = span.classList.contains(\'fa-angle-down\') ? 2 : 1\r\n      // 开始加载：这个放在 refresh() 的外面是为了避免下拉刷新时，出现2个加载中的圆圈效果（一个是下拉加载自动的圆圈，一个是自定义isLoading的spinner的圆圈）\r\n      this.isLoading = true\r\n      this.refresh()\r\n    }\r\n  },\r\n  components: {\r\n    Header\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n/* 排序区域 */\r\n.for_search_list {\r\n  padding-bottom: 0;\r\n  .lt_wrapper {\r\n    overflow: scroll;\r\n  }\r\n}\r\n.lt_order {\r\n  width: 100%;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  background: #ddd;\r\n  a {\r\n    float: left;\r\n    width: 25%;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    color: #666;\r\n  }\r\n  a.now {\r\n    color: red;\r\n  }\r\n}\r\n/* 底线区 */\r\n.nomore {\r\n  position: relative;\r\n  height: 30px;\r\n  .line {\r\n    border-top: 1px dashed #ccc;\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 14px;\r\n  }\r\n  .lineText {\r\n    background: #fff;\r\n    margin: 0 auto;\r\n    display: block;\r\n    width: 100px;\r\n    text-align: center;\r\n    line-height: 30px;\r\n    position: relative;\r\n    z-index: 999;\r\n  }\r\n}\r\n</style>\r\n\r\n```\r\n### 顺带安装一下 fastclick.js\r\n安装 fastclick.js\r\n```\r\nyarn add fastclick\r\n```\r\n在 src/main.js 中引入 fastclick.js\r\n```\r\nimport FastClick from \'fastclick\'\r\nFastClick.attach(document.body)\r\n```\r\n###  fastclick.js 带来的问题\r\n安装  fastclick.js 之后，如果快速点击click的话，会出现如下警告提示（报错提示）：\r\n```\r\nUnable to preventDefault inside passive event listener due to target being treated as passive\r\n```\r\n所以，没有一定需要是，暂时先不要引入  fastclick.js',32,100,'2019-04-19 03:53:47','2019-04-24 05:25:41'),(315,'## 框架使用中的经验问题\r\n### 在 vue 中 使用 mui 的问题\r\n![](http://note.test/uploads/markdown/20190421-072613-521.png)',30,100,'2019-04-21 07:26:17','2019-04-21 07:26:17'),(316,'## 产品详情页\r\n### 详情页路由\r\nsrc/router/index.js\r\n```\r\nimport Product from \'@/views/product.vue\'\r\n...\r\n    // 产品详情页\r\n    {\r\n      path: \'/product\',\r\n      name: \'product\',\r\n      component: Product\r\n    }\r\n```\r\n### 详情页预览\r\n![](http://note.test/uploads/markdown/20190424-054718-100.png)\r\n### 详情页代码 product.vue\r\nsrc/views/product.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-home\" routeName=\"index\" title=\"商品详情\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <!-- 加载效果 -->\r\n        <div class=\"clearfix\" v-if=\"isLoading\">\r\n          <p class=\"loading\">\r\n            <mt-spinner type=\"fading-circle\" size=\"17\"></mt-spinner>\r\n            <span class=\"loadingText\">正在加载中...</span>\r\n          </p>\r\n        </div>\r\n        <!-- 下拉刷新 -->\r\n        <mt-loadmore v-if=\"product.proName\" ref=\"loadmore\" :top-method=\"loadTop\" :topPullText=\"topPullText\" :topDropText=\"topDropText\">\r\n          <!-- 轮播图：记得设置轮播图组件 mt-swipe 的高度（必须设置高度） -->\r\n          <mt-swipe :auto=\"3000\">\r\n            <mt-swipe-item v-for=\"(item, index) in product.pic\" :key=\"index\" >\r\n              <a href=\"javascript:;\"><img :src=\"item.picAddr\" /></a>\r\n            </mt-swipe-item>\r\n          </mt-swipe>\r\n          <!-- 商品名称 -->\r\n          <div class=\"pro_name\">\r\n            <p class=\"mui-ellipsis-2\">{ { product.proName } }</p>\r\n          </div>\r\n          <!-- 商品价格 -->\r\n          <div class=\"pro_price\">\r\n            价格：<span class=\"now\">¥{ { product.price } }</span> <span class=\"old\"> ¥{ { product.oldPrice } }</span>\r\n          </div>\r\n          <!-- 商品尺码 -->\r\n          <div class=\"pro_size\" ref=\"size\" @click=\"sizeChange\">\r\n            尺码：\r\n            <i v-for=\"(item, index) in product.sizeArr\" :key=\"index\">\r\n              <span :class=\"currentSize == item ? \'now\': \'\'\" :data-size=\"item\">{ { item } }</span> \r\n            </i>\r\n          </div>\r\n          <!-- 商品数量 -->\r\n          <div class=\"pro_num\">\r\n            <span>数量：</span>\r\n            <p class=\"box\">\r\n              <span class=\"reduce\" @click=\"reduce\">-</span>\r\n              <input class=\"orderNum\" type=\"number\" v-model=\"inputValue\" readonly>\r\n              <span class=\"plus\" @click=\"plus\">+</span>\r\n            </p>\r\n            <span>剩余：</span>\r\n            <p class=\"rest\">{ { product.num } }</p>\r\n            <span>件</span>\r\n          </div>\r\n        </mt-loadmore>\r\n      </div>\r\n    </div>\r\n    <!-- 底部操作 -->\r\n    <div class=\"lt_btn\">\r\n      <router-link class=\"btn_cart\" :to=\"{name: \'cart\'}\"><span class=\"fa fa-shopping-cart\"></span></router-link>\r\n      <div class=\"btn_box\">\r\n        <a @click=\"addCart\" class=\"addCart\" href=\"javascript:;\">加入购物车</a>\r\n        <a class=\"pay\" href=\"javascript:;\">立即支付</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      isLoading: false,\r\n      topPullText: \'↓ 下拉刷新\',\r\n      topDropText: \'↑ 释放更新\',\r\n      productId: null,\r\n      product: {},\r\n      currentSize: null,\r\n      inputValue: 1,\r\n      stockNum: 0 // 库存数量\r\n    }\r\n  },\r\n  created () {\r\n    this.productId = this.$route.query.productId // 获取问号参数\r\n    this.currentSize = this.$route.query.size // 获取问号参数\r\n    // 开始加载\r\n    this.isLoading = true\r\n    this.refresh()\r\n  },\r\n  mounted () {\r\n    setTimeout(() => {\r\n      this.isLoading = false\r\n    }, 1500)\r\n  },\r\n  methods: {\r\n    loadTop () {\r\n      this.refresh()\r\n    },\r\n    refresh () {\r\n      this.$http({\r\n        url: \'/product/queryProductDetail\',\r\n        method: \'get\',\r\n        params: {\r\n          id: this.productId\r\n        }\r\n      }).then((res) => {\r\n        setTimeout(() => {\r\n          // 处理图片地址\r\n          if (res.data.pic && res.data.pic[0] && res.data.pic[0].picAddr) {\r\n            res.data.pic.forEach(element => {\r\n              element.picAddr = \'http://home.test:3000\' + element.picAddr\r\n            })\r\n          } else {\r\n            res.data.pic[0].picAddr = \'http://home.test:3000/mobile/images/none01.jpg\'\r\n          }\r\n          // 处理尺码\r\n          var sizeArr = res.data.size.split(\'-\')\r\n          var arr = []\r\n          for (var i = sizeArr[0]; i <= sizeArr[1]; i++) {\r\n            arr.push(i)\r\n          }\r\n          res.data.sizeArr = arr\r\n          // 赋值\r\n          this.product = res.data\r\n          this.stockNum = res.data.num\r\n          this.isLoading = false // 加载结束\r\n          this.$nextTick(() => { // 因为 mt-loadmore 用了v-if, 所以需要等 dom 渲染之后，再用 $refs 才能取得到\r\n            this.$refs.loadmore.onTopLoaded() // 必须有这一句，表示下拉刷新结束\r\n          })\r\n        }, 1500)\r\n      })\r\n    },\r\n    // 选择尺寸\r\n    sizeChange (e) {\r\n      if (e.target.nodeName === \'SPAN\') {\r\n        // 先去掉 now\r\n        if (this.$refs.size.querySelector(\'.now\')) {\r\n          this.$refs.size.querySelector(\'.now\').classList.remove(\'now\')\r\n        }\r\n        // 再加上 now\r\n        e.target.classList.add(\'now\')\r\n        // 改变 currentSize\r\n        this.currentSize = e.target.dataset.size\r\n        // 操作地址栏\r\n        var newUrl = \'/#/product?productId=\' + this.productId + \'&size=\' + e.target.dataset.size\r\n        window.history.replaceState(null, null, newUrl)\r\n        console.log(this.currentSize)\r\n      }\r\n    },\r\n    // 数量减1\r\n    reduce () {\r\n      if (this.inputValue - 1 >= 1) {\r\n        this.inputValue -= 1\r\n      }\r\n    },\r\n    // 数量加1\r\n    plus () {\r\n      if (this.inputValue + 1 <= this.stockNum) {\r\n        this.inputValue += 1\r\n      }\r\n    },\r\n    // 加入购物车\r\n    addCart () {\r\n      var data = {\r\n        productId: this.productId,\r\n        size: this.currentSize,\r\n        num: this.inputValue\r\n      }\r\n      if (!data.size) {\r\n        this.$toast(\'请选择尺码\')\r\n        return // 终止向下执行\r\n      }\r\n      this.$http({\r\n        url: \'/cart/addCart\',\r\n        method: \'post\',\r\n        data: data\r\n      }).then(res => {\r\n        if (res.data.success === true) {\r\n          this.$router.push({name: \'cart\'})\r\n        } else {\r\n          this.$$toast(\'加入购物车失败！\')\r\n        }\r\n      })\r\n    }\r\n  },\r\n  components: {\r\n    Header\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n/*假设的设备  320px(5/5s) 375px(6/7/8) 414px(6/7/8plus) 768px(ipad) 1024px(ipad pro)，图片按 16:9 显示*/\r\n@media screen and (min-width: 320px) {\r\n  .mint-swipe {\r\n    height: 320px;\r\n  }\r\n}\r\n@media (min-width: 375px) {\r\n  .mint-swipe {\r\n    height: 375px;\r\n  }\r\n}\r\n@media (min-width: 414px) {\r\n  .mint-swipe {\r\n    height: 414px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .mint-swipe {\r\n    height: 768px;\r\n  }\r\n}\r\n@media (min-width: 1024px) {\r\n  .mint-swipe {\r\n    height: 1024px;\r\n  }\r\n}\r\n.mint-swipe {\r\n  a {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    img {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n[class ^= \"pro_\"] {\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.pro_name p {\r\n  font-size: 20px;\r\n  margin-top: 10xp;\r\n  color: #ccc;\r\n}\r\n.pro_price {\r\n  .now {\r\n    font-size: 20px;\r\n    color: red;\r\n  }\r\n  .old {\r\n    font-size: 12px;\r\n    color: #666;\r\n    text-decoration: line-through;\r\n  }\r\n}\r\n\r\n.pro_size {\r\n  span {\r\n    font-size: 12px;\r\n    padding: 5px; /* 行内元素可以用 padding 撑开宽高 */\r\n    border: 1px solid #666666;\r\n    line-height: 32px;\r\n  }\r\n  span.now {\r\n    background: #fa0;\r\n  }\r\n}\r\n.pro_num {\r\n  height: 50px;\r\n  &>span {\r\n    float: left;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    font-size: 17px;\r\n  }\r\n  .box {\r\n    /* display: inline-block; */\r\n    float: left;\r\n    vertical-align: middle;\r\n    border: 1px solid #ccc;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 30px;\r\n    margin-right: 10px;\r\n    span {\r\n      float: left;\r\n      width: 30px;\r\n      height: 28px;\r\n      line-height: 28px;\r\n      text-align: center;\r\n      font-size: 12px;\r\n      color: #333;\r\n    }\r\n    input.orderNum {\r\n      float: left;\r\n      padding: 0;\r\n      margin: 0;\r\n      border: none;\r\n      border-radius: 0;\r\n      border-right: 1px solid #ccc;\r\n      border-left: 1px solid #ccc;\r\n      width: 28px;\r\n      height: 28px;\r\n      text-align: center;\r\n    }\r\n  }\r\n  p.rest {\r\n    float: left;\r\n    font-size: 17px;\r\n    margin: 0;\r\n    color: #333;\r\n    line-height: 30px;\r\n    height: 30px;\r\n    margin-right: 3px;\r\n  }\r\n}\r\n/* 操作按钮区域: 两栏自适应，一栏固定宽度，一栏overflow: hidden */\r\n.lt_btn {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  height: 55px;\r\n  line-height: 55px;\r\n  width: 100%;\r\n  border-top: 1px solid #ccc;\r\n  background: #f3f4f5;\r\n  .btn_cart {\r\n    width: 55px;\r\n    height: 54px;\r\n    text-align: center;\r\n    float: left;\r\n  }\r\n  .btn_box {\r\n    overflow: hidden;\r\n    padding-right:10px;\r\n    a {\r\n      width: 48%;\r\n      height: 44px;\r\n      line-height: 44px;\r\n      float: left;\r\n      color: #fff;\r\n      text-align: center;\r\n      margin-top: 5px;\r\n      border-radius: 4px;\r\n    }\r\n    a.addCart {\r\n      background: #991020;\r\n      margin-right: 4%;\r\n    }\r\n    a.pay {\r\n      background: #fa672d;\r\n    }\r\n  }\r\n}\r\n</style>\r\n```',32,100,'2019-04-24 05:48:40','2019-04-24 05:49:26'),(317,'## 登录页\r\n### 登录页路由\r\n```\r\nimport Login from \'@/views/login.vue\'\r\n...\r\n    {\r\n      path: \'/login\',\r\n      name: \'login\',\r\n      component: Login\r\n    }\r\n```\r\n### 登录页预览\r\n![](http://note.test/uploads/markdown/20190424-055424-227.png)\r\n### 登录页使用了 mui 的样式 (需引入 mui)\r\n由于 mint-ui 没有布局样式，故而使用 mui 的布局样式。需先引入 mui 的css和js文件。\r\n在 index.html 中使用 cdn 引入后即可使用\r\n```\r\n <!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\">\r\n    <link href=\"https://cdn.bootcss.com/mint-ui/2.2.13/style.min.css\" rel=\"stylesheet\">\r\n    <link href=\"https://cdn.bootcss.com/mui/3.7.1/css/mui.min.css\" rel=\"stylesheet\">\r\n    <title>vue-mint</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <!-- 在cdn引入mint-ui的js之前，需要先引入vue的js -->\r\n    <script src=\"https://cdn.bootcss.com/vue/2.5.2/vue.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/mint-ui/2.2.13/index.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/axios/0.18.0/axios.min.js\"></script>\r\n    <script src=\"https://cdn.bootcss.com/mui/3.7.1/js/mui.min.js\"></script>\r\n    <!-- built files will be auto injected -->\r\n  </body>\r\n</html>\r\n\r\n```\r\n### 登录页代码 login.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"none\" title=\"登录\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <form class=\"mui-input-group\">\r\n          <div class=\"mui-input-row\">\r\n            <label>用户名</label>\r\n          <input v-model=\"user.username\" type=\"text\" class=\"mui-input-clear\" placeholder=\"请输入用户名\">\r\n          </div>\r\n          <div class=\"mui-input-row\">\r\n            <label>密码</label>\r\n            <input v-model=\"user.password\" type=\"password\" class=\"mui-input-password\" placeholder=\"请输入密码\">\r\n          </div>\r\n          <div class=\"mui-button-row\">\r\n            <button type=\"reset\" class=\"mui-btn mui-btn-danger\" >重置</button>\r\n            <button type=\"button\" class=\"mui-btn mui-btn-primary\" @click=\"login\">确认</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      user: {\r\n        username: \'\',\r\n        password: \'\'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    login () {\r\n      this.$http({\r\n        url: \'/user/login\',\r\n        method: \'post\',\r\n        data: {\r\n          username: this.user.username,\r\n          password: this.user.password\r\n        }\r\n      }).then(res => {\r\n        if (res.data.success === true) {\r\n          // 登录成功\r\n          console.log(\'登录成功了\')\r\n          var returnUrl = this.$route.query.returnUrl // 获取问号参数\r\n          if (returnUrl) {\r\n            location.href = returnUrl\r\n          } else {\r\n            this.$router.push({name: \'user\'})\r\n          }\r\n        } else {\r\n          // 登录失败\r\n          console.log(\'失败了\')\r\n          this.$toast(res.data.message)\r\n        }\r\n      })\r\n    }\r\n  },\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n```',32,100,'2019-04-24 05:58:21','2019-04-24 05:58:21'),(318,'## 购物车\r\n### 购物车路由\r\nsrc/router/index.js\r\n```\r\nimport Cart from \'@/views/cart.vue\'\r\n...\r\n    // 购物车\r\n    {\r\n      path: \'/cart\',\r\n      name: \'cart\',\r\n      component: Cart\r\n    }\r\n```\r\n### 购物车预览\r\n![](http://note.test/uploads/markdown/20190424-063049-699.png)\r\n### 封装 axios 登录拦截\r\n这里的加入购物车，需要用户登录，购物车的数据是保存在服务端的数据库中的。\r\n所以在用 axios post 请求加入购物车时，需要用户是登录的状态，如果没有登录，则需要拦截下来，并跳转登录页面。\r\nsrc/assets/js/myaxios.js\r\n```\r\nimport Axios from \'axios\'\r\nvar myPlugin = {}\r\nmyPlugin.install = function (vue) {\r\n  // 创建axios实例\r\n  var instance = Axios.create({\r\n    // 开发环境中跨域解决方法：/api 代理成了 http://home.test:3000（代理在config/index.js中设置），这是 vue 内置的 devServer 服务器作为代理服务器，尤其代理请求实现了跨域\r\n    // 生产环境中跨域还需要在服务器中设置\r\n    baseURL: process.env.NODE_ENV === \'development\' ? \'/api\' : \'http://home.test:3000\'\r\n  })\r\n  // axios 拦截器：返回结果之时做一下拦截（请求接口前做登录拦截，对于需要登录的接口才会拦截，哪些接口需要登录拦截是后端决定的）\r\n  instance.interceptors.response.use(\r\n    response => {\r\n      if (response.data.error === 400) { // 这里 400 是服务器返回数据中自定义的 400，不是 http 状态码\r\n        // console.log(\'未登录（需要登录才可以请求的接口，如果没有登录请求该接口，response.data.error 显示 400）\')\r\n        window.location.href = \'/#/login?returnUrl=\' + encodeURIComponent(location.href) // 跳转至 hash 路由, 并传递前网址\r\n      } else {\r\n        console.log(\'已登录，或者这是不需要拦截的接口\')\r\n      }\r\n      return response\r\n    },\r\n    error => {\r\n      console.log(\'拦截器error错误了\') // 如果服务器异常，http 状态码如果 404 等，才会走到这一步\r\n      console.log(error)\r\n      return Promise.reject(error)\r\n    }\r\n  )\r\n  vue.prototype.$http = instance\r\n}\r\n// 暴露\r\nexport default myPlugin\r\n\r\n```\r\n### 购物车代码 cart.vue\r\nsrc/views/cart.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"both\" iconType=\"fa fa-refresh\" routeName=\"cart\" title=\"购物车\"/>\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <!-- 加载效果 -->\r\n        <div class=\"clearfix\" v-if=\"isLoading\">\r\n          <p class=\"loading\">\r\n            <mt-spinner type=\"fading-circle\" size=\"17\"></mt-spinner>\r\n            <span class=\"loadingText\">正在加载中...</span>\r\n          </p>\r\n        </div>\r\n        <!-- 下拉刷新 -->\r\n        <mt-loadmore v-if=\"itemList\" ref=\"loadmore\" :top-method=\"loadTop\" :topPullText=\"topPullText\" :topDropText=\"topDropText\">\r\n          <ul id=\"cart\" class=\"mui-table-view\">\r\n            <li v-for=\"(item, index) in itemList\" :key=\"index\">\r\n              <mt-cell-swipe\r\n                is-link\r\n                :right=\"[\r\n                  {\r\n                    content: `<span class=\'fa fa-edit\'></span>`,\r\n                    style: { background: \'blue\', color: \'#fff\', width: \'80px\', textAlign: \'center\', lineHeight: \'96px\'},\r\n                    handler: () => edit(item.id)\r\n                  },\r\n                  {\r\n                    content: \'删除\',\r\n                    style: { background: \'red\', color: \'#fff\', width: \'80px\', textAlign: \'center\', lineHeight: \'96px\'},\r\n                    handler: () => del(item.id, index)\r\n                  }\r\n                ]\">\r\n                <a id=\"product_item\">\r\n                  <img class=\"leftImg\" :src=\"item.defaultPicAddr\">\r\n                  <div class=\"rightText\">\r\n                    <p class=\"name ellipsis-2\">{ { item.proName } }</p>\r\n                    <p class=\"price\">\r\n                      <span class=\"now\">¥{ { item.price } }</span>\r\n                      <span class=\"old\">¥{ { item.oldPrice } }</span>\r\n                      <span class=\"num\">x{ { item.num } } 双</span>\r\n                    </p>\r\n                    <p class=\"size\">鞋码 : { { item.size } }</p>\r\n                  </div>\r\n                  <input type=\"checkbox\" @click=\"checkboxChange($event, item.id)\" :checked=\"item.isChecked\">\r\n                </a>\r\n              </mt-cell-swipe>\r\n            </li>\r\n          </ul>\r\n        </mt-loadmore>\r\n      </div>\r\n    </div>\r\n    <div class=\"lt_amount\">\r\n      订单金额：¥<span>{ { amount } }</span>\r\n      <a href=\"#\">生成订单</a>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      isLoading: false,\r\n      topPullText: \'↓ 下拉刷新\',\r\n      topDropText: \'↑ 释放更新\',\r\n      itemList: null,\r\n      checkedList: [],\r\n      checkedListKey: \'checkedId\', // 选中的缓存列表的 key\r\n      amount: 0, // 订单总额\r\n      html: \'\', // 编辑框 html 模板\r\n      isShow: false,\r\n      editingItem: {}, // 当前正在编辑的产品\r\n      currentSize: null,\r\n      currentIndex: null,\r\n      currentNum: null,\r\n      currentInput: null // 当前正在编辑的产品的数量框 input\r\n    }\r\n  },\r\n  created () {\r\n    // 给 JSON.parse 的传参设置 默认值(需要是合法的json字符串)，避免其值为空字符串时报错\r\n    this.checkedList = JSON.parse(window.localStorage.getItem(this.checkedListKey) || \'[]\')\r\n    // 开始加载\r\n    this.isLoading = true\r\n    this.refresh()\r\n  },\r\n  methods: {\r\n    loadTop () {\r\n      this.refresh()\r\n    },\r\n    refresh () {\r\n      this.$http({\r\n        url: \'/cart/queryCart\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        setTimeout(() => {\r\n          res.data.forEach(element => {\r\n            // 为每个产品加一个封面图片\r\n            element.defaultPicAddr = \'http://home.test:3000/mobile/images/none01.jpg\'\r\n            if (element.pic && element.pic[0] && element.pic[0].picAddr) {\r\n              element.defaultPicAddr = \'http://home.test:3000\' + element.pic[0].picAddr\r\n            }\r\n            // 为每个产品标记是否被选中\r\n            element.isChecked = false\r\n            if (this.checkedList.indexOf(element.id) >= 0) { // 如果 id 在选中列表中，则表示该项是选中的\r\n              element.isChecked = true\r\n            }\r\n            // 处理尺码\r\n            var sizeArr = element.productSize.split(\'-\')\r\n            var arr = []\r\n            for (var i = sizeArr[0]; i <= sizeArr[1]; i++) {\r\n              arr.push(i)\r\n            }\r\n            element.sizeArr = arr\r\n          })\r\n          this.itemList = res.data\r\n          this.calcAmount() // 计算总金额\r\n          this.isLoading = false // 加载结束\r\n          this.$nextTick(() => { // 因为 mt-loadmore 用了v-if, 所以需要等 dom 渲染之后，再用 $refs 才能取得到\r\n            this.$refs.loadmore.onTopLoaded() // 必须有这一句，表示下拉刷新结束\r\n          })\r\n        }, 1500)\r\n      })\r\n    },\r\n    // 左滑后点击编辑\r\n    edit (id) {\r\n      var currentItemArr = this.itemList.filter((element, index) => { // filter 返回一个新数组，但并不改变原数组\r\n        if (element.id === id) {\r\n          this.currentIndex = index\r\n          this.currentSize = element.size\r\n          this.currentNum = element.num\r\n          return true\r\n        }\r\n      })\r\n      this.editingItem = currentItemArr[0] // 这个新数组只要这 1 个元素\r\n      // 编辑框 html 模板\r\n      var size = \'\'\r\n      this.editingItem.sizeArr.forEach(element => {\r\n        size += `<i>\r\n          <span data-size=\"${element}\" class=\"${parseInt(this.editingItem.size) === parseInt(element) ? \'now\' : \'\'}\">${element}</span> \r\n        </i>`\r\n      })\r\n      var html = `\r\n        <div class=\"pro_size\" style=\"text-align: left\">\r\n          尺码：\r\n          ${size}\r\n        </div>\r\n        <div class=\"pro_num\" style=\"text-align: left\">\r\n          <span>数量：</span>\r\n          <p class=\"box\">\r\n            <span class=\"reduce\">-</span>\r\n            <input class=\"orderNum\" type=\"number\" value=\"${this.editingItem.num}\" readonly>\r\n            <span class=\"plus\">+</span>\r\n          </p>\r\n          <span>剩余：</span>\r\n          <p class=\"rest\">${this.editingItem.productNum}</p>\r\n          <span>件</span>\r\n        </div>`\r\n      // 编辑框\r\n      this.$messagebox.confirm(\'\', {\r\n        title: \'编辑商品\',\r\n        message: html,\r\n        confirmButtonText: \'确认\',\r\n        cancelButtonText: \'取消\'\r\n      }).then(action => {\r\n        if (action === \'confirm\') {\r\n          this.updateCart()\r\n        }\r\n      }).catch(error => {\r\n        if (error === \'cancel\') {\r\n          console.log(\'取消了编辑\')\r\n        }\r\n      })\r\n      // 为 html 模板内容绑定事件(只能绑定一次，否则每次点击编辑时，都会绑定一个加法或减法，造成多次绑定，从而多加或多减)\r\n      this.$nextTick(() => {\r\n        this.currentInput = window.document.querySelector(\'.orderNum\')\r\n        this.currentNum = parseInt(this.currentInput.value)\r\n        this.bindEvent()\r\n      })\r\n    },\r\n    // 为编辑框绑定事件：加法、减法、改变尺码(为了只绑定一次事件，需要事件函数定义在外部，如果不放在外面，每次都会新建一个函数，还是还绑定多次)\r\n    bindEvent () {\r\n      // 加法\r\n      var plusDom = window.document.querySelector(\'.plus\')\r\n      plusDom.removeEventListener(\'click\', this.plusFun)\r\n      plusDom.addEventListener(\'click\', this.plusFun)\r\n      // 减法\r\n      var reduceDom = window.document.querySelector(\'.reduce\')\r\n      reduceDom.removeEventListener(\'click\', this.reduceFun)\r\n      reduceDom.addEventListener(\'click\', this.reduceFun)\r\n      // 改变尺码（事件委托）\r\n      var sizeParent = window.document.querySelector(\'.pro_size\')\r\n      sizeParent.addEventListener(\'click\', (e) => {\r\n        if (e.target.nodeName === \'SPAN\') {\r\n          // 先去掉 now\r\n          var nowSize = sizeParent.querySelector(\'.now\')\r\n          if (nowSize) {\r\n            nowSize.classList.remove(\'now\')\r\n          }\r\n          // 再加上 now\r\n          e.target.classList.add(\'now\')\r\n          // 改变 currentSize\r\n          this.currentSize = e.target.dataset.size\r\n          console.log(this.currentSize, typeof this.currentSize)\r\n        }\r\n      })\r\n    },\r\n    // 加法\r\n    plusFun () {\r\n      if (this.currentNum + 1 <= this.editingItem.productNum) {\r\n        this.currentNum++\r\n        console.log(this.currentNum)\r\n        this.currentInput.setAttribute(\'value\', this.currentNum)\r\n      }\r\n    },\r\n    // 减法\r\n    reduceFun () {\r\n      if (this.currentNum - 1 >= 1) {\r\n        this.currentNum--\r\n        console.log(this.currentNum)\r\n        this.currentInput.setAttribute(\'value\', this.currentNum)\r\n      }\r\n    },\r\n    del (id, index) {\r\n      this.$messagebox.confirm(\'\', {\r\n        title: \'提示\',\r\n        message: \'确认删除吗？\',\r\n        confirmButtonText: \'确认\',\r\n        cancelButtonText: \'取消\'\r\n      }).then(action => {\r\n        if (action === \'confirm\') { // 点击确认\r\n          // 从服务器删除\r\n          this.$http({\r\n            url: \'/cart/deleteCart\',\r\n            method: \'get\',\r\n            params: {\r\n              id: id\r\n            }\r\n          }).then(res => {\r\n            if (res.data.success) {\r\n              this.$toast(\'删除成功！\')\r\n              this.itemList.splice(index, 1) // 客户端删除\r\n              this.calcAmount() // 计算金额\r\n              if (this.checkedList.indexOf(id) >= 0) { // 删除选中状态的缓存列表\r\n                this.checkedList.splice(this.checkedList.indexOf(id), 1)\r\n                // 存入缓存\r\n                localStorage.setItem(this.checkedListKey, JSON.stringify(this.checkedList))\r\n              }\r\n            }\r\n          })\r\n        }\r\n      }).catch(error => {\r\n        if (error === \'cancel\') { // 点击取消\r\n          // console.log(\'取消\')\r\n        }\r\n      })\r\n    },\r\n    // 选中或取消\r\n    checkboxChange (e, id) {\r\n      if (e.target.checked) {\r\n        // 选中，则加入缓存列表 checkedList 中\r\n        if (this.checkedList.indexOf(id) === -1) { // 如果 id 不在列表中, 才把 id 加入列表\r\n          this.checkedList.push(id)\r\n        }\r\n      } else {\r\n        // 未选中，则从缓存列表 checkedList 中移除\r\n        if (this.checkedList.indexOf(id) >= 0) { // 如果 id 在列表中，则移除\r\n          this.checkedList.splice(this.checkedList.indexOf(id), 1)\r\n        }\r\n      }\r\n      this.itemList.forEach(element => {\r\n        if (element.id === id) {\r\n          element.isChecked = e.target.checked\r\n        }\r\n      })\r\n      // 存入缓存\r\n      localStorage.setItem(this.checkedListKey, JSON.stringify(this.checkedList))\r\n      this.calcAmount()\r\n    },\r\n    // 计算总金额\r\n    calcAmount: function () {\r\n      // 四种情况需要计算金额：初始化、选择复选框、删除、修改数量\r\n      // 计算业务\r\n      var amount = 0\r\n      this.itemList.forEach(element => {\r\n        if (element.isChecked) {\r\n          amount += element.price * element.num\r\n        }\r\n      })\r\n      this.amount = amount.toFixed(2)\r\n    },\r\n    // 更新购物车\r\n    updateCart () {\r\n      var data = {\r\n        id: this.editingItem.id,\r\n        size: this.currentSize,\r\n        num: this.currentNum\r\n      }\r\n      this.$http({\r\n        url: \'/cart/updateCart\',\r\n        method: \'post\',\r\n        data: data\r\n      }).then(res => {\r\n        if (res.data.success === true) {\r\n          this.$toast(\'修改成功！\')\r\n          // 修改数组驱动渲染\r\n          this.itemList[this.currentIndex].num = this.currentNum\r\n          this.itemList[this.currentIndex].size = this.currentSize\r\n          this.calcAmount()\r\n        }\r\n      })\r\n    }\r\n  },\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.lt_content {\r\n  padding-bottom: 85px;\r\n}\r\n// 产品模块\r\n #product_item {\r\n  display: block;\r\n  padding-right: 20px;\r\n  .leftImg {\r\n    float: left; // 两栏自适应布局：左边 float: left; 右边：overflow: hidden\r\n    width: 42px;\r\n    margin-right: 10px;\r\n    margin-top: 10px;\r\n  }\r\n  .rightText {\r\n    overflow: hidden;\r\n    margin-top: 10px;\r\n  }\r\n  .name {\r\n    color: #8f8f94;\r\n    line-height: 17px;\r\n  }\r\n  .price {\r\n    position: relative;\r\n    .now {\r\n      color: red;\r\n    }\r\n    .old {\r\n      color: #666;\r\n      text-decoration: line-through;\r\n    }\r\n    .num {\r\n      position: absolute;\r\n      right: 0;\r\n    }\r\n  }\r\n  input {\r\n    position: absolute;\r\n    left: 10px;\r\n    bottom: 10px;\r\n  }\r\n}\r\n/* 金额模块 */\r\n.lt_amount {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 55px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  width: 100%;\r\n  background: #ccc;\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  padding: 0 10px;\r\n  a {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    width: 60px;\r\n    height: 30px;\r\n    text-align: center;\r\n    background: red;\r\n    color: #fff;\r\n    font-weight: normal;\r\n  }\r\n}\r\n// 编辑框\r\n.pro_size {\r\n  font-size: 14px;\r\n  span {\r\n    font-size: 12px;\r\n    padding: 5px; /* 行内元素可以用 padding 撑开宽高 */\r\n    border: 1px solid #666666;\r\n    line-height: 32px;\r\n  }\r\n  span.now {\r\n    background: #fa0;\r\n  }\r\n}\r\n.pro_num {\r\n  height: 50px;\r\n  &>span {\r\n    float: left;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    font-size: 14px;\r\n  }\r\n  .box {\r\n    /* display: inline-block; */\r\n    float: left;\r\n    vertical-align: middle;\r\n    border: 1px solid #ccc;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 30px;\r\n    margin-right: 10px;\r\n    span {\r\n      float: left;\r\n      width: 30px;\r\n      height: 28px;\r\n      line-height: 28px;\r\n      text-align: center;\r\n      font-size: 12px;\r\n      color: #333;\r\n    }\r\n    input.orderNum {\r\n      float: left;\r\n      padding: 0;\r\n      margin: 0;\r\n      border: none;\r\n      border-radius: 0;\r\n      border-right: 1px solid #ccc;\r\n      border-left: 1px solid #ccc;\r\n      width: 28px;\r\n      height: 28px;\r\n      text-align: center;\r\n    }\r\n  }\r\n  p.rest {\r\n    float: left;\r\n    font-size: 17px;\r\n    margin: 0;\r\n    color: #333;\r\n    line-height: 30px;\r\n    height: 30px;\r\n    margin-right: 3px;\r\n  }\r\n}\r\n</style>\r\n\r\n```',32,100,'2019-04-24 06:31:06','2019-04-24 06:31:46'),(319,'## 个人中心\r\n### 个人中心路由\r\nsrc/router/index.js\r\n```\r\nimport User from \'@/views/user.vue\'\r\n...\r\n   // 个人中心\r\n    {\r\n      path: \'/user\',\r\n      name: \'user\',\r\n      component: User\r\n    }\r\n```\r\n### 个人中心预览\r\n![](http://note.test/uploads/markdown/20190424-063920-730.png)\r\n### 个人中心代码 user.vue\r\nsrc/views/user.vue\r\n```\r\n<template>\r\n  <div class=\"lt_container\">\r\n    <!-- 头部组件: Header 接收参数 hasWings，参数值：both/left/right/none -->\r\n    <Header hasWings=\"none\" />\r\n    <!-- 中间部分 -->\r\n    <div class=\"lt_content\">\r\n      <div class=\"lt_wrapper\">\r\n        <!-- 由于 mt-cell 样式模板有限，只有拷贝 mt-cell 编译后的源码来改造 -->\r\n        <div class=\"page-cell\">\r\n          <a class=\"mint-cell\">\r\n            <span class=\"mint-cell-mask\"></span>\r\n            <div class=\"mint-cell-left\"></div>\r\n            <div class=\"mint-cell-wrapper\">\r\n              <img class=\"icon\" src=\"http://home.test:3000/mobile/images/user.jpg\" width=\"42\" height=\"42\" />\r\n              <div class=\"mint-cell-title\">\r\n                <span class=\"mint-cell-text\">{ { user.username } }</span>\r\n                <span class=\"mint-cell-label\">手机号：{ { user.mobile } }</span>\r\n              </div>\r\n              <div class=\"mint-cell-value is-link\">\r\n                <span></span>\r\n              </div>\r\n              <i class=\"mint-cell-allow-right\"></i>\r\n            </div>\r\n            <div class=\"mint-cell-right\"></div>\r\n          </a>\r\n          <mt-cell is-link title=\"账号与安全\"></mt-cell>\r\n          <mt-cell is-link title=\"我的购物车\"></mt-cell>\r\n          <mt-cell is-link title=\"收货地址管理\"></mt-cell>\r\n        </div>\r\n        <div class=\"btn_box\">\r\n          <a href=\"javascript:;\" class=\"mui-btn mui-btn-danger\" @click=\"logout\">退出登录</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 底部组件：footer -->\r\n    <Footer />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入头部组件\r\nimport Header from \'@/components/header.vue\'\r\n// 引入底部组件\r\nimport Footer from \'@/components/footer.vue\'\r\nexport default {\r\n  data () {\r\n    return {\r\n      user: {\r\n        username: \'加载中...\',\r\n        mobile: \'加载中...\'\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    this.getUserInfo()\r\n  },\r\n  methods: {\r\n    getUserInfo () {\r\n      this.$http({\r\n        url: \'/user/queryUserMessage\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        setTimeout(() => {\r\n          this.user = res.data\r\n        }, 1500)\r\n      })\r\n    },\r\n    logout () {\r\n      this.$http({\r\n        url: \'/user/logout\',\r\n        method: \'get\'\r\n      }).then(res => {\r\n        if (res.data.success) {\r\n          this.$router.push({name: \'login\'})\r\n        }\r\n      })\r\n    }\r\n  },\r\n  components: {\r\n    Header,\r\n    Footer\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.icon {\r\n  margin-right: 10px;\r\n}\r\n.btn_box {\r\n  width: 100%;\r\n  margin-top: 10xp;\r\n  padding: 10px;\r\n  a {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n\r\n```',32,100,'2019-04-24 06:40:08','2019-04-24 06:40:08'),(320,'## yarn 命令\r\nyarn 用来替代 npm 更安全\r\n### yarn 更新依赖包\r\n第一种方式：选择需要 升级 的安装包\r\n```\r\nyarn upgrade-interactive --latest\r\n// 需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择\r\n```\r\n第二种方式：指定包版本安装\r\n```\r\nyarn upgrade package@version\r\n// yarn.lock和package.json都会更新，但是会进行版本锁定 \"echarts\": \"4.2.0-rc.2\"\r\n```\r\n\r\n### yarn install --no-bin-links 安装依赖包\r\n```\r\nyarn install --no-bin-links\r\n\r\nThe --no-bin-links argument will prevent npm from creating symlinks for any binaries the package might contain.\r\n\r\n字面意思是设置 npm install 时不要创建符号链接。查了下说是为了解决 linux 下的 npm 在 ntfs 分区上运行 npm install 遇到的创建软连接失败问题引入的。\r\n```',6,100,'2019-04-24 07:27:04','2019-10-30 05:53:36'),(321,'## 标题二\r\n发送到离开房间了发大水了胡椒粉\r\n```\r\n<html>\r\n<head></head>\r\n</html>\r\n```\r\n| sdf   |   dfs  |\r\n| ------------ | ------------ |\r\n|  fdfs  | fdsf f  |\r\n|  sdf  |   sdf  |\r\n```\r\n #id {\r\n color: red\r\n}\r\n```',33,100,'2019-04-26 18:12:17','2019-04-27 06:19:29'),(322,'### 三级标题\r\n东方嘉盛了的开房记录\r\n附近的时空裂缝\r\n{ { $name } }',33,100,'2019-04-27 06:19:54','2019-04-27 06:21:04'),(323,'## 升级依赖包的问题（为了安全）\r\n升级 webpack-dev-server 后，启动 npm run dev 时报错，导致无法启动，具体原因还没查明。\r\n暂时的解决方案是：退回升级之前的版本，暂不升级\r\n未来需要解决的是：研究升级后，确保 npm run dev 能启动。\r\n```\r\nyarn upgrade package@version\r\n```',32,100,'2019-04-27 09:14:16','2019-04-27 09:14:16'),(324,'## sass (scss)\r\n### sass 变量\r\nsass 变量使用 `$` (less 使用的是 @)\r\n```\r\n$nav-color: #F90;\r\nnav {\r\n  $width: 100px;\r\n  width: $width;\r\n  color: $nav-color;\r\n}\r\n \r\n//编译后\r\n \r\nnav {\r\n  width: 100px;\r\n  color: #F90;\r\n}\r\n```\r\n### sass 混入\r\n混入定义：@mixin name {}\r\n混入引入：@include name;\r\n```\r\n$line-color: red;\r\n// 向左的箭头\r\n@mixin left_arrow {\r\n  &::after {\r\n    content: \'\\e583\';\r\n    font-family: Muiicons;\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    display: inline-block;\r\n    -webkit-transform: translateY(-50%);\r\n    transform: translateY(-50%);\r\n    text-decoration: none;\r\n    color: $line-color;\r\n    -webkit-font-smoothing: antialiased;\r\n    position: absolute;\r\n    top: 10px;\r\n    right: -6px;\r\n  }\r\n}\r\n// 向右的箭头\r\n@mixin right_arrow {\r\n  &::before {\r\n    content: \'\\e582\';\r\n    font-family: Muiicons;\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    display: inline-block;\r\n    -webkit-transform: translateY(-50%);\r\n    transform: translateY(-50%);\r\n    text-decoration: none;\r\n    color: $line-color;\r\n    -webkit-font-smoothing: antialiased;\r\n    position: absolute;\r\n    top: 10px;\r\n    left: -6px;\r\n  }\r\n}\r\n// 左箭头线\r\n.line_left_arrow {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 10px;\r\n  border-bottom: 1px dashed $line-color;\r\n  @include left_arrow;\r\n}\r\n// 右箭头线\r\n.line_right_arrow {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 10px;\r\n  border-bottom: 1px dashed $line-color;\r\n  @include right_arrow;\r\n}\r\n// 左右箭头线\r\n.line_both_arrow {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 10px;\r\n  border-bottom: 1px dashed $line-color;\r\n  @include left_arrow;\r\n  @include right_arrow;\r\n}\r\n```',24,100,'2019-05-10 02:49:19','2019-05-10 02:54:24'),(325,'### composer 安装/移除一个依赖\r\n安装bootstrap\r\n```\r\ncomposer require laravel/ui --dev  // 安装laravel/ui\r\n\r\nphp artisan ui bootstrap // 安装bootstrap\r\n\r\n$ npm config set registry=https://registry.npm.taobao.org\r\n$ yarn config set registry \'https://registry.npm.taobao.org\'\r\n\r\n$ yarn install --no-bin-links\r\n$ yarn add cross-env\r\n$ yarn add cross-env@^6.0.3\r\n```\r\n```\r\ncomposer remove laravel/ui  // 移除laravel/ui\r\n```',21,100,'2019-11-01 10:52:06','2020-05-22 13:52:21'),(326,'## mysql数据库基本操作\r\n### 启用关闭数据库\r\n```\r\nnet start mysql_serverName  // 启用数据库服务器\r\nnet stop mysql_serverName  // 关闭数据库服务器\r\n```\r\n### 登录与退出数据库\r\n```\r\nmysql -uroot  -proot123  // -u用户名，-p密码，-V查看版本，-h主机地址\r\nexit | quit | \\q   // 退出\r\n```',4,100,'2020-01-01 04:53:53','2020-01-01 04:58:52'),(327,'## 操作mysql数据库\r\n### 显示数据库列表\r\n```\r\nshow databases;\r\n```\r\n### 删除数据库\r\n```\r\ndrop database dbname;\r\n```',4,100,'2020-01-01 05:03:22','2020-01-01 05:06:18'),(328,'### 生成环境执行 composer\r\n```\r\ncomposer install --no-dev // 排除开发环境扩展包的安装\r\n```',21,100,'2020-01-15 12:31:14','2020-01-15 12:31:14'),(329,'## 默认标题\r\n对方是否',21,100,'2020-05-22 13:44:31','2020-05-22 13:44:31'),(330,'## 版本格式\r\n- 主版本号。次版本号。修订号，如 `1.0.1` , `3.2.39` 。版本号递增规则如下：\r\n- 主版本号：当你做了不兼容的 API 修改\r\n- 次版本号：当你做了向下兼容的功能性新增\r\n- 修订号：当你做了向下兼容的问题修正。\r\n##  波浪号 ~\r\n- `〜1.2` 代表 `1.2 <= 版本号 < 2.0.0` \r\n- `〜1.2.3` 代表 `1.2.3 <= 版本号 < 1.3.0`\r\n- `波浪号 ~` 表示「从最后一位数字递增」\r\n## 插入号 ^\r\n- `^1.2` 代表 `1.2 <= 版本号 < 2.0.0`\r\n- `^1.2.3` 代表 `1.2.3 <= 版本号 < 2.0.0`\r\n- `插入号 ^` 表示「从第二位数字递增」\r\n## 插入号 ^ 的特殊情况\r\n- 对于 `pre-1.0` ，它还考虑到安全性，会将 `^0.3` 视为 `0.3.0 <= 版本号 < 0.4.0`',34,100,'2020-06-01 15:06:42','2020-06-01 15:08:24');
/*!40000 ALTER TABLE `paragraphs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'andy','andy.liujin@foxmail.com','$2y$10$r2FWQ9aN4UMd1BoZtpiAFOdXTSy1/oAAcqpeO8Fic9OjJkNYFK4Oy','dw1cMIfeQcyu3WV6GMRDQughvHtZqCWnGmPosY3uCursTIWwFC74BJwBiAwl','2019-03-22 16:30:55','2019-03-22 16:30:55');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-07-17 10:55:12
